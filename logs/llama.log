LLM is explicitly disabled. Using MockLLM.
llama_model_loader: loaded meta data with 20 key-value pairs and 291 tensors from models/Mistral/mistral-7b-instruct-v0.1.Q2_K.gguf (version GGUF V2)
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = llama
llama_model_loader: - kv   1:                               general.name str              = mistralai_mistral-7b-instruct-v0.1
llama_model_loader: - kv   2:                       llama.context_length u32              = 32768
llama_model_loader: - kv   3:                     llama.embedding_length u32              = 4096
llama_model_loader: - kv   4:                          llama.block_count u32              = 32
llama_model_loader: - kv   5:                  llama.feed_forward_length u32              = 14336
llama_model_loader: - kv   6:                 llama.rope.dimension_count u32              = 128
llama_model_loader: - kv   7:                 llama.attention.head_count u32              = 32
llama_model_loader: - kv   8:              llama.attention.head_count_kv u32              = 8
llama_model_loader: - kv   9:     llama.attention.layer_norm_rms_epsilon f32              = 0.000010
llama_model_loader: - kv  10:                       llama.rope.freq_base f32              = 10000.000000
llama_model_loader: - kv  11:                          general.file_type u32              = 10
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,32000]   = ["<unk>", "<s>", "</s>", "<0x00>", "<...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,32000]   = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,32000]   = [2, 3, 3, 6, 6, 6, 6, 6, 6, 6, 6, 6, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 1
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 2
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 0
llama_model_loader: - kv  19:               general.quantization_version u32              = 2
llama_model_loader: - type  f32:   65 tensors
llama_model_loader: - type q2_K:   65 tensors
llama_model_loader: - type q3_K:  160 tensors
llama_model_loader: - type q6_K:    1 tensors
print_info: file format = GGUF V2
print_info: file type   = Q2_K - Medium
print_info: file size   = 2.87 GiB (3.41 BPW) 
init_tokenizer: initializing tokenizer for type 1
load: control token:      2 '</s>' is not marked as EOG
load: control token:      1 '<s>' is not marked as EOG
load: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
load: special tokens cache size = 3
load: token to piece cache size = 0.1637 MB
print_info: arch             = llama
print_info: vocab_only       = 0
print_info: n_ctx_train      = 32768
print_info: n_embd           = 4096
print_info: n_layer          = 32
print_info: n_head           = 32
print_info: n_head_kv        = 8
print_info: n_rot            = 128
print_info: n_swa            = 0
print_info: n_swa_pattern    = 1
print_info: n_embd_head_k    = 128
print_info: n_embd_head_v    = 128
print_info: n_gqa            = 4
print_info: n_embd_k_gqa     = 1024
print_info: n_embd_v_gqa     = 1024
print_info: f_norm_eps       = 0.0e+00
print_info: f_norm_rms_eps   = 1.0e-05
print_info: f_clamp_kqv      = 0.0e+00
print_info: f_max_alibi_bias = 0.0e+00
print_info: f_logit_scale    = 0.0e+00
print_info: f_attn_scale     = 0.0e+00
print_info: n_ff             = 14336
print_info: n_expert         = 0
print_info: n_expert_used    = 0
print_info: causal attn      = 1
print_info: pooling type     = 0
print_info: rope type        = 0
print_info: rope scaling     = linear
print_info: freq_base_train  = 10000.0
print_info: freq_scale_train = 1
print_info: n_ctx_orig_yarn  = 32768
print_info: rope_finetuned   = unknown
print_info: ssm_d_conv       = 0
print_info: ssm_d_inner      = 0
print_info: ssm_d_state      = 0
print_info: ssm_dt_rank      = 0
print_info: ssm_dt_b_c_rms   = 0
print_info: model type       = 7B
print_info: model params     = 7.24 B
print_info: general.name     = mistralai_mistral-7b-instruct-v0.1
print_info: vocab type       = SPM
print_info: n_vocab          = 32000
print_info: n_merges         = 0
print_info: BOS token        = 1 '<s>'
print_info: EOS token        = 2 '</s>'
print_info: UNK token        = 0 '<unk>'
print_info: LF token         = 13 '<0x0A>'
print_info: EOG token        = 2 '</s>'
print_info: max token length = 48
load_tensors: loading model tensors, this can take a while... (mmap = true)
load_tensors: layer   0 assigned to device CPU, is_swa = 0
load_tensors: layer   1 assigned to device CPU, is_swa = 0
load_tensors: layer   2 assigned to device CPU, is_swa = 0
load_tensors: layer   3 assigned to device CPU, is_swa = 0
load_tensors: layer   4 assigned to device CPU, is_swa = 0
load_tensors: layer   5 assigned to device CPU, is_swa = 0
load_tensors: layer   6 assigned to device CPU, is_swa = 0
load_tensors: layer   7 assigned to device CPU, is_swa = 0
load_tensors: layer   8 assigned to device CPU, is_swa = 0
load_tensors: layer   9 assigned to device CPU, is_swa = 0
load_tensors: layer  10 assigned to device CPU, is_swa = 0
load_tensors: layer  11 assigned to device CPU, is_swa = 0
load_tensors: layer  12 assigned to device CPU, is_swa = 0
load_tensors: layer  13 assigned to device CPU, is_swa = 0
load_tensors: layer  14 assigned to device CPU, is_swa = 0
load_tensors: layer  15 assigned to device CPU, is_swa = 0
load_tensors: layer  16 assigned to device CPU, is_swa = 0
load_tensors: layer  17 assigned to device CPU, is_swa = 0
load_tensors: layer  18 assigned to device CPU, is_swa = 0
load_tensors: layer  19 assigned to device CPU, is_swa = 0
load_tensors: layer  20 assigned to device CPU, is_swa = 0
load_tensors: layer  21 assigned to device CPU, is_swa = 0
load_tensors: layer  22 assigned to device CPU, is_swa = 0
load_tensors: layer  23 assigned to device CPU, is_swa = 0
load_tensors: layer  24 assigned to device CPU, is_swa = 0
load_tensors: layer  25 assigned to device CPU, is_swa = 0
load_tensors: layer  26 assigned to device CPU, is_swa = 0
load_tensors: layer  27 assigned to device CPU, is_swa = 0
load_tensors: layer  28 assigned to device CPU, is_swa = 0
load_tensors: layer  29 assigned to device CPU, is_swa = 0
load_tensors: layer  30 assigned to device CPU, is_swa = 0
load_tensors: layer  31 assigned to device CPU, is_swa = 0
load_tensors: layer  32 assigned to device CPU, is_swa = 0
load_tensors: tensor 'token_embd.weight' (q2_K) (and 290 others) cannot be used with preferred buffer type CPU_AARCH64, using CPU instead
load_tensors:   CPU_Mapped model buffer size =  2939.57 MiB
..................................................................................................
llama_context: constructing llama_context
llama_context: n_batch is less than GGML_KQ_MASK_PAD - increasing to 64
llama_context: n_seq_max     = 1
llama_context: n_ctx         = 2048
llama_context: n_ctx_per_seq = 2048
llama_context: n_batch       = 64
llama_context: n_ubatch      = 8
llama_context: causal_attn   = 1
llama_context: flash_attn    = 0
llama_context: freq_base     = 10000.0
llama_context: freq_scale    = 1
llama_context: n_ctx_per_seq (2048) < n_ctx_train (32768) -- the full capacity of the model will not be utilized
set_abort_callback: call
llama_context:        CPU  output buffer size =     0.12 MiB
create_memory: n_ctx = 2048 (padded)
llama_kv_cache_unified: kv_size = 2048, type_k = 'f16', type_v = 'f16', n_layer = 32, can_shift = 1, padding = 32
llama_kv_cache_unified: layer   0: dev = CPU
llama_kv_cache_unified: layer   1: dev = CPU
llama_kv_cache_unified: layer   2: dev = CPU
llama_kv_cache_unified: layer   3: dev = CPU
llama_kv_cache_unified: layer   4: dev = CPU
llama_kv_cache_unified: layer   5: dev = CPU
llama_kv_cache_unified: layer   6: dev = CPU
llama_kv_cache_unified: layer   7: dev = CPU
llama_kv_cache_unified: layer   8: dev = CPU
llama_kv_cache_unified: layer   9: dev = CPU
llama_kv_cache_unified: layer  10: dev = CPU
llama_kv_cache_unified: layer  11: dev = CPU
llama_kv_cache_unified: layer  12: dev = CPU
llama_kv_cache_unified: layer  13: dev = CPU
llama_kv_cache_unified: layer  14: dev = CPU
llama_kv_cache_unified: layer  15: dev = CPU
llama_kv_cache_unified: layer  16: dev = CPU
llama_kv_cache_unified: layer  17: dev = CPU
llama_kv_cache_unified: layer  18: dev = CPU
llama_kv_cache_unified: layer  19: dev = CPU
llama_kv_cache_unified: layer  20: dev = CPU
llama_kv_cache_unified: layer  21: dev = CPU
llama_kv_cache_unified: layer  22: dev = CPU
llama_kv_cache_unified: layer  23: dev = CPU
llama_kv_cache_unified: layer  24: dev = CPU
llama_kv_cache_unified: layer  25: dev = CPU
llama_kv_cache_unified: layer  26: dev = CPU
llama_kv_cache_unified: layer  27: dev = CPU
llama_kv_cache_unified: layer  28: dev = CPU
llama_kv_cache_unified: layer  29: dev = CPU
llama_kv_cache_unified: layer  30: dev = CPU
llama_kv_cache_unified: layer  31: dev = CPU
llama_kv_cache_unified:        CPU KV buffer size =   256.00 MiB
llama_kv_cache_unified: KV self size  =  256.00 MiB, K (f16):  128.00 MiB, V (f16):  128.00 MiB
llama_context: enumerating backends
llama_context: backend_ptrs.size() = 1
llama_context: max_nodes = 65536
llama_context: worst-case: n_tokens = 8, n_seqs = 1, n_outputs = 0
llama_context: reserving graph for n_tokens = 8, n_seqs = 1
llama_context: reserving graph for n_tokens = 1, n_seqs = 1
llama_context: reserving graph for n_tokens = 8, n_seqs = 1
llama_context:        CPU compute buffer size =     3.00 MiB
llama_context: graph nodes  = 1094
llama_context: graph splits = 1
CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
Model metadata: {'general.name': 'mistralai_mistral-7b-instruct-v0.1', 'general.architecture': 'llama', 'llama.context_length': '32768', 'llama.rope.dimension_count': '128', 'llama.embedding_length': '4096', 'llama.block_count': '32', 'llama.feed_forward_length': '14336', 'llama.attention.head_count': '32', 'tokenizer.ggml.eos_token_id': '2', 'general.file_type': '10', 'llama.attention.head_count_kv': '8', 'llama.attention.layer_norm_rms_epsilon': '0.000010', 'llama.rope.freq_base': '10000.000000', 'tokenizer.ggml.model': 'llama', 'general.quantization_version': '2', 'tokenizer.ggml.bos_token_id': '1', 'tokenizer.ggml.unknown_token_id': '0'}
Using fallback chat format: llama-2
Building index from SQLite database...
Loading embedding model: intfloat/e5-small-v2 on CPU
Index saved to faiss_index
llama_perf_context_print:        load time =  110713.91 ms
llama_perf_context_print: prompt eval time =  110713.28 ms /   336 tokens (  329.50 ms per token,     3.03 tokens per second)
llama_perf_context_print:        eval time =    3073.89 ms /     5 runs   (  614.78 ms per token,     1.63 tokens per second)
llama_perf_context_print:       total time =  113858.73 ms /   341 tokens
LLM is explicitly disabled. Using MockLLM.
llama_model_loader: loaded meta data with 20 key-value pairs and 291 tensors from models/Mistral/mistral-7b-instruct-v0.1.Q2_K.gguf (version GGUF V2)
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = llama
llama_model_loader: - kv   1:                               general.name str              = mistralai_mistral-7b-instruct-v0.1
llama_model_loader: - kv   2:                       llama.context_length u32              = 32768
llama_model_loader: - kv   3:                     llama.embedding_length u32              = 4096
llama_model_loader: - kv   4:                          llama.block_count u32              = 32
llama_model_loader: - kv   5:                  llama.feed_forward_length u32              = 14336
llama_model_loader: - kv   6:                 llama.rope.dimension_count u32              = 128
llama_model_loader: - kv   7:                 llama.attention.head_count u32              = 32
llama_model_loader: - kv   8:              llama.attention.head_count_kv u32              = 8
llama_model_loader: - kv   9:     llama.attention.layer_norm_rms_epsilon f32              = 0.000010
llama_model_loader: - kv  10:                       llama.rope.freq_base f32              = 10000.000000
llama_model_loader: - kv  11:                          general.file_type u32              = 10
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,32000]   = ["<unk>", "<s>", "</s>", "<0x00>", "<...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,32000]   = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,32000]   = [2, 3, 3, 6, 6, 6, 6, 6, 6, 6, 6, 6, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 1
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 2
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 0
llama_model_loader: - kv  19:               general.quantization_version u32              = 2
llama_model_loader: - type  f32:   65 tensors
llama_model_loader: - type q2_K:   65 tensors
llama_model_loader: - type q3_K:  160 tensors
llama_model_loader: - type q6_K:    1 tensors
print_info: file format = GGUF V2
print_info: file type   = Q2_K - Medium
print_info: file size   = 2.87 GiB (3.41 BPW) 
init_tokenizer: initializing tokenizer for type 1
load: control token:      2 '</s>' is not marked as EOG
load: control token:      1 '<s>' is not marked as EOG
load: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
load: special tokens cache size = 3
load: token to piece cache size = 0.1637 MB
print_info: arch             = llama
print_info: vocab_only       = 0
print_info: n_ctx_train      = 32768
print_info: n_embd           = 4096
print_info: n_layer          = 32
print_info: n_head           = 32
print_info: n_head_kv        = 8
print_info: n_rot            = 128
print_info: n_swa            = 0
print_info: n_swa_pattern    = 1
print_info: n_embd_head_k    = 128
print_info: n_embd_head_v    = 128
print_info: n_gqa            = 4
print_info: n_embd_k_gqa     = 1024
print_info: n_embd_v_gqa     = 1024
print_info: f_norm_eps       = 0.0e+00
print_info: f_norm_rms_eps   = 1.0e-05
print_info: f_clamp_kqv      = 0.0e+00
print_info: f_max_alibi_bias = 0.0e+00
print_info: f_logit_scale    = 0.0e+00
print_info: f_attn_scale     = 0.0e+00
print_info: n_ff             = 14336
print_info: n_expert         = 0
print_info: n_expert_used    = 0
print_info: causal attn      = 1
print_info: pooling type     = 0
print_info: rope type        = 0
print_info: rope scaling     = linear
print_info: freq_base_train  = 10000.0
print_info: freq_scale_train = 1
print_info: n_ctx_orig_yarn  = 32768
print_info: rope_finetuned   = unknown
print_info: ssm_d_conv       = 0
print_info: ssm_d_inner      = 0
print_info: ssm_d_state      = 0
print_info: ssm_dt_rank      = 0
print_info: ssm_dt_b_c_rms   = 0
print_info: model type       = 7B
print_info: model params     = 7.24 B
print_info: general.name     = mistralai_mistral-7b-instruct-v0.1
print_info: vocab type       = SPM
print_info: n_vocab          = 32000
print_info: n_merges         = 0
print_info: BOS token        = 1 '<s>'
print_info: EOS token        = 2 '</s>'
print_info: UNK token        = 0 '<unk>'
print_info: LF token         = 13 '<0x0A>'
print_info: EOG token        = 2 '</s>'
print_info: max token length = 48
load_tensors: loading model tensors, this can take a while... (mmap = true)
load_tensors: layer   0 assigned to device CPU, is_swa = 0
load_tensors: layer   1 assigned to device CPU, is_swa = 0
load_tensors: layer   2 assigned to device CPU, is_swa = 0
load_tensors: layer   3 assigned to device CPU, is_swa = 0
load_tensors: layer   4 assigned to device CPU, is_swa = 0
load_tensors: layer   5 assigned to device CPU, is_swa = 0
load_tensors: layer   6 assigned to device CPU, is_swa = 0
load_tensors: layer   7 assigned to device CPU, is_swa = 0
load_tensors: layer   8 assigned to device CPU, is_swa = 0
load_tensors: layer   9 assigned to device CPU, is_swa = 0
load_tensors: layer  10 assigned to device CPU, is_swa = 0
load_tensors: layer  11 assigned to device CPU, is_swa = 0
load_tensors: layer  12 assigned to device CPU, is_swa = 0
load_tensors: layer  13 assigned to device CPU, is_swa = 0
load_tensors: layer  14 assigned to device CPU, is_swa = 0
load_tensors: layer  15 assigned to device CPU, is_swa = 0
load_tensors: layer  16 assigned to device CPU, is_swa = 0
load_tensors: layer  17 assigned to device CPU, is_swa = 0
load_tensors: layer  18 assigned to device CPU, is_swa = 0
load_tensors: layer  19 assigned to device CPU, is_swa = 0
load_tensors: layer  20 assigned to device CPU, is_swa = 0
load_tensors: layer  21 assigned to device CPU, is_swa = 0
load_tensors: layer  22 assigned to device CPU, is_swa = 0
load_tensors: layer  23 assigned to device CPU, is_swa = 0
load_tensors: layer  24 assigned to device CPU, is_swa = 0
load_tensors: layer  25 assigned to device CPU, is_swa = 0
load_tensors: layer  26 assigned to device CPU, is_swa = 0
load_tensors: layer  27 assigned to device CPU, is_swa = 0
load_tensors: layer  28 assigned to device CPU, is_swa = 0
load_tensors: layer  29 assigned to device CPU, is_swa = 0
load_tensors: layer  30 assigned to device CPU, is_swa = 0
load_tensors: layer  31 assigned to device CPU, is_swa = 0
load_tensors: layer  32 assigned to device CPU, is_swa = 0
load_tensors: tensor 'token_embd.weight' (q2_K) (and 290 others) cannot be used with preferred buffer type CPU_AARCH64, using CPU instead
load_tensors:   CPU_Mapped model buffer size =  2939.57 MiB
..................................................................................................
llama_context: constructing llama_context
llama_context: n_batch is less than GGML_KQ_MASK_PAD - increasing to 64
llama_context: n_seq_max     = 1
llama_context: n_ctx         = 2048
llama_context: n_ctx_per_seq = 2048
llama_context: n_batch       = 64
llama_context: n_ubatch      = 8
llama_context: causal_attn   = 1
llama_context: flash_attn    = 0
llama_context: freq_base     = 10000.0
llama_context: freq_scale    = 1
llama_context: n_ctx_per_seq (2048) < n_ctx_train (32768) -- the full capacity of the model will not be utilized
set_abort_callback: call
llama_context:        CPU  output buffer size =     0.12 MiB
create_memory: n_ctx = 2048 (padded)
llama_kv_cache_unified: kv_size = 2048, type_k = 'f16', type_v = 'f16', n_layer = 32, can_shift = 1, padding = 32
llama_kv_cache_unified: layer   0: dev = CPU
llama_kv_cache_unified: layer   1: dev = CPU
llama_kv_cache_unified: layer   2: dev = CPU
llama_kv_cache_unified: layer   3: dev = CPU
llama_kv_cache_unified: layer   4: dev = CPU
llama_kv_cache_unified: layer   5: dev = CPU
llama_kv_cache_unified: layer   6: dev = CPU
llama_kv_cache_unified: layer   7: dev = CPU
llama_kv_cache_unified: layer   8: dev = CPU
llama_kv_cache_unified: layer   9: dev = CPU
llama_kv_cache_unified: layer  10: dev = CPU
llama_kv_cache_unified: layer  11: dev = CPU
llama_kv_cache_unified: layer  12: dev = CPU
llama_kv_cache_unified: layer  13: dev = CPU
llama_kv_cache_unified: layer  14: dev = CPU
llama_kv_cache_unified: layer  15: dev = CPU
llama_kv_cache_unified: layer  16: dev = CPU
llama_kv_cache_unified: layer  17: dev = CPU
llama_kv_cache_unified: layer  18: dev = CPU
llama_kv_cache_unified: layer  19: dev = CPU
llama_kv_cache_unified: layer  20: dev = CPU
llama_kv_cache_unified: layer  21: dev = CPU
llama_kv_cache_unified: layer  22: dev = CPU
llama_kv_cache_unified: layer  23: dev = CPU
llama_kv_cache_unified: layer  24: dev = CPU
llama_kv_cache_unified: layer  25: dev = CPU
llama_kv_cache_unified: layer  26: dev = CPU
llama_kv_cache_unified: layer  27: dev = CPU
llama_kv_cache_unified: layer  28: dev = CPU
llama_kv_cache_unified: layer  29: dev = CPU
llama_kv_cache_unified: layer  30: dev = CPU
llama_kv_cache_unified: layer  31: dev = CPU
llama_kv_cache_unified:        CPU KV buffer size =   256.00 MiB
llama_kv_cache_unified: KV self size  =  256.00 MiB, K (f16):  128.00 MiB, V (f16):  128.00 MiB
llama_context: enumerating backends
llama_context: backend_ptrs.size() = 1
llama_context: max_nodes = 65536
llama_context: worst-case: n_tokens = 8, n_seqs = 1, n_outputs = 0
llama_context: reserving graph for n_tokens = 8, n_seqs = 1
llama_context: reserving graph for n_tokens = 1, n_seqs = 1
llama_context: reserving graph for n_tokens = 8, n_seqs = 1
llama_context:        CPU compute buffer size =     3.00 MiB
llama_context: graph nodes  = 1094
llama_context: graph splits = 1
CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
Model metadata: {'general.name': 'mistralai_mistral-7b-instruct-v0.1', 'general.architecture': 'llama', 'llama.context_length': '32768', 'llama.rope.dimension_count': '128', 'llama.embedding_length': '4096', 'llama.block_count': '32', 'llama.feed_forward_length': '14336', 'llama.attention.head_count': '32', 'tokenizer.ggml.eos_token_id': '2', 'general.file_type': '10', 'llama.attention.head_count_kv': '8', 'llama.attention.layer_norm_rms_epsilon': '0.000010', 'llama.rope.freq_base': '10000.000000', 'tokenizer.ggml.model': 'llama', 'general.quantization_version': '2', 'tokenizer.ggml.bos_token_id': '1', 'tokenizer.ggml.unknown_token_id': '0'}
Using fallback chat format: llama-2
Building index from SQLite database...
Loading embedding model: intfloat/e5-small-v2 on CPU
Index saved to faiss_index
llama_model_loader: loaded meta data with 20 key-value pairs and 291 tensors from models/Mistral/mistral-7b-instruct-v0.1.Q2_K.gguf (version GGUF V2)
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = llama
llama_model_loader: - kv   1:                               general.name str              = mistralai_mistral-7b-instruct-v0.1
llama_model_loader: - kv   2:                       llama.context_length u32              = 32768
llama_model_loader: - kv   3:                     llama.embedding_length u32              = 4096
llama_model_loader: - kv   4:                          llama.block_count u32              = 32
llama_model_loader: - kv   5:                  llama.feed_forward_length u32              = 14336
llama_model_loader: - kv   6:                 llama.rope.dimension_count u32              = 128
llama_model_loader: - kv   7:                 llama.attention.head_count u32              = 32
llama_model_loader: - kv   8:              llama.attention.head_count_kv u32              = 8
llama_model_loader: - kv   9:     llama.attention.layer_norm_rms_epsilon f32              = 0.000010
llama_model_loader: - kv  10:                       llama.rope.freq_base f32              = 10000.000000
llama_model_loader: - kv  11:                          general.file_type u32              = 10
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,32000]   = ["<unk>", "<s>", "</s>", "<0x00>", "<...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,32000]   = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,32000]   = [2, 3, 3, 6, 6, 6, 6, 6, 6, 6, 6, 6, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 1
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 2
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 0
llama_model_loader: - kv  19:               general.quantization_version u32              = 2
llama_model_loader: - type  f32:   65 tensors
llama_model_loader: - type q2_K:   65 tensors
llama_model_loader: - type q3_K:  160 tensors
llama_model_loader: - type q6_K:    1 tensors
print_info: file format = GGUF V2
print_info: file type   = Q2_K - Medium
print_info: file size   = 2.87 GiB (3.41 BPW) 
init_tokenizer: initializing tokenizer for type 1
load: control token:      2 '</s>' is not marked as EOG
load: control token:      1 '<s>' is not marked as EOG
load: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
load: special tokens cache size = 3
load: token to piece cache size = 0.1637 MB
print_info: arch             = llama
print_info: vocab_only       = 0
print_info: n_ctx_train      = 32768
print_info: n_embd           = 4096
print_info: n_layer          = 32
print_info: n_head           = 32
print_info: n_head_kv        = 8
print_info: n_rot            = 128
print_info: n_swa            = 0
print_info: n_swa_pattern    = 1
print_info: n_embd_head_k    = 128
print_info: n_embd_head_v    = 128
print_info: n_gqa            = 4
print_info: n_embd_k_gqa     = 1024
print_info: n_embd_v_gqa     = 1024
print_info: f_norm_eps       = 0.0e+00
print_info: f_norm_rms_eps   = 1.0e-05
print_info: f_clamp_kqv      = 0.0e+00
print_info: f_max_alibi_bias = 0.0e+00
print_info: f_logit_scale    = 0.0e+00
print_info: f_attn_scale     = 0.0e+00
print_info: n_ff             = 14336
print_info: n_expert         = 0
print_info: n_expert_used    = 0
print_info: causal attn      = 1
print_info: pooling type     = 0
print_info: rope type        = 0
print_info: rope scaling     = linear
print_info: freq_base_train  = 10000.0
print_info: freq_scale_train = 1
print_info: n_ctx_orig_yarn  = 32768
print_info: rope_finetuned   = unknown
print_info: ssm_d_conv       = 0
print_info: ssm_d_inner      = 0
print_info: ssm_d_state      = 0
print_info: ssm_dt_rank      = 0
print_info: ssm_dt_b_c_rms   = 0
print_info: model type       = 7B
print_info: model params     = 7.24 B
print_info: general.name     = mistralai_mistral-7b-instruct-v0.1
print_info: vocab type       = SPM
print_info: n_vocab          = 32000
print_info: n_merges         = 0
print_info: BOS token        = 1 '<s>'
print_info: EOS token        = 2 '</s>'
print_info: UNK token        = 0 '<unk>'
print_info: LF token         = 13 '<0x0A>'
print_info: EOG token        = 2 '</s>'
print_info: max token length = 48
load_tensors: loading model tensors, this can take a while... (mmap = true)
load_tensors: layer   0 assigned to device CPU, is_swa = 0
load_tensors: layer   1 assigned to device CPU, is_swa = 0
load_tensors: layer   2 assigned to device CPU, is_swa = 0
load_tensors: layer   3 assigned to device CPU, is_swa = 0
load_tensors: layer   4 assigned to device CPU, is_swa = 0
load_tensors: layer   5 assigned to device CPU, is_swa = 0
load_tensors: layer   6 assigned to device CPU, is_swa = 0
load_tensors: layer   7 assigned to device CPU, is_swa = 0
load_tensors: layer   8 assigned to device CPU, is_swa = 0
load_tensors: layer   9 assigned to device CPU, is_swa = 0
load_tensors: layer  10 assigned to device CPU, is_swa = 0
load_tensors: layer  11 assigned to device CPU, is_swa = 0
load_tensors: layer  12 assigned to device CPU, is_swa = 0
load_tensors: layer  13 assigned to device CPU, is_swa = 0
load_tensors: layer  14 assigned to device CPU, is_swa = 0
load_tensors: layer  15 assigned to device CPU, is_swa = 0
load_tensors: layer  16 assigned to device CPU, is_swa = 0
load_tensors: layer  17 assigned to device CPU, is_swa = 0
load_tensors: layer  18 assigned to device CPU, is_swa = 0
load_tensors: layer  19 assigned to device CPU, is_swa = 0
load_tensors: layer  20 assigned to device CPU, is_swa = 0
load_tensors: layer  21 assigned to device CPU, is_swa = 0
load_tensors: layer  22 assigned to device CPU, is_swa = 0
load_tensors: layer  23 assigned to device CPU, is_swa = 0
load_tensors: layer  24 assigned to device CPU, is_swa = 0
load_tensors: layer  25 assigned to device CPU, is_swa = 0
load_tensors: layer  26 assigned to device CPU, is_swa = 0
load_tensors: layer  27 assigned to device CPU, is_swa = 0
load_tensors: layer  28 assigned to device CPU, is_swa = 0
load_tensors: layer  29 assigned to device CPU, is_swa = 0
load_tensors: layer  30 assigned to device CPU, is_swa = 0
load_tensors: layer  31 assigned to device CPU, is_swa = 0
load_tensors: layer  32 assigned to device CPU, is_swa = 0
load_tensors: tensor 'token_embd.weight' (q2_K) (and 290 others) cannot be used with preferred buffer type CPU_AARCH64, using CPU instead
load_tensors:   CPU_Mapped model buffer size =  2939.57 MiB
..................................................................................................
llama_context: constructing llama_context
llama_context: n_batch is less than GGML_KQ_MASK_PAD - increasing to 64
llama_context: n_seq_max     = 1
llama_context: n_ctx         = 2048
llama_context: n_ctx_per_seq = 2048
llama_context: n_batch       = 64
llama_context: n_ubatch      = 8
llama_context: causal_attn   = 1
llama_context: flash_attn    = 0
llama_context: freq_base     = 10000.0
llama_context: freq_scale    = 1
llama_context: n_ctx_per_seq (2048) < n_ctx_train (32768) -- the full capacity of the model will not be utilized
set_abort_callback: call
llama_context:        CPU  output buffer size =     0.12 MiB
create_memory: n_ctx = 2048 (padded)
llama_kv_cache_unified: kv_size = 2048, type_k = 'f16', type_v = 'f16', n_layer = 32, can_shift = 1, padding = 32
llama_kv_cache_unified: layer   0: dev = CPU
llama_kv_cache_unified: layer   1: dev = CPU
llama_kv_cache_unified: layer   2: dev = CPU
llama_kv_cache_unified: layer   3: dev = CPU
llama_kv_cache_unified: layer   4: dev = CPU
llama_kv_cache_unified: layer   5: dev = CPU
llama_kv_cache_unified: layer   6: dev = CPU
llama_kv_cache_unified: layer   7: dev = CPU
llama_kv_cache_unified: layer   8: dev = CPU
llama_kv_cache_unified: layer   9: dev = CPU
llama_kv_cache_unified: layer  10: dev = CPU
llama_kv_cache_unified: layer  11: dev = CPU
llama_kv_cache_unified: layer  12: dev = CPU
llama_kv_cache_unified: layer  13: dev = CPU
llama_kv_cache_unified: layer  14: dev = CPU
llama_kv_cache_unified: layer  15: dev = CPU
llama_kv_cache_unified: layer  16: dev = CPU
llama_kv_cache_unified: layer  17: dev = CPU
llama_kv_cache_unified: layer  18: dev = CPU
llama_kv_cache_unified: layer  19: dev = CPU
llama_kv_cache_unified: layer  20: dev = CPU
llama_kv_cache_unified: layer  21: dev = CPU
llama_kv_cache_unified: layer  22: dev = CPU
llama_kv_cache_unified: layer  23: dev = CPU
llama_kv_cache_unified: layer  24: dev = CPU
llama_kv_cache_unified: layer  25: dev = CPU
llama_kv_cache_unified: layer  26: dev = CPU
llama_kv_cache_unified: layer  27: dev = CPU
llama_kv_cache_unified: layer  28: dev = CPU
llama_kv_cache_unified: layer  29: dev = CPU
llama_kv_cache_unified: layer  30: dev = CPU
llama_kv_cache_unified: layer  31: dev = CPU
llama_kv_cache_unified:        CPU KV buffer size =   256.00 MiB
llama_kv_cache_unified: KV self size  =  256.00 MiB, K (f16):  128.00 MiB, V (f16):  128.00 MiB
llama_context: enumerating backends
llama_context: backend_ptrs.size() = 1
llama_context: max_nodes = 65536
llama_context: worst-case: n_tokens = 8, n_seqs = 1, n_outputs = 0
llama_context: reserving graph for n_tokens = 8, n_seqs = 1
llama_context: reserving graph for n_tokens = 1, n_seqs = 1
llama_context: reserving graph for n_tokens = 8, n_seqs = 1
llama_context:        CPU compute buffer size =     3.00 MiB
llama_context: graph nodes  = 1094
llama_context: graph splits = 1
CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
Model metadata: {'general.name': 'mistralai_mistral-7b-instruct-v0.1', 'general.architecture': 'llama', 'llama.context_length': '32768', 'llama.rope.dimension_count': '128', 'llama.embedding_length': '4096', 'llama.block_count': '32', 'llama.feed_forward_length': '14336', 'llama.attention.head_count': '32', 'tokenizer.ggml.eos_token_id': '2', 'general.file_type': '10', 'llama.attention.head_count_kv': '8', 'llama.attention.layer_norm_rms_epsilon': '0.000010', 'llama.rope.freq_base': '10000.000000', 'tokenizer.ggml.model': 'llama', 'general.quantization_version': '2', 'tokenizer.ggml.bos_token_id': '1', 'tokenizer.ggml.unknown_token_id': '0'}
Using fallback chat format: llama-2
Building index from SQLite database...
Loading embedding model: intfloat/e5-small-v2 on CPU
Index saved to faiss_index
llama_perf_context_print:        load time =   58447.17 ms
llama_perf_context_print: prompt eval time =   58445.11 ms /   187 tokens (  312.54 ms per token,     3.20 tokens per second)
llama_perf_context_print:        eval time =   19467.77 ms /    30 runs   (  648.93 ms per token,     1.54 tokens per second)
llama_perf_context_print:       total time =   77977.08 ms /   217 tokens
Llama.generate: 75 prefix-match hit, remaining 258 prompt tokens to eval
llama_perf_context_print:        load time =   58447.17 ms
llama_perf_context_print: prompt eval time =   86914.42 ms /   258 tokens (  336.88 ms per token,     2.97 tokens per second)
llama_perf_context_print:        eval time =    9793.96 ms /    16 runs   (  612.12 ms per token,     1.63 tokens per second)
llama_perf_context_print:       total time =   96754.29 ms /   274 tokens
Llama.generate: 124 prefix-match hit, remaining 72 prompt tokens to eval
llama_perf_context_print:        load time =   58447.17 ms
llama_perf_context_print: prompt eval time =   12281.30 ms /    72 tokens (  170.57 ms per token,     5.86 tokens per second)
llama_perf_context_print:        eval time =   12942.19 ms /    15 runs   (  862.81 ms per token,     1.16 tokens per second)
llama_perf_context_print:       total time =   25276.37 ms /    87 tokens
Llama.generate: 124 prefix-match hit, remaining 212 prompt tokens to eval
llama_perf_context_print:        load time =   58447.17 ms
llama_perf_context_print: prompt eval time =   54131.13 ms /   212 tokens (  255.34 ms per token,     3.92 tokens per second)
llama_perf_context_print:        eval time =    9659.83 ms /    26 runs   (  371.53 ms per token,     2.69 tokens per second)
llama_perf_context_print:       total time =   63863.84 ms /   238 tokens
LLM is explicitly disabled. Using MockLLM.
llama_model_loader: loaded meta data with 20 key-value pairs and 291 tensors from models/Mistral/mistral-7b-instruct-v0.1.Q2_K.gguf (version GGUF V2)
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = llama
llama_model_loader: - kv   1:                               general.name str              = mistralai_mistral-7b-instruct-v0.1
llama_model_loader: - kv   2:                       llama.context_length u32              = 32768
llama_model_loader: - kv   3:                     llama.embedding_length u32              = 4096
llama_model_loader: - kv   4:                          llama.block_count u32              = 32
llama_model_loader: - kv   5:                  llama.feed_forward_length u32              = 14336
llama_model_loader: - kv   6:                 llama.rope.dimension_count u32              = 128
llama_model_loader: - kv   7:                 llama.attention.head_count u32              = 32
llama_model_loader: - kv   8:              llama.attention.head_count_kv u32              = 8
llama_model_loader: - kv   9:     llama.attention.layer_norm_rms_epsilon f32              = 0.000010
llama_model_loader: - kv  10:                       llama.rope.freq_base f32              = 10000.000000
llama_model_loader: - kv  11:                          general.file_type u32              = 10
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,32000]   = ["<unk>", "<s>", "</s>", "<0x00>", "<...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,32000]   = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,32000]   = [2, 3, 3, 6, 6, 6, 6, 6, 6, 6, 6, 6, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 1
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 2
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 0
llama_model_loader: - kv  19:               general.quantization_version u32              = 2
llama_model_loader: - type  f32:   65 tensors
llama_model_loader: - type q2_K:   65 tensors
llama_model_loader: - type q3_K:  160 tensors
llama_model_loader: - type q6_K:    1 tensors
print_info: file format = GGUF V2
print_info: file type   = Q2_K - Medium
print_info: file size   = 2.87 GiB (3.41 BPW) 
init_tokenizer: initializing tokenizer for type 1
load: control token:      2 '</s>' is not marked as EOG
load: control token:      1 '<s>' is not marked as EOG
load: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
load: special tokens cache size = 3
load: token to piece cache size = 0.1637 MB
print_info: arch             = llama
print_info: vocab_only       = 0
print_info: n_ctx_train      = 32768
print_info: n_embd           = 4096
print_info: n_layer          = 32
print_info: n_head           = 32
print_info: n_head_kv        = 8
print_info: n_rot            = 128
print_info: n_swa            = 0
print_info: n_swa_pattern    = 1
print_info: n_embd_head_k    = 128
print_info: n_embd_head_v    = 128
print_info: n_gqa            = 4
print_info: n_embd_k_gqa     = 1024
print_info: n_embd_v_gqa     = 1024
print_info: f_norm_eps       = 0.0e+00
print_info: f_norm_rms_eps   = 1.0e-05
print_info: f_clamp_kqv      = 0.0e+00
print_info: f_max_alibi_bias = 0.0e+00
print_info: f_logit_scale    = 0.0e+00
print_info: f_attn_scale     = 0.0e+00
print_info: n_ff             = 14336
print_info: n_expert         = 0
print_info: n_expert_used    = 0
print_info: causal attn      = 1
print_info: pooling type     = 0
print_info: rope type        = 0
print_info: rope scaling     = linear
print_info: freq_base_train  = 10000.0
print_info: freq_scale_train = 1
print_info: n_ctx_orig_yarn  = 32768
print_info: rope_finetuned   = unknown
print_info: ssm_d_conv       = 0
print_info: ssm_d_inner      = 0
print_info: ssm_d_state      = 0
print_info: ssm_dt_rank      = 0
print_info: ssm_dt_b_c_rms   = 0
print_info: model type       = 7B
print_info: model params     = 7.24 B
print_info: general.name     = mistralai_mistral-7b-instruct-v0.1
print_info: vocab type       = SPM
print_info: n_vocab          = 32000
print_info: n_merges         = 0
print_info: BOS token        = 1 '<s>'
print_info: EOS token        = 2 '</s>'
print_info: UNK token        = 0 '<unk>'
print_info: LF token         = 13 '<0x0A>'
print_info: EOG token        = 2 '</s>'
print_info: max token length = 48
load_tensors: loading model tensors, this can take a while... (mmap = true)
load_tensors: layer   0 assigned to device CPU, is_swa = 0
load_tensors: layer   1 assigned to device CPU, is_swa = 0
load_tensors: layer   2 assigned to device CPU, is_swa = 0
load_tensors: layer   3 assigned to device CPU, is_swa = 0
load_tensors: layer   4 assigned to device CPU, is_swa = 0
load_tensors: layer   5 assigned to device CPU, is_swa = 0
load_tensors: layer   6 assigned to device CPU, is_swa = 0
load_tensors: layer   7 assigned to device CPU, is_swa = 0
load_tensors: layer   8 assigned to device CPU, is_swa = 0
load_tensors: layer   9 assigned to device CPU, is_swa = 0
load_tensors: layer  10 assigned to device CPU, is_swa = 0
load_tensors: layer  11 assigned to device CPU, is_swa = 0
load_tensors: layer  12 assigned to device CPU, is_swa = 0
load_tensors: layer  13 assigned to device CPU, is_swa = 0
load_tensors: layer  14 assigned to device CPU, is_swa = 0
load_tensors: layer  15 assigned to device CPU, is_swa = 0
load_tensors: layer  16 assigned to device CPU, is_swa = 0
load_tensors: layer  17 assigned to device CPU, is_swa = 0
load_tensors: layer  18 assigned to device CPU, is_swa = 0
load_tensors: layer  19 assigned to device CPU, is_swa = 0
load_tensors: layer  20 assigned to device CPU, is_swa = 0
load_tensors: layer  21 assigned to device CPU, is_swa = 0
load_tensors: layer  22 assigned to device CPU, is_swa = 0
load_tensors: layer  23 assigned to device CPU, is_swa = 0
load_tensors: layer  24 assigned to device CPU, is_swa = 0
load_tensors: layer  25 assigned to device CPU, is_swa = 0
load_tensors: layer  26 assigned to device CPU, is_swa = 0
load_tensors: layer  27 assigned to device CPU, is_swa = 0
load_tensors: layer  28 assigned to device CPU, is_swa = 0
load_tensors: layer  29 assigned to device CPU, is_swa = 0
load_tensors: layer  30 assigned to device CPU, is_swa = 0
load_tensors: layer  31 assigned to device CPU, is_swa = 0
load_tensors: layer  32 assigned to device CPU, is_swa = 0
load_tensors: tensor 'token_embd.weight' (q2_K) (and 290 others) cannot be used with preferred buffer type CPU_AARCH64, using CPU instead
load_tensors:   CPU_Mapped model buffer size =  2939.57 MiB
..................................................................................................
llama_context: constructing llama_context
llama_context: n_batch is less than GGML_KQ_MASK_PAD - increasing to 64
llama_context: n_seq_max     = 1
llama_context: n_ctx         = 2048
llama_context: n_ctx_per_seq = 2048
llama_context: n_batch       = 64
llama_context: n_ubatch      = 8
llama_context: causal_attn   = 1
llama_context: flash_attn    = 0
llama_context: freq_base     = 10000.0
llama_context: freq_scale    = 1
llama_context: n_ctx_per_seq (2048) < n_ctx_train (32768) -- the full capacity of the model will not be utilized
set_abort_callback: call
llama_context:        CPU  output buffer size =     0.12 MiB
create_memory: n_ctx = 2048 (padded)
llama_kv_cache_unified: kv_size = 2048, type_k = 'f16', type_v = 'f16', n_layer = 32, can_shift = 1, padding = 32
llama_kv_cache_unified: layer   0: dev = CPU
llama_kv_cache_unified: layer   1: dev = CPU
llama_kv_cache_unified: layer   2: dev = CPU
llama_kv_cache_unified: layer   3: dev = CPU
llama_kv_cache_unified: layer   4: dev = CPU
llama_kv_cache_unified: layer   5: dev = CPU
llama_kv_cache_unified: layer   6: dev = CPU
llama_kv_cache_unified: layer   7: dev = CPU
llama_kv_cache_unified: layer   8: dev = CPU
llama_kv_cache_unified: layer   9: dev = CPU
llama_kv_cache_unified: layer  10: dev = CPU
llama_kv_cache_unified: layer  11: dev = CPU
llama_kv_cache_unified: layer  12: dev = CPU
llama_kv_cache_unified: layer  13: dev = CPU
llama_kv_cache_unified: layer  14: dev = CPU
llama_kv_cache_unified: layer  15: dev = CPU
llama_kv_cache_unified: layer  16: dev = CPU
llama_kv_cache_unified: layer  17: dev = CPU
llama_kv_cache_unified: layer  18: dev = CPU
llama_kv_cache_unified: layer  19: dev = CPU
llama_kv_cache_unified: layer  20: dev = CPU
llama_kv_cache_unified: layer  21: dev = CPU
llama_kv_cache_unified: layer  22: dev = CPU
llama_kv_cache_unified: layer  23: dev = CPU
llama_kv_cache_unified: layer  24: dev = CPU
llama_kv_cache_unified: layer  25: dev = CPU
llama_kv_cache_unified: layer  26: dev = CPU
llama_kv_cache_unified: layer  27: dev = CPU
llama_kv_cache_unified: layer  28: dev = CPU
llama_kv_cache_unified: layer  29: dev = CPU
llama_kv_cache_unified: layer  30: dev = CPU
llama_kv_cache_unified: layer  31: dev = CPU
llama_kv_cache_unified:        CPU KV buffer size =   256.00 MiB
llama_kv_cache_unified: KV self size  =  256.00 MiB, K (f16):  128.00 MiB, V (f16):  128.00 MiB
llama_context: enumerating backends
llama_context: backend_ptrs.size() = 1
llama_context: max_nodes = 65536
llama_context: worst-case: n_tokens = 8, n_seqs = 1, n_outputs = 0
llama_context: reserving graph for n_tokens = 8, n_seqs = 1
llama_context: reserving graph for n_tokens = 1, n_seqs = 1
llama_context: reserving graph for n_tokens = 8, n_seqs = 1
llama_context:        CPU compute buffer size =     3.00 MiB
llama_context: graph nodes  = 1094
llama_context: graph splits = 1
CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
Model metadata: {'general.name': 'mistralai_mistral-7b-instruct-v0.1', 'general.architecture': 'llama', 'llama.context_length': '32768', 'llama.rope.dimension_count': '128', 'llama.embedding_length': '4096', 'llama.block_count': '32', 'llama.feed_forward_length': '14336', 'llama.attention.head_count': '32', 'tokenizer.ggml.eos_token_id': '2', 'general.file_type': '10', 'llama.attention.head_count_kv': '8', 'llama.attention.layer_norm_rms_epsilon': '0.000010', 'llama.rope.freq_base': '10000.000000', 'tokenizer.ggml.model': 'llama', 'general.quantization_version': '2', 'tokenizer.ggml.bos_token_id': '1', 'tokenizer.ggml.unknown_token_id': '0'}
Using fallback chat format: llama-2
Building index from SQLite database...
Loading embedding model: intfloat/e5-small-v2 on CPU
Index saved to faiss_index
llama_perf_context_print:        load time =   87367.74 ms
llama_perf_context_print: prompt eval time =   87367.28 ms /   333 tokens (  262.36 ms per token,     3.81 tokens per second)
llama_perf_context_print:        eval time =    4748.71 ms /    12 runs   (  395.73 ms per token,     2.53 tokens per second)
llama_perf_context_print:       total time =   92176.11 ms /   345 tokens
LLM is explicitly disabled. Using MockLLM.
llama_model_loader: loaded meta data with 20 key-value pairs and 291 tensors from models/Mistral/mistral-7b-instruct-v0.1.Q2_K.gguf (version GGUF V2)
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = llama
llama_model_loader: - kv   1:                               general.name str              = mistralai_mistral-7b-instruct-v0.1
llama_model_loader: - kv   2:                       llama.context_length u32              = 32768
llama_model_loader: - kv   3:                     llama.embedding_length u32              = 4096
llama_model_loader: - kv   4:                          llama.block_count u32              = 32
llama_model_loader: - kv   5:                  llama.feed_forward_length u32              = 14336
llama_model_loader: - kv   6:                 llama.rope.dimension_count u32              = 128
llama_model_loader: - kv   7:                 llama.attention.head_count u32              = 32
llama_model_loader: - kv   8:              llama.attention.head_count_kv u32              = 8
llama_model_loader: - kv   9:     llama.attention.layer_norm_rms_epsilon f32              = 0.000010
llama_model_loader: - kv  10:                       llama.rope.freq_base f32              = 10000.000000
llama_model_loader: - kv  11:                          general.file_type u32              = 10
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,32000]   = ["<unk>", "<s>", "</s>", "<0x00>", "<...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,32000]   = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,32000]   = [2, 3, 3, 6, 6, 6, 6, 6, 6, 6, 6, 6, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 1
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 2
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 0
llama_model_loader: - kv  19:               general.quantization_version u32              = 2
llama_model_loader: - type  f32:   65 tensors
llama_model_loader: - type q2_K:   65 tensors
llama_model_loader: - type q3_K:  160 tensors
llama_model_loader: - type q6_K:    1 tensors
print_info: file format = GGUF V2
print_info: file type   = Q2_K - Medium
print_info: file size   = 2.87 GiB (3.41 BPW) 
init_tokenizer: initializing tokenizer for type 1
load: control token:      2 '</s>' is not marked as EOG
load: control token:      1 '<s>' is not marked as EOG
load: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
load: special tokens cache size = 3
load: token to piece cache size = 0.1637 MB
print_info: arch             = llama
print_info: vocab_only       = 0
print_info: n_ctx_train      = 32768
print_info: n_embd           = 4096
print_info: n_layer          = 32
print_info: n_head           = 32
print_info: n_head_kv        = 8
print_info: n_rot            = 128
print_info: n_swa            = 0
print_info: n_swa_pattern    = 1
print_info: n_embd_head_k    = 128
print_info: n_embd_head_v    = 128
print_info: n_gqa            = 4
print_info: n_embd_k_gqa     = 1024
print_info: n_embd_v_gqa     = 1024
print_info: f_norm_eps       = 0.0e+00
print_info: f_norm_rms_eps   = 1.0e-05
print_info: f_clamp_kqv      = 0.0e+00
print_info: f_max_alibi_bias = 0.0e+00
print_info: f_logit_scale    = 0.0e+00
print_info: f_attn_scale     = 0.0e+00
print_info: n_ff             = 14336
print_info: n_expert         = 0
print_info: n_expert_used    = 0
print_info: causal attn      = 1
print_info: pooling type     = 0
print_info: rope type        = 0
print_info: rope scaling     = linear
print_info: freq_base_train  = 10000.0
print_info: freq_scale_train = 1
print_info: n_ctx_orig_yarn  = 32768
print_info: rope_finetuned   = unknown
print_info: ssm_d_conv       = 0
print_info: ssm_d_inner      = 0
print_info: ssm_d_state      = 0
print_info: ssm_dt_rank      = 0
print_info: ssm_dt_b_c_rms   = 0
print_info: model type       = 7B
print_info: model params     = 7.24 B
print_info: general.name     = mistralai_mistral-7b-instruct-v0.1
print_info: vocab type       = SPM
print_info: n_vocab          = 32000
print_info: n_merges         = 0
print_info: BOS token        = 1 '<s>'
print_info: EOS token        = 2 '</s>'
print_info: UNK token        = 0 '<unk>'
print_info: LF token         = 13 '<0x0A>'
print_info: EOG token        = 2 '</s>'
print_info: max token length = 48
load_tensors: loading model tensors, this can take a while... (mmap = true)
load_tensors: layer   0 assigned to device CPU, is_swa = 0
load_tensors: layer   1 assigned to device CPU, is_swa = 0
load_tensors: layer   2 assigned to device CPU, is_swa = 0
load_tensors: layer   3 assigned to device CPU, is_swa = 0
load_tensors: layer   4 assigned to device CPU, is_swa = 0
load_tensors: layer   5 assigned to device CPU, is_swa = 0
load_tensors: layer   6 assigned to device CPU, is_swa = 0
load_tensors: layer   7 assigned to device CPU, is_swa = 0
load_tensors: layer   8 assigned to device CPU, is_swa = 0
load_tensors: layer   9 assigned to device CPU, is_swa = 0
load_tensors: layer  10 assigned to device CPU, is_swa = 0
load_tensors: layer  11 assigned to device CPU, is_swa = 0
load_tensors: layer  12 assigned to device CPU, is_swa = 0
load_tensors: layer  13 assigned to device CPU, is_swa = 0
load_tensors: layer  14 assigned to device CPU, is_swa = 0
load_tensors: layer  15 assigned to device CPU, is_swa = 0
load_tensors: layer  16 assigned to device CPU, is_swa = 0
load_tensors: layer  17 assigned to device CPU, is_swa = 0
load_tensors: layer  18 assigned to device CPU, is_swa = 0
load_tensors: layer  19 assigned to device CPU, is_swa = 0
load_tensors: layer  20 assigned to device CPU, is_swa = 0
load_tensors: layer  21 assigned to device CPU, is_swa = 0
load_tensors: layer  22 assigned to device CPU, is_swa = 0
load_tensors: layer  23 assigned to device CPU, is_swa = 0
load_tensors: layer  24 assigned to device CPU, is_swa = 0
load_tensors: layer  25 assigned to device CPU, is_swa = 0
load_tensors: layer  26 assigned to device CPU, is_swa = 0
load_tensors: layer  27 assigned to device CPU, is_swa = 0
load_tensors: layer  28 assigned to device CPU, is_swa = 0
load_tensors: layer  29 assigned to device CPU, is_swa = 0
load_tensors: layer  30 assigned to device CPU, is_swa = 0
load_tensors: layer  31 assigned to device CPU, is_swa = 0
load_tensors: layer  32 assigned to device CPU, is_swa = 0
load_tensors: tensor 'token_embd.weight' (q2_K) (and 290 others) cannot be used with preferred buffer type CPU_AARCH64, using CPU instead
load_tensors:   CPU_Mapped model buffer size =  2939.57 MiB
..................................................................................................
llama_context: constructing llama_context
llama_context: n_batch is less than GGML_KQ_MASK_PAD - increasing to 64
llama_context: n_seq_max     = 1
llama_context: n_ctx         = 2048
llama_context: n_ctx_per_seq = 2048
llama_context: n_batch       = 64
llama_context: n_ubatch      = 8
llama_context: causal_attn   = 1
llama_context: flash_attn    = 0
llama_context: freq_base     = 10000.0
llama_context: freq_scale    = 1
llama_context: n_ctx_per_seq (2048) < n_ctx_train (32768) -- the full capacity of the model will not be utilized
set_abort_callback: call
llama_context:        CPU  output buffer size =     0.12 MiB
create_memory: n_ctx = 2048 (padded)
llama_kv_cache_unified: kv_size = 2048, type_k = 'f16', type_v = 'f16', n_layer = 32, can_shift = 1, padding = 32
llama_kv_cache_unified: layer   0: dev = CPU
llama_kv_cache_unified: layer   1: dev = CPU
llama_kv_cache_unified: layer   2: dev = CPU
llama_kv_cache_unified: layer   3: dev = CPU
llama_kv_cache_unified: layer   4: dev = CPU
llama_kv_cache_unified: layer   5: dev = CPU
llama_kv_cache_unified: layer   6: dev = CPU
llama_kv_cache_unified: layer   7: dev = CPU
llama_kv_cache_unified: layer   8: dev = CPU
llama_kv_cache_unified: layer   9: dev = CPU
llama_kv_cache_unified: layer  10: dev = CPU
llama_kv_cache_unified: layer  11: dev = CPU
llama_kv_cache_unified: layer  12: dev = CPU
llama_kv_cache_unified: layer  13: dev = CPU
llama_kv_cache_unified: layer  14: dev = CPU
llama_kv_cache_unified: layer  15: dev = CPU
llama_kv_cache_unified: layer  16: dev = CPU
llama_kv_cache_unified: layer  17: dev = CPU
llama_kv_cache_unified: layer  18: dev = CPU
llama_kv_cache_unified: layer  19: dev = CPU
llama_kv_cache_unified: layer  20: dev = CPU
llama_kv_cache_unified: layer  21: dev = CPU
llama_kv_cache_unified: layer  22: dev = CPU
llama_kv_cache_unified: layer  23: dev = CPU
llama_kv_cache_unified: layer  24: dev = CPU
llama_kv_cache_unified: layer  25: dev = CPU
llama_kv_cache_unified: layer  26: dev = CPU
llama_kv_cache_unified: layer  27: dev = CPU
llama_kv_cache_unified: layer  28: dev = CPU
llama_kv_cache_unified: layer  29: dev = CPU
llama_kv_cache_unified: layer  30: dev = CPU
llama_kv_cache_unified: layer  31: dev = CPU
llama_kv_cache_unified:        CPU KV buffer size =   256.00 MiB
llama_kv_cache_unified: KV self size  =  256.00 MiB, K (f16):  128.00 MiB, V (f16):  128.00 MiB
llama_context: enumerating backends
llama_context: backend_ptrs.size() = 1
llama_context: max_nodes = 65536
llama_context: worst-case: n_tokens = 8, n_seqs = 1, n_outputs = 0
llama_context: reserving graph for n_tokens = 8, n_seqs = 1
llama_context: reserving graph for n_tokens = 1, n_seqs = 1
llama_context: reserving graph for n_tokens = 8, n_seqs = 1
llama_context:        CPU compute buffer size =     3.00 MiB
llama_context: graph nodes  = 1094
llama_context: graph splits = 1
CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
Model metadata: {'general.name': 'mistralai_mistral-7b-instruct-v0.1', 'general.architecture': 'llama', 'llama.context_length': '32768', 'llama.rope.dimension_count': '128', 'llama.embedding_length': '4096', 'llama.block_count': '32', 'llama.feed_forward_length': '14336', 'llama.attention.head_count': '32', 'tokenizer.ggml.eos_token_id': '2', 'general.file_type': '10', 'llama.attention.head_count_kv': '8', 'llama.attention.layer_norm_rms_epsilon': '0.000010', 'llama.rope.freq_base': '10000.000000', 'tokenizer.ggml.model': 'llama', 'general.quantization_version': '2', 'tokenizer.ggml.bos_token_id': '1', 'tokenizer.ggml.unknown_token_id': '0'}
Using fallback chat format: llama-2
Building index from SQLite database...
Loading embedding model: intfloat/e5-small-v2 on CPU
Index saved to faiss_index
llama_model_loader: loaded meta data with 20 key-value pairs and 291 tensors from models/Mistral/mistral-7b-instruct-v0.1.Q2_K.gguf (version GGUF V2)
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = llama
llama_model_loader: - kv   1:                               general.name str              = mistralai_mistral-7b-instruct-v0.1
llama_model_loader: - kv   2:                       llama.context_length u32              = 32768
llama_model_loader: - kv   3:                     llama.embedding_length u32              = 4096
llama_model_loader: - kv   4:                          llama.block_count u32              = 32
llama_model_loader: - kv   5:                  llama.feed_forward_length u32              = 14336
llama_model_loader: - kv   6:                 llama.rope.dimension_count u32              = 128
llama_model_loader: - kv   7:                 llama.attention.head_count u32              = 32
llama_model_loader: - kv   8:              llama.attention.head_count_kv u32              = 8
llama_model_loader: - kv   9:     llama.attention.layer_norm_rms_epsilon f32              = 0.000010
llama_model_loader: - kv  10:                       llama.rope.freq_base f32              = 10000.000000
llama_model_loader: - kv  11:                          general.file_type u32              = 10
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,32000]   = ["<unk>", "<s>", "</s>", "<0x00>", "<...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,32000]   = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,32000]   = [2, 3, 3, 6, 6, 6, 6, 6, 6, 6, 6, 6, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 1
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 2
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 0
llama_model_loader: - kv  19:               general.quantization_version u32              = 2
llama_model_loader: - type  f32:   65 tensors
llama_model_loader: - type q2_K:   65 tensors
llama_model_loader: - type q3_K:  160 tensors
llama_model_loader: - type q6_K:    1 tensors
print_info: file format = GGUF V2
print_info: file type   = Q2_K - Medium
print_info: file size   = 2.87 GiB (3.41 BPW) 
init_tokenizer: initializing tokenizer for type 1
load: control token:      2 '</s>' is not marked as EOG
load: control token:      1 '<s>' is not marked as EOG
load: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
load: special tokens cache size = 3
load: token to piece cache size = 0.1637 MB
print_info: arch             = llama
print_info: vocab_only       = 0
print_info: n_ctx_train      = 32768
print_info: n_embd           = 4096
print_info: n_layer          = 32
print_info: n_head           = 32
print_info: n_head_kv        = 8
print_info: n_rot            = 128
print_info: n_swa            = 0
print_info: n_swa_pattern    = 1
print_info: n_embd_head_k    = 128
print_info: n_embd_head_v    = 128
print_info: n_gqa            = 4
print_info: n_embd_k_gqa     = 1024
print_info: n_embd_v_gqa     = 1024
print_info: f_norm_eps       = 0.0e+00
print_info: f_norm_rms_eps   = 1.0e-05
print_info: f_clamp_kqv      = 0.0e+00
print_info: f_max_alibi_bias = 0.0e+00
print_info: f_logit_scale    = 0.0e+00
print_info: f_attn_scale     = 0.0e+00
print_info: n_ff             = 14336
print_info: n_expert         = 0
print_info: n_expert_used    = 0
print_info: causal attn      = 1
print_info: pooling type     = 0
print_info: rope type        = 0
print_info: rope scaling     = linear
print_info: freq_base_train  = 10000.0
print_info: freq_scale_train = 1
print_info: n_ctx_orig_yarn  = 32768
print_info: rope_finetuned   = unknown
print_info: ssm_d_conv       = 0
print_info: ssm_d_inner      = 0
print_info: ssm_d_state      = 0
print_info: ssm_dt_rank      = 0
print_info: ssm_dt_b_c_rms   = 0
print_info: model type       = 7B
print_info: model params     = 7.24 B
print_info: general.name     = mistralai_mistral-7b-instruct-v0.1
print_info: vocab type       = SPM
print_info: n_vocab          = 32000
print_info: n_merges         = 0
print_info: BOS token        = 1 '<s>'
print_info: EOS token        = 2 '</s>'
print_info: UNK token        = 0 '<unk>'
print_info: LF token         = 13 '<0x0A>'
print_info: EOG token        = 2 '</s>'
print_info: max token length = 48
load_tensors: loading model tensors, this can take a while... (mmap = true)
load_tensors: layer   0 assigned to device CPU, is_swa = 0
load_tensors: layer   1 assigned to device CPU, is_swa = 0
load_tensors: layer   2 assigned to device CPU, is_swa = 0
load_tensors: layer   3 assigned to device CPU, is_swa = 0
load_tensors: layer   4 assigned to device CPU, is_swa = 0
load_tensors: layer   5 assigned to device CPU, is_swa = 0
load_tensors: layer   6 assigned to device CPU, is_swa = 0
load_tensors: layer   7 assigned to device CPU, is_swa = 0
load_tensors: layer   8 assigned to device CPU, is_swa = 0
load_tensors: layer   9 assigned to device CPU, is_swa = 0
load_tensors: layer  10 assigned to device CPU, is_swa = 0
load_tensors: layer  11 assigned to device CPU, is_swa = 0
load_tensors: layer  12 assigned to device CPU, is_swa = 0
load_tensors: layer  13 assigned to device CPU, is_swa = 0
load_tensors: layer  14 assigned to device CPU, is_swa = 0
load_tensors: layer  15 assigned to device CPU, is_swa = 0
load_tensors: layer  16 assigned to device CPU, is_swa = 0
load_tensors: layer  17 assigned to device CPU, is_swa = 0
load_tensors: layer  18 assigned to device CPU, is_swa = 0
load_tensors: layer  19 assigned to device CPU, is_swa = 0
load_tensors: layer  20 assigned to device CPU, is_swa = 0
load_tensors: layer  21 assigned to device CPU, is_swa = 0
load_tensors: layer  22 assigned to device CPU, is_swa = 0
load_tensors: layer  23 assigned to device CPU, is_swa = 0
load_tensors: layer  24 assigned to device CPU, is_swa = 0
load_tensors: layer  25 assigned to device CPU, is_swa = 0
load_tensors: layer  26 assigned to device CPU, is_swa = 0
load_tensors: layer  27 assigned to device CPU, is_swa = 0
load_tensors: layer  28 assigned to device CPU, is_swa = 0
load_tensors: layer  29 assigned to device CPU, is_swa = 0
load_tensors: layer  30 assigned to device CPU, is_swa = 0
load_tensors: layer  31 assigned to device CPU, is_swa = 0
load_tensors: layer  32 assigned to device CPU, is_swa = 0
load_tensors: tensor 'token_embd.weight' (q2_K) (and 290 others) cannot be used with preferred buffer type CPU_AARCH64, using CPU instead
load_tensors:   CPU_Mapped model buffer size =  2939.57 MiB
..................................................................................................
llama_context: constructing llama_context
llama_context: n_batch is less than GGML_KQ_MASK_PAD - increasing to 64
llama_context: n_seq_max     = 1
llama_context: n_ctx         = 2048
llama_context: n_ctx_per_seq = 2048
llama_context: n_batch       = 64
llama_context: n_ubatch      = 8
llama_context: causal_attn   = 1
llama_context: flash_attn    = 0
llama_context: freq_base     = 10000.0
llama_context: freq_scale    = 1
llama_context: n_ctx_per_seq (2048) < n_ctx_train (32768) -- the full capacity of the model will not be utilized
set_abort_callback: call
llama_context:        CPU  output buffer size =     0.12 MiB
create_memory: n_ctx = 2048 (padded)
llama_kv_cache_unified: kv_size = 2048, type_k = 'f16', type_v = 'f16', n_layer = 32, can_shift = 1, padding = 32
llama_kv_cache_unified: layer   0: dev = CPU
llama_kv_cache_unified: layer   1: dev = CPU
llama_kv_cache_unified: layer   2: dev = CPU
llama_kv_cache_unified: layer   3: dev = CPU
llama_kv_cache_unified: layer   4: dev = CPU
llama_kv_cache_unified: layer   5: dev = CPU
llama_kv_cache_unified: layer   6: dev = CPU
llama_kv_cache_unified: layer   7: dev = CPU
llama_kv_cache_unified: layer   8: dev = CPU
llama_kv_cache_unified: layer   9: dev = CPU
llama_kv_cache_unified: layer  10: dev = CPU
llama_kv_cache_unified: layer  11: dev = CPU
llama_kv_cache_unified: layer  12: dev = CPU
llama_kv_cache_unified: layer  13: dev = CPU
llama_kv_cache_unified: layer  14: dev = CPU
llama_kv_cache_unified: layer  15: dev = CPU
llama_kv_cache_unified: layer  16: dev = CPU
llama_kv_cache_unified: layer  17: dev = CPU
llama_kv_cache_unified: layer  18: dev = CPU
llama_kv_cache_unified: layer  19: dev = CPU
llama_kv_cache_unified: layer  20: dev = CPU
llama_kv_cache_unified: layer  21: dev = CPU
llama_kv_cache_unified: layer  22: dev = CPU
llama_kv_cache_unified: layer  23: dev = CPU
llama_kv_cache_unified: layer  24: dev = CPU
llama_kv_cache_unified: layer  25: dev = CPU
llama_kv_cache_unified: layer  26: dev = CPU
llama_kv_cache_unified: layer  27: dev = CPU
llama_kv_cache_unified: layer  28: dev = CPU
llama_kv_cache_unified: layer  29: dev = CPU
llama_kv_cache_unified: layer  30: dev = CPU
llama_kv_cache_unified: layer  31: dev = CPU
llama_kv_cache_unified:        CPU KV buffer size =   256.00 MiB
llama_kv_cache_unified: KV self size  =  256.00 MiB, K (f16):  128.00 MiB, V (f16):  128.00 MiB
llama_context: enumerating backends
llama_context: backend_ptrs.size() = 1
llama_context: max_nodes = 65536
llama_context: worst-case: n_tokens = 8, n_seqs = 1, n_outputs = 0
llama_context: reserving graph for n_tokens = 8, n_seqs = 1
llama_context: reserving graph for n_tokens = 1, n_seqs = 1
llama_context: reserving graph for n_tokens = 8, n_seqs = 1
llama_context:        CPU compute buffer size =     3.00 MiB
llama_context: graph nodes  = 1094
llama_context: graph splits = 1
CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
Model metadata: {'general.name': 'mistralai_mistral-7b-instruct-v0.1', 'general.architecture': 'llama', 'llama.context_length': '32768', 'llama.rope.dimension_count': '128', 'llama.embedding_length': '4096', 'llama.block_count': '32', 'llama.feed_forward_length': '14336', 'llama.attention.head_count': '32', 'tokenizer.ggml.eos_token_id': '2', 'general.file_type': '10', 'llama.attention.head_count_kv': '8', 'llama.attention.layer_norm_rms_epsilon': '0.000010', 'llama.rope.freq_base': '10000.000000', 'tokenizer.ggml.model': 'llama', 'general.quantization_version': '2', 'tokenizer.ggml.bos_token_id': '1', 'tokenizer.ggml.unknown_token_id': '0'}
Using fallback chat format: llama-2
Building index from SQLite database...
Loading embedding model: intfloat/e5-small-v2 on CPU
Index saved to faiss_index
llama_perf_context_print:        load time =  124624.85 ms
llama_perf_context_print: prompt eval time =  124624.00 ms /   317 tokens (  393.14 ms per token,     2.54 tokens per second)
llama_perf_context_print:        eval time =   18852.60 ms /    41 runs   (  459.82 ms per token,     2.17 tokens per second)
llama_perf_context_print:       total time =  143586.21 ms /   358 tokens
LLM is explicitly disabled. Using MockLLM.
llama_model_load: error loading model: llama_model_loader: failed to load model from C:/Users/Prakhar Srivastava/Desktop/PROJECTS/askMUJ/models/Mistral/mistral_engine.py

llama_model_load_from_file_impl: failed to load model
LLM is explicitly disabled. Using MockLLM.
llama_model_load: error loading model: llama_model_loader: failed to load model from C:/Users/Prakhar Srivastava/Desktop/PROJECTS/askMUJ/models/Mistral/mistral_engine.py

llama_model_load_from_file_impl: failed to load model
LLM is explicitly disabled. Using MockLLM.
llama_model_load: error loading model: llama_model_loader: failed to load model from C:/Users/Prakhar Srivastava/Desktop/PROJECTS/askMUJ/models/Mistral/mistral_engine.py

llama_model_load_from_file_impl: failed to load model
LLM is explicitly disabled. Using MockLLM.
llama_model_load: error loading model: llama_model_loader: failed to load model from C:/Users/Prakhar Srivastava/Desktop/PROJECTS/askMUJ/models/Mistral/mistral_engine.py

llama_model_load_from_file_impl: failed to load model
LLM is explicitly disabled. Using MockLLM.
LLM is explicitly disabled. Using MockLLM.
LLM is explicitly disabled. Using MockLLM.
llama_model_loader: loaded meta data with 20 key-value pairs and 291 tensors from C:/Users/Prakhar Srivastava/Desktop/PROJECTS/askMUJ/models/Mistral/mistral-7b-instruct-v0.1.Q2_K.gguf (version GGUF V2)
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = llama
llama_model_loader: - kv   1:                               general.name str              = mistralai_mistral-7b-instruct-v0.1
llama_model_loader: - kv   2:                       llama.context_length u32              = 32768
llama_model_loader: - kv   3:                     llama.embedding_length u32              = 4096
llama_model_loader: - kv   4:                          llama.block_count u32              = 32
llama_model_loader: - kv   5:                  llama.feed_forward_length u32              = 14336
llama_model_loader: - kv   6:                 llama.rope.dimension_count u32              = 128
llama_model_loader: - kv   7:                 llama.attention.head_count u32              = 32
llama_model_loader: - kv   8:              llama.attention.head_count_kv u32              = 8
llama_model_loader: - kv   9:     llama.attention.layer_norm_rms_epsilon f32              = 0.000010
llama_model_loader: - kv  10:                       llama.rope.freq_base f32              = 10000.000000
llama_model_loader: - kv  11:                          general.file_type u32              = 10
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,32000]   = ["<unk>", "<s>", "</s>", "<0x00>", "<...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,32000]   = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,32000]   = [2, 3, 3, 6, 6, 6, 6, 6, 6, 6, 6, 6, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 1
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 2
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 0
llama_model_loader: - kv  19:               general.quantization_version u32              = 2
llama_model_loader: - type  f32:   65 tensors
llama_model_loader: - type q2_K:   65 tensors
llama_model_loader: - type q3_K:  160 tensors
llama_model_loader: - type q6_K:    1 tensors
print_info: file format = GGUF V2
print_info: file type   = Q2_K - Medium
print_info: file size   = 2.87 GiB (3.41 BPW) 
init_tokenizer: initializing tokenizer for type 1
load: control token:      2 '</s>' is not marked as EOG
load: control token:      1 '<s>' is not marked as EOG
load: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
load: special tokens cache size = 3
load: token to piece cache size = 0.1637 MB
print_info: arch             = llama
print_info: vocab_only       = 0
print_info: n_ctx_train      = 32768
print_info: n_embd           = 4096
print_info: n_layer          = 32
print_info: n_head           = 32
print_info: n_head_kv        = 8
print_info: n_rot            = 128
print_info: n_swa            = 0
print_info: n_swa_pattern    = 1
print_info: n_embd_head_k    = 128
print_info: n_embd_head_v    = 128
print_info: n_gqa            = 4
print_info: n_embd_k_gqa     = 1024
print_info: n_embd_v_gqa     = 1024
print_info: f_norm_eps       = 0.0e+00
print_info: f_norm_rms_eps   = 1.0e-05
print_info: f_clamp_kqv      = 0.0e+00
print_info: f_max_alibi_bias = 0.0e+00
print_info: f_logit_scale    = 0.0e+00
print_info: f_attn_scale     = 0.0e+00
print_info: n_ff             = 14336
print_info: n_expert         = 0
print_info: n_expert_used    = 0
print_info: causal attn      = 1
print_info: pooling type     = 0
print_info: rope type        = 0
print_info: rope scaling     = linear
print_info: freq_base_train  = 10000.0
print_info: freq_scale_train = 1
print_info: n_ctx_orig_yarn  = 32768
print_info: rope_finetuned   = unknown
print_info: ssm_d_conv       = 0
print_info: ssm_d_inner      = 0
print_info: ssm_d_state      = 0
print_info: ssm_dt_rank      = 0
print_info: ssm_dt_b_c_rms   = 0
print_info: model type       = 7B
print_info: model params     = 7.24 B
print_info: general.name     = mistralai_mistral-7b-instruct-v0.1
print_info: vocab type       = SPM
print_info: n_vocab          = 32000
print_info: n_merges         = 0
print_info: BOS token        = 1 '<s>'
print_info: EOS token        = 2 '</s>'
print_info: UNK token        = 0 '<unk>'
print_info: LF token         = 13 '<0x0A>'
print_info: EOG token        = 2 '</s>'
print_info: max token length = 48
load_tensors: loading model tensors, this can take a while... (mmap = true)
load_tensors: layer   0 assigned to device CPU, is_swa = 0
load_tensors: layer   1 assigned to device CPU, is_swa = 0
load_tensors: layer   2 assigned to device CPU, is_swa = 0
load_tensors: layer   3 assigned to device CPU, is_swa = 0
load_tensors: layer   4 assigned to device CPU, is_swa = 0
load_tensors: layer   5 assigned to device CPU, is_swa = 0
load_tensors: layer   6 assigned to device CPU, is_swa = 0
load_tensors: layer   7 assigned to device CPU, is_swa = 0
load_tensors: layer   8 assigned to device CPU, is_swa = 0
load_tensors: layer   9 assigned to device CPU, is_swa = 0
load_tensors: layer  10 assigned to device CPU, is_swa = 0
load_tensors: layer  11 assigned to device CPU, is_swa = 0
load_tensors: layer  12 assigned to device CPU, is_swa = 0
load_tensors: layer  13 assigned to device CPU, is_swa = 0
load_tensors: layer  14 assigned to device CPU, is_swa = 0
load_tensors: layer  15 assigned to device CPU, is_swa = 0
load_tensors: layer  16 assigned to device CPU, is_swa = 0
load_tensors: layer  17 assigned to device CPU, is_swa = 0
load_tensors: layer  18 assigned to device CPU, is_swa = 0
load_tensors: layer  19 assigned to device CPU, is_swa = 0
load_tensors: layer  20 assigned to device CPU, is_swa = 0
load_tensors: layer  21 assigned to device CPU, is_swa = 0
load_tensors: layer  22 assigned to device CPU, is_swa = 0
load_tensors: layer  23 assigned to device CPU, is_swa = 0
load_tensors: layer  24 assigned to device CPU, is_swa = 0
load_tensors: layer  25 assigned to device CPU, is_swa = 0
load_tensors: layer  26 assigned to device CPU, is_swa = 0
load_tensors: layer  27 assigned to device CPU, is_swa = 0
load_tensors: layer  28 assigned to device CPU, is_swa = 0
load_tensors: layer  29 assigned to device CPU, is_swa = 0
load_tensors: layer  30 assigned to device CPU, is_swa = 0
load_tensors: layer  31 assigned to device CPU, is_swa = 0
load_tensors: layer  32 assigned to device CPU, is_swa = 0
load_tensors: tensor 'token_embd.weight' (q2_K) (and 290 others) cannot be used with preferred buffer type CPU_AARCH64, using CPU instead
load_tensors:   CPU_Mapped model buffer size =  2939.57 MiB
..................................................................................................
llama_context: constructing llama_context
llama_context: n_batch is less than GGML_KQ_MASK_PAD - increasing to 64
llama_context: n_seq_max     = 1
llama_context: n_ctx         = 2048
llama_context: n_ctx_per_seq = 2048
llama_context: n_batch       = 64
llama_context: n_ubatch      = 8
llama_context: causal_attn   = 1
llama_context: flash_attn    = 0
llama_context: freq_base     = 10000.0
llama_context: freq_scale    = 1
llama_context: n_ctx_per_seq (2048) < n_ctx_train (32768) -- the full capacity of the model will not be utilized
set_abort_callback: call
llama_context:        CPU  output buffer size =     0.12 MiB
create_memory: n_ctx = 2048 (padded)
llama_kv_cache_unified: kv_size = 2048, type_k = 'f16', type_v = 'f16', n_layer = 32, can_shift = 1, padding = 32
llama_kv_cache_unified: layer   0: dev = CPU
llama_kv_cache_unified: layer   1: dev = CPU
llama_kv_cache_unified: layer   2: dev = CPU
llama_kv_cache_unified: layer   3: dev = CPU
llama_kv_cache_unified: layer   4: dev = CPU
llama_kv_cache_unified: layer   5: dev = CPU
llama_kv_cache_unified: layer   6: dev = CPU
llama_kv_cache_unified: layer   7: dev = CPU
llama_kv_cache_unified: layer   8: dev = CPU
llama_kv_cache_unified: layer   9: dev = CPU
llama_kv_cache_unified: layer  10: dev = CPU
llama_kv_cache_unified: layer  11: dev = CPU
llama_kv_cache_unified: layer  12: dev = CPU
llama_kv_cache_unified: layer  13: dev = CPU
llama_kv_cache_unified: layer  14: dev = CPU
llama_kv_cache_unified: layer  15: dev = CPU
llama_kv_cache_unified: layer  16: dev = CPU
llama_kv_cache_unified: layer  17: dev = CPU
llama_kv_cache_unified: layer  18: dev = CPU
llama_kv_cache_unified: layer  19: dev = CPU
llama_kv_cache_unified: layer  20: dev = CPU
llama_kv_cache_unified: layer  21: dev = CPU
llama_kv_cache_unified: layer  22: dev = CPU
llama_kv_cache_unified: layer  23: dev = CPU
llama_kv_cache_unified: layer  24: dev = CPU
llama_kv_cache_unified: layer  25: dev = CPU
llama_kv_cache_unified: layer  26: dev = CPU
llama_kv_cache_unified: layer  27: dev = CPU
llama_kv_cache_unified: layer  28: dev = CPU
llama_kv_cache_unified: layer  29: dev = CPU
llama_kv_cache_unified: layer  30: dev = CPU
llama_kv_cache_unified: layer  31: dev = CPU
llama_kv_cache_unified:        CPU KV buffer size =   256.00 MiB
llama_kv_cache_unified: KV self size  =  256.00 MiB, K (f16):  128.00 MiB, V (f16):  128.00 MiB
llama_context: enumerating backends
llama_context: backend_ptrs.size() = 1
llama_context: max_nodes = 65536
llama_context: worst-case: n_tokens = 8, n_seqs = 1, n_outputs = 0
llama_context: reserving graph for n_tokens = 8, n_seqs = 1
llama_context: reserving graph for n_tokens = 1, n_seqs = 1
llama_context: reserving graph for n_tokens = 8, n_seqs = 1
llama_context:        CPU compute buffer size =     3.00 MiB
llama_context: graph nodes  = 1094
llama_context: graph splits = 1
CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
Model metadata: {'general.name': 'mistralai_mistral-7b-instruct-v0.1', 'general.architecture': 'llama', 'llama.context_length': '32768', 'llama.rope.dimension_count': '128', 'llama.embedding_length': '4096', 'llama.block_count': '32', 'llama.feed_forward_length': '14336', 'llama.attention.head_count': '32', 'tokenizer.ggml.eos_token_id': '2', 'general.file_type': '10', 'llama.attention.head_count_kv': '8', 'llama.attention.layer_norm_rms_epsilon': '0.000010', 'llama.rope.freq_base': '10000.000000', 'tokenizer.ggml.model': 'llama', 'general.quantization_version': '2', 'tokenizer.ggml.bos_token_id': '1', 'tokenizer.ggml.unknown_token_id': '0'}
Using fallback chat format: llama-2
Building index from SQLite database...
Loading embedding model: intfloat/e5-small-v2 on CPU
Index saved to faiss_index
llama_model_loader: loaded meta data with 20 key-value pairs and 291 tensors from C:/Users/Prakhar Srivastava/Desktop/PROJECTS/askMUJ/models/Mistral/mistral-7b-instruct-v0.1.Q2_K.gguf (version GGUF V2)
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = llama
llama_model_loader: - kv   1:                               general.name str              = mistralai_mistral-7b-instruct-v0.1
llama_model_loader: - kv   2:                       llama.context_length u32              = 32768
llama_model_loader: - kv   3:                     llama.embedding_length u32              = 4096
llama_model_loader: - kv   4:                          llama.block_count u32              = 32
llama_model_loader: - kv   5:                  llama.feed_forward_length u32              = 14336
llama_model_loader: - kv   6:                 llama.rope.dimension_count u32              = 128
llama_model_loader: - kv   7:                 llama.attention.head_count u32              = 32
llama_model_loader: - kv   8:              llama.attention.head_count_kv u32              = 8
llama_model_loader: - kv   9:     llama.attention.layer_norm_rms_epsilon f32              = 0.000010
llama_model_loader: - kv  10:                       llama.rope.freq_base f32              = 10000.000000
llama_model_loader: - kv  11:                          general.file_type u32              = 10
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,32000]   = ["<unk>", "<s>", "</s>", "<0x00>", "<...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,32000]   = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,32000]   = [2, 3, 3, 6, 6, 6, 6, 6, 6, 6, 6, 6, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 1
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 2
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 0
llama_model_loader: - kv  19:               general.quantization_version u32              = 2
llama_model_loader: - type  f32:   65 tensors
llama_model_loader: - type q2_K:   65 tensors
llama_model_loader: - type q3_K:  160 tensors
llama_model_loader: - type q6_K:    1 tensors
print_info: file format = GGUF V2
print_info: file type   = Q2_K - Medium
print_info: file size   = 2.87 GiB (3.41 BPW) 
init_tokenizer: initializing tokenizer for type 1
load: control token:      2 '</s>' is not marked as EOG
load: control token:      1 '<s>' is not marked as EOG
load: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
load: special tokens cache size = 3
load: token to piece cache size = 0.1637 MB
print_info: arch             = llama
print_info: vocab_only       = 0
print_info: n_ctx_train      = 32768
print_info: n_embd           = 4096
print_info: n_layer          = 32
print_info: n_head           = 32
print_info: n_head_kv        = 8
print_info: n_rot            = 128
print_info: n_swa            = 0
print_info: n_swa_pattern    = 1
print_info: n_embd_head_k    = 128
print_info: n_embd_head_v    = 128
print_info: n_gqa            = 4
print_info: n_embd_k_gqa     = 1024
print_info: n_embd_v_gqa     = 1024
print_info: f_norm_eps       = 0.0e+00
print_info: f_norm_rms_eps   = 1.0e-05
print_info: f_clamp_kqv      = 0.0e+00
print_info: f_max_alibi_bias = 0.0e+00
print_info: f_logit_scale    = 0.0e+00
print_info: f_attn_scale     = 0.0e+00
print_info: n_ff             = 14336
print_info: n_expert         = 0
print_info: n_expert_used    = 0
print_info: causal attn      = 1
print_info: pooling type     = 0
print_info: rope type        = 0
print_info: rope scaling     = linear
print_info: freq_base_train  = 10000.0
print_info: freq_scale_train = 1
print_info: n_ctx_orig_yarn  = 32768
print_info: rope_finetuned   = unknown
print_info: ssm_d_conv       = 0
print_info: ssm_d_inner      = 0
print_info: ssm_d_state      = 0
print_info: ssm_dt_rank      = 0
print_info: ssm_dt_b_c_rms   = 0
print_info: model type       = 7B
print_info: model params     = 7.24 B
print_info: general.name     = mistralai_mistral-7b-instruct-v0.1
print_info: vocab type       = SPM
print_info: n_vocab          = 32000
print_info: n_merges         = 0
print_info: BOS token        = 1 '<s>'
print_info: EOS token        = 2 '</s>'
print_info: UNK token        = 0 '<unk>'
print_info: LF token         = 13 '<0x0A>'
print_info: EOG token        = 2 '</s>'
print_info: max token length = 48
load_tensors: loading model tensors, this can take a while... (mmap = true)
load_tensors: layer   0 assigned to device CPU, is_swa = 0
load_tensors: layer   1 assigned to device CPU, is_swa = 0
load_tensors: layer   2 assigned to device CPU, is_swa = 0
load_tensors: layer   3 assigned to device CPU, is_swa = 0
load_tensors: layer   4 assigned to device CPU, is_swa = 0
load_tensors: layer   5 assigned to device CPU, is_swa = 0
load_tensors: layer   6 assigned to device CPU, is_swa = 0
load_tensors: layer   7 assigned to device CPU, is_swa = 0
load_tensors: layer   8 assigned to device CPU, is_swa = 0
load_tensors: layer   9 assigned to device CPU, is_swa = 0
load_tensors: layer  10 assigned to device CPU, is_swa = 0
load_tensors: layer  11 assigned to device CPU, is_swa = 0
load_tensors: layer  12 assigned to device CPU, is_swa = 0
load_tensors: layer  13 assigned to device CPU, is_swa = 0
load_tensors: layer  14 assigned to device CPU, is_swa = 0
load_tensors: layer  15 assigned to device CPU, is_swa = 0
load_tensors: layer  16 assigned to device CPU, is_swa = 0
load_tensors: layer  17 assigned to device CPU, is_swa = 0
load_tensors: layer  18 assigned to device CPU, is_swa = 0
load_tensors: layer  19 assigned to device CPU, is_swa = 0
load_tensors: layer  20 assigned to device CPU, is_swa = 0
load_tensors: layer  21 assigned to device CPU, is_swa = 0
load_tensors: layer  22 assigned to device CPU, is_swa = 0
load_tensors: layer  23 assigned to device CPU, is_swa = 0
load_tensors: layer  24 assigned to device CPU, is_swa = 0
load_tensors: layer  25 assigned to device CPU, is_swa = 0
load_tensors: layer  26 assigned to device CPU, is_swa = 0
load_tensors: layer  27 assigned to device CPU, is_swa = 0
load_tensors: layer  28 assigned to device CPU, is_swa = 0
load_tensors: layer  29 assigned to device CPU, is_swa = 0
load_tensors: layer  30 assigned to device CPU, is_swa = 0
load_tensors: layer  31 assigned to device CPU, is_swa = 0
load_tensors: layer  32 assigned to device CPU, is_swa = 0
load_tensors: tensor 'token_embd.weight' (q2_K) (and 290 others) cannot be used with preferred buffer type CPU_AARCH64, using CPU instead
load_tensors:   CPU_Mapped model buffer size =  2939.57 MiB
..................................................................................................
llama_context: constructing llama_context
llama_context: n_batch is less than GGML_KQ_MASK_PAD - increasing to 64
llama_context: n_seq_max     = 1
llama_context: n_ctx         = 2048
llama_context: n_ctx_per_seq = 2048
llama_context: n_batch       = 64
llama_context: n_ubatch      = 8
llama_context: causal_attn   = 1
llama_context: flash_attn    = 0
llama_context: freq_base     = 10000.0
llama_context: freq_scale    = 1
llama_context: n_ctx_per_seq (2048) < n_ctx_train (32768) -- the full capacity of the model will not be utilized
set_abort_callback: call
llama_context:        CPU  output buffer size =     0.12 MiB
create_memory: n_ctx = 2048 (padded)
llama_kv_cache_unified: kv_size = 2048, type_k = 'f16', type_v = 'f16', n_layer = 32, can_shift = 1, padding = 32
llama_kv_cache_unified: layer   0: dev = CPU
llama_kv_cache_unified: layer   1: dev = CPU
llama_kv_cache_unified: layer   2: dev = CPU
llama_kv_cache_unified: layer   3: dev = CPU
llama_kv_cache_unified: layer   4: dev = CPU
llama_kv_cache_unified: layer   5: dev = CPU
llama_kv_cache_unified: layer   6: dev = CPU
llama_kv_cache_unified: layer   7: dev = CPU
llama_kv_cache_unified: layer   8: dev = CPU
llama_kv_cache_unified: layer   9: dev = CPU
llama_kv_cache_unified: layer  10: dev = CPU
llama_kv_cache_unified: layer  11: dev = CPU
llama_kv_cache_unified: layer  12: dev = CPU
llama_kv_cache_unified: layer  13: dev = CPU
llama_kv_cache_unified: layer  14: dev = CPU
llama_kv_cache_unified: layer  15: dev = CPU
llama_kv_cache_unified: layer  16: dev = CPU
llama_kv_cache_unified: layer  17: dev = CPU
llama_kv_cache_unified: layer  18: dev = CPU
llama_kv_cache_unified: layer  19: dev = CPU
llama_kv_cache_unified: layer  20: dev = CPU
llama_kv_cache_unified: layer  21: dev = CPU
llama_kv_cache_unified: layer  22: dev = CPU
llama_kv_cache_unified: layer  23: dev = CPU
llama_kv_cache_unified: layer  24: dev = CPU
llama_kv_cache_unified: layer  25: dev = CPU
llama_kv_cache_unified: layer  26: dev = CPU
llama_kv_cache_unified: layer  27: dev = CPU
llama_kv_cache_unified: layer  28: dev = CPU
llama_kv_cache_unified: layer  29: dev = CPU
llama_kv_cache_unified: layer  30: dev = CPU
llama_kv_cache_unified: layer  31: dev = CPU
llama_kv_cache_unified:        CPU KV buffer size =   256.00 MiB
llama_kv_cache_unified: KV self size  =  256.00 MiB, K (f16):  128.00 MiB, V (f16):  128.00 MiB
llama_context: enumerating backends
llama_context: backend_ptrs.size() = 1
llama_context: max_nodes = 65536
llama_context: worst-case: n_tokens = 8, n_seqs = 1, n_outputs = 0
llama_context: reserving graph for n_tokens = 8, n_seqs = 1
llama_context: reserving graph for n_tokens = 1, n_seqs = 1
llama_context: reserving graph for n_tokens = 8, n_seqs = 1
llama_context:        CPU compute buffer size =     3.00 MiB
llama_context: graph nodes  = 1094
llama_context: graph splits = 1
CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
Model metadata: {'general.name': 'mistralai_mistral-7b-instruct-v0.1', 'general.architecture': 'llama', 'llama.context_length': '32768', 'llama.rope.dimension_count': '128', 'llama.embedding_length': '4096', 'llama.block_count': '32', 'llama.feed_forward_length': '14336', 'llama.attention.head_count': '32', 'tokenizer.ggml.eos_token_id': '2', 'general.file_type': '10', 'llama.attention.head_count_kv': '8', 'llama.attention.layer_norm_rms_epsilon': '0.000010', 'llama.rope.freq_base': '10000.000000', 'tokenizer.ggml.model': 'llama', 'general.quantization_version': '2', 'tokenizer.ggml.bos_token_id': '1', 'tokenizer.ggml.unknown_token_id': '0'}
Using fallback chat format: llama-2
Building index from SQLite database...
Loading embedding model: intfloat/e5-small-v2 on CPU
Index saved to faiss_index
llama_perf_context_print:        load time =   87821.60 ms
llama_perf_context_print: prompt eval time =   87820.96 ms /   317 tokens (  277.04 ms per token,     3.61 tokens per second)
llama_perf_context_print:        eval time =   19940.81 ms /    41 runs   (  486.36 ms per token,     2.06 tokens per second)
llama_perf_context_print:       total time =  107831.61 ms /   358 tokens
LLM is explicitly disabled. Using MockLLM.
llama_model_loader: loaded meta data with 20 key-value pairs and 291 tensors from C:/Users/Prakhar Srivastava/Desktop/PROJECTS/askMUJ/models/Mistral/mistral-7b-instruct-v0.1.Q2_K.gguf (version GGUF V2)
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = llama
llama_model_loader: - kv   1:                               general.name str              = mistralai_mistral-7b-instruct-v0.1
llama_model_loader: - kv   2:                       llama.context_length u32              = 32768
llama_model_loader: - kv   3:                     llama.embedding_length u32              = 4096
llama_model_loader: - kv   4:                          llama.block_count u32              = 32
llama_model_loader: - kv   5:                  llama.feed_forward_length u32              = 14336
llama_model_loader: - kv   6:                 llama.rope.dimension_count u32              = 128
llama_model_loader: - kv   7:                 llama.attention.head_count u32              = 32
llama_model_loader: - kv   8:              llama.attention.head_count_kv u32              = 8
llama_model_loader: - kv   9:     llama.attention.layer_norm_rms_epsilon f32              = 0.000010
llama_model_loader: - kv  10:                       llama.rope.freq_base f32              = 10000.000000
llama_model_loader: - kv  11:                          general.file_type u32              = 10
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,32000]   = ["<unk>", "<s>", "</s>", "<0x00>", "<...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,32000]   = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,32000]   = [2, 3, 3, 6, 6, 6, 6, 6, 6, 6, 6, 6, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 1
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 2
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 0
llama_model_loader: - kv  19:               general.quantization_version u32              = 2
llama_model_loader: - type  f32:   65 tensors
llama_model_loader: - type q2_K:   65 tensors
llama_model_loader: - type q3_K:  160 tensors
llama_model_loader: - type q6_K:    1 tensors
print_info: file format = GGUF V2
print_info: file type   = Q2_K - Medium
print_info: file size   = 2.87 GiB (3.41 BPW) 
init_tokenizer: initializing tokenizer for type 1
load: control token:      2 '</s>' is not marked as EOG
load: control token:      1 '<s>' is not marked as EOG
load: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
load: special tokens cache size = 3
load: token to piece cache size = 0.1637 MB
print_info: arch             = llama
print_info: vocab_only       = 0
print_info: n_ctx_train      = 32768
print_info: n_embd           = 4096
print_info: n_layer          = 32
print_info: n_head           = 32
print_info: n_head_kv        = 8
print_info: n_rot            = 128
print_info: n_swa            = 0
print_info: n_swa_pattern    = 1
print_info: n_embd_head_k    = 128
print_info: n_embd_head_v    = 128
print_info: n_gqa            = 4
print_info: n_embd_k_gqa     = 1024
print_info: n_embd_v_gqa     = 1024
print_info: f_norm_eps       = 0.0e+00
print_info: f_norm_rms_eps   = 1.0e-05
print_info: f_clamp_kqv      = 0.0e+00
print_info: f_max_alibi_bias = 0.0e+00
print_info: f_logit_scale    = 0.0e+00
print_info: f_attn_scale     = 0.0e+00
print_info: n_ff             = 14336
print_info: n_expert         = 0
print_info: n_expert_used    = 0
print_info: causal attn      = 1
print_info: pooling type     = 0
print_info: rope type        = 0
print_info: rope scaling     = linear
print_info: freq_base_train  = 10000.0
print_info: freq_scale_train = 1
print_info: n_ctx_orig_yarn  = 32768
print_info: rope_finetuned   = unknown
print_info: ssm_d_conv       = 0
print_info: ssm_d_inner      = 0
print_info: ssm_d_state      = 0
print_info: ssm_dt_rank      = 0
print_info: ssm_dt_b_c_rms   = 0
print_info: model type       = 7B
print_info: model params     = 7.24 B
print_info: general.name     = mistralai_mistral-7b-instruct-v0.1
print_info: vocab type       = SPM
print_info: n_vocab          = 32000
print_info: n_merges         = 0
print_info: BOS token        = 1 '<s>'
print_info: EOS token        = 2 '</s>'
print_info: UNK token        = 0 '<unk>'
print_info: LF token         = 13 '<0x0A>'
print_info: EOG token        = 2 '</s>'
print_info: max token length = 48
load_tensors: loading model tensors, this can take a while... (mmap = true)
load_tensors: layer   0 assigned to device CPU, is_swa = 0
load_tensors: layer   1 assigned to device CPU, is_swa = 0
load_tensors: layer   2 assigned to device CPU, is_swa = 0
load_tensors: layer   3 assigned to device CPU, is_swa = 0
load_tensors: layer   4 assigned to device CPU, is_swa = 0
load_tensors: layer   5 assigned to device CPU, is_swa = 0
load_tensors: layer   6 assigned to device CPU, is_swa = 0
load_tensors: layer   7 assigned to device CPU, is_swa = 0
load_tensors: layer   8 assigned to device CPU, is_swa = 0
load_tensors: layer   9 assigned to device CPU, is_swa = 0
load_tensors: layer  10 assigned to device CPU, is_swa = 0
load_tensors: layer  11 assigned to device CPU, is_swa = 0
load_tensors: layer  12 assigned to device CPU, is_swa = 0
load_tensors: layer  13 assigned to device CPU, is_swa = 0
load_tensors: layer  14 assigned to device CPU, is_swa = 0
load_tensors: layer  15 assigned to device CPU, is_swa = 0
load_tensors: layer  16 assigned to device CPU, is_swa = 0
load_tensors: layer  17 assigned to device CPU, is_swa = 0
load_tensors: layer  18 assigned to device CPU, is_swa = 0
load_tensors: layer  19 assigned to device CPU, is_swa = 0
load_tensors: layer  20 assigned to device CPU, is_swa = 0
load_tensors: layer  21 assigned to device CPU, is_swa = 0
load_tensors: layer  22 assigned to device CPU, is_swa = 0
load_tensors: layer  23 assigned to device CPU, is_swa = 0
load_tensors: layer  24 assigned to device CPU, is_swa = 0
load_tensors: layer  25 assigned to device CPU, is_swa = 0
load_tensors: layer  26 assigned to device CPU, is_swa = 0
load_tensors: layer  27 assigned to device CPU, is_swa = 0
load_tensors: layer  28 assigned to device CPU, is_swa = 0
load_tensors: layer  29 assigned to device CPU, is_swa = 0
load_tensors: layer  30 assigned to device CPU, is_swa = 0
load_tensors: layer  31 assigned to device CPU, is_swa = 0
load_tensors: layer  32 assigned to device CPU, is_swa = 0
load_tensors: tensor 'token_embd.weight' (q2_K) (and 290 others) cannot be used with preferred buffer type CPU_AARCH64, using CPU instead
load_tensors:   CPU_Mapped model buffer size =  2939.57 MiB
..................................................................................................
llama_context: constructing llama_context
llama_context: n_batch is less than GGML_KQ_MASK_PAD - increasing to 64
llama_context: n_seq_max     = 1
llama_context: n_ctx         = 2048
llama_context: n_ctx_per_seq = 2048
llama_context: n_batch       = 64
llama_context: n_ubatch      = 8
llama_context: causal_attn   = 1
llama_context: flash_attn    = 0
llama_context: freq_base     = 10000.0
llama_context: freq_scale    = 1
llama_context: n_ctx_per_seq (2048) < n_ctx_train (32768) -- the full capacity of the model will not be utilized
set_abort_callback: call
llama_context:        CPU  output buffer size =     0.12 MiB
create_memory: n_ctx = 2048 (padded)
llama_kv_cache_unified: kv_size = 2048, type_k = 'f16', type_v = 'f16', n_layer = 32, can_shift = 1, padding = 32
llama_kv_cache_unified: layer   0: dev = CPU
llama_kv_cache_unified: layer   1: dev = CPU
llama_kv_cache_unified: layer   2: dev = CPU
llama_kv_cache_unified: layer   3: dev = CPU
llama_kv_cache_unified: layer   4: dev = CPU
llama_kv_cache_unified: layer   5: dev = CPU
llama_kv_cache_unified: layer   6: dev = CPU
llama_kv_cache_unified: layer   7: dev = CPU
llama_kv_cache_unified: layer   8: dev = CPU
llama_kv_cache_unified: layer   9: dev = CPU
llama_kv_cache_unified: layer  10: dev = CPU
llama_kv_cache_unified: layer  11: dev = CPU
llama_kv_cache_unified: layer  12: dev = CPU
llama_kv_cache_unified: layer  13: dev = CPU
llama_kv_cache_unified: layer  14: dev = CPU
llama_kv_cache_unified: layer  15: dev = CPU
llama_kv_cache_unified: layer  16: dev = CPU
llama_kv_cache_unified: layer  17: dev = CPU
llama_kv_cache_unified: layer  18: dev = CPU
llama_kv_cache_unified: layer  19: dev = CPU
llama_kv_cache_unified: layer  20: dev = CPU
llama_kv_cache_unified: layer  21: dev = CPU
llama_kv_cache_unified: layer  22: dev = CPU
llama_kv_cache_unified: layer  23: dev = CPU
llama_kv_cache_unified: layer  24: dev = CPU
llama_kv_cache_unified: layer  25: dev = CPU
llama_kv_cache_unified: layer  26: dev = CPU
llama_kv_cache_unified: layer  27: dev = CPU
llama_kv_cache_unified: layer  28: dev = CPU
llama_kv_cache_unified: layer  29: dev = CPU
llama_kv_cache_unified: layer  30: dev = CPU
llama_kv_cache_unified: layer  31: dev = CPU
llama_kv_cache_unified:        CPU KV buffer size =   256.00 MiB
llama_kv_cache_unified: KV self size  =  256.00 MiB, K (f16):  128.00 MiB, V (f16):  128.00 MiB
llama_context: enumerating backends
llama_context: backend_ptrs.size() = 1
llama_context: max_nodes = 65536
llama_context: worst-case: n_tokens = 8, n_seqs = 1, n_outputs = 0
llama_context: reserving graph for n_tokens = 8, n_seqs = 1
llama_context: reserving graph for n_tokens = 1, n_seqs = 1
llama_context: reserving graph for n_tokens = 8, n_seqs = 1
llama_context:        CPU compute buffer size =     3.00 MiB
llama_context: graph nodes  = 1094
llama_context: graph splits = 1
CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
Model metadata: {'general.name': 'mistralai_mistral-7b-instruct-v0.1', 'general.architecture': 'llama', 'llama.context_length': '32768', 'llama.rope.dimension_count': '128', 'llama.embedding_length': '4096', 'llama.block_count': '32', 'llama.feed_forward_length': '14336', 'llama.attention.head_count': '32', 'tokenizer.ggml.eos_token_id': '2', 'general.file_type': '10', 'llama.attention.head_count_kv': '8', 'llama.attention.layer_norm_rms_epsilon': '0.000010', 'llama.rope.freq_base': '10000.000000', 'tokenizer.ggml.model': 'llama', 'general.quantization_version': '2', 'tokenizer.ggml.bos_token_id': '1', 'tokenizer.ggml.unknown_token_id': '0'}
Using fallback chat format: llama-2
Building index from SQLite database...
Loading embedding model: intfloat/e5-small-v2 on CPU
Index saved to faiss_index
llama_model_loader: loaded meta data with 20 key-value pairs and 291 tensors from C:/Users/Prakhar Srivastava/Desktop/PROJECTS/askMUJ/models/Mistral/mistral-7b-instruct-v0.1.Q2_K.gguf (version GGUF V2)
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = llama
llama_model_loader: - kv   1:                               general.name str              = mistralai_mistral-7b-instruct-v0.1
llama_model_loader: - kv   2:                       llama.context_length u32              = 32768
llama_model_loader: - kv   3:                     llama.embedding_length u32              = 4096
llama_model_loader: - kv   4:                          llama.block_count u32              = 32
llama_model_loader: - kv   5:                  llama.feed_forward_length u32              = 14336
llama_model_loader: - kv   6:                 llama.rope.dimension_count u32              = 128
llama_model_loader: - kv   7:                 llama.attention.head_count u32              = 32
llama_model_loader: - kv   8:              llama.attention.head_count_kv u32              = 8
llama_model_loader: - kv   9:     llama.attention.layer_norm_rms_epsilon f32              = 0.000010
llama_model_loader: - kv  10:                       llama.rope.freq_base f32              = 10000.000000
llama_model_loader: - kv  11:                          general.file_type u32              = 10
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,32000]   = ["<unk>", "<s>", "</s>", "<0x00>", "<...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,32000]   = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,32000]   = [2, 3, 3, 6, 6, 6, 6, 6, 6, 6, 6, 6, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 1
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 2
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 0
llama_model_loader: - kv  19:               general.quantization_version u32              = 2
llama_model_loader: - type  f32:   65 tensors
llama_model_loader: - type q2_K:   65 tensors
llama_model_loader: - type q3_K:  160 tensors
llama_model_loader: - type q6_K:    1 tensors
print_info: file format = GGUF V2
print_info: file type   = Q2_K - Medium
print_info: file size   = 2.87 GiB (3.41 BPW) 
init_tokenizer: initializing tokenizer for type 1
load: control token:      2 '</s>' is not marked as EOG
load: control token:      1 '<s>' is not marked as EOG
load: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
load: special tokens cache size = 3
load: token to piece cache size = 0.1637 MB
print_info: arch             = llama
print_info: vocab_only       = 0
print_info: n_ctx_train      = 32768
print_info: n_embd           = 4096
print_info: n_layer          = 32
print_info: n_head           = 32
print_info: n_head_kv        = 8
print_info: n_rot            = 128
print_info: n_swa            = 0
print_info: n_swa_pattern    = 1
print_info: n_embd_head_k    = 128
print_info: n_embd_head_v    = 128
print_info: n_gqa            = 4
print_info: n_embd_k_gqa     = 1024
print_info: n_embd_v_gqa     = 1024
print_info: f_norm_eps       = 0.0e+00
print_info: f_norm_rms_eps   = 1.0e-05
print_info: f_clamp_kqv      = 0.0e+00
print_info: f_max_alibi_bias = 0.0e+00
print_info: f_logit_scale    = 0.0e+00
print_info: f_attn_scale     = 0.0e+00
print_info: n_ff             = 14336
print_info: n_expert         = 0
print_info: n_expert_used    = 0
print_info: causal attn      = 1
print_info: pooling type     = 0
print_info: rope type        = 0
print_info: rope scaling     = linear
print_info: freq_base_train  = 10000.0
print_info: freq_scale_train = 1
print_info: n_ctx_orig_yarn  = 32768
print_info: rope_finetuned   = unknown
print_info: ssm_d_conv       = 0
print_info: ssm_d_inner      = 0
print_info: ssm_d_state      = 0
print_info: ssm_dt_rank      = 0
print_info: ssm_dt_b_c_rms   = 0
print_info: model type       = 7B
print_info: model params     = 7.24 B
print_info: general.name     = mistralai_mistral-7b-instruct-v0.1
print_info: vocab type       = SPM
print_info: n_vocab          = 32000
print_info: n_merges         = 0
print_info: BOS token        = 1 '<s>'
print_info: EOS token        = 2 '</s>'
print_info: UNK token        = 0 '<unk>'
print_info: LF token         = 13 '<0x0A>'
print_info: EOG token        = 2 '</s>'
print_info: max token length = 48
load_tensors: loading model tensors, this can take a while... (mmap = true)
load_tensors: layer   0 assigned to device CPU, is_swa = 0
load_tensors: layer   1 assigned to device CPU, is_swa = 0
load_tensors: layer   2 assigned to device CPU, is_swa = 0
load_tensors: layer   3 assigned to device CPU, is_swa = 0
load_tensors: layer   4 assigned to device CPU, is_swa = 0
load_tensors: layer   5 assigned to device CPU, is_swa = 0
load_tensors: layer   6 assigned to device CPU, is_swa = 0
load_tensors: layer   7 assigned to device CPU, is_swa = 0
load_tensors: layer   8 assigned to device CPU, is_swa = 0
load_tensors: layer   9 assigned to device CPU, is_swa = 0
load_tensors: layer  10 assigned to device CPU, is_swa = 0
load_tensors: layer  11 assigned to device CPU, is_swa = 0
load_tensors: layer  12 assigned to device CPU, is_swa = 0
load_tensors: layer  13 assigned to device CPU, is_swa = 0
load_tensors: layer  14 assigned to device CPU, is_swa = 0
load_tensors: layer  15 assigned to device CPU, is_swa = 0
load_tensors: layer  16 assigned to device CPU, is_swa = 0
load_tensors: layer  17 assigned to device CPU, is_swa = 0
load_tensors: layer  18 assigned to device CPU, is_swa = 0
load_tensors: layer  19 assigned to device CPU, is_swa = 0
load_tensors: layer  20 assigned to device CPU, is_swa = 0
load_tensors: layer  21 assigned to device CPU, is_swa = 0
load_tensors: layer  22 assigned to device CPU, is_swa = 0
load_tensors: layer  23 assigned to device CPU, is_swa = 0
load_tensors: layer  24 assigned to device CPU, is_swa = 0
load_tensors: layer  25 assigned to device CPU, is_swa = 0
load_tensors: layer  26 assigned to device CPU, is_swa = 0
load_tensors: layer  27 assigned to device CPU, is_swa = 0
load_tensors: layer  28 assigned to device CPU, is_swa = 0
load_tensors: layer  29 assigned to device CPU, is_swa = 0
load_tensors: layer  30 assigned to device CPU, is_swa = 0
load_tensors: layer  31 assigned to device CPU, is_swa = 0
load_tensors: layer  32 assigned to device CPU, is_swa = 0
load_tensors: tensor 'token_embd.weight' (q2_K) (and 290 others) cannot be used with preferred buffer type CPU_AARCH64, using CPU instead
load_tensors:   CPU_Mapped model buffer size =  2939.57 MiB
..................................................................................................
llama_context: constructing llama_context
llama_context: n_batch is less than GGML_KQ_MASK_PAD - increasing to 64
llama_context: n_seq_max     = 1
llama_context: n_ctx         = 2048
llama_context: n_ctx_per_seq = 2048
llama_context: n_batch       = 64
llama_context: n_ubatch      = 8
llama_context: causal_attn   = 1
llama_context: flash_attn    = 0
llama_context: freq_base     = 10000.0
llama_context: freq_scale    = 1
llama_context: n_ctx_per_seq (2048) < n_ctx_train (32768) -- the full capacity of the model will not be utilized
set_abort_callback: call
llama_context:        CPU  output buffer size =     0.12 MiB
create_memory: n_ctx = 2048 (padded)
llama_kv_cache_unified: kv_size = 2048, type_k = 'f16', type_v = 'f16', n_layer = 32, can_shift = 1, padding = 32
llama_kv_cache_unified: layer   0: dev = CPU
llama_kv_cache_unified: layer   1: dev = CPU
llama_kv_cache_unified: layer   2: dev = CPU
llama_kv_cache_unified: layer   3: dev = CPU
llama_kv_cache_unified: layer   4: dev = CPU
llama_kv_cache_unified: layer   5: dev = CPU
llama_kv_cache_unified: layer   6: dev = CPU
llama_kv_cache_unified: layer   7: dev = CPU
llama_kv_cache_unified: layer   8: dev = CPU
llama_kv_cache_unified: layer   9: dev = CPU
llama_kv_cache_unified: layer  10: dev = CPU
llama_kv_cache_unified: layer  11: dev = CPU
llama_kv_cache_unified: layer  12: dev = CPU
llama_kv_cache_unified: layer  13: dev = CPU
llama_kv_cache_unified: layer  14: dev = CPU
llama_kv_cache_unified: layer  15: dev = CPU
llama_kv_cache_unified: layer  16: dev = CPU
llama_kv_cache_unified: layer  17: dev = CPU
llama_kv_cache_unified: layer  18: dev = CPU
llama_kv_cache_unified: layer  19: dev = CPU
llama_kv_cache_unified: layer  20: dev = CPU
llama_kv_cache_unified: layer  21: dev = CPU
llama_kv_cache_unified: layer  22: dev = CPU
llama_kv_cache_unified: layer  23: dev = CPU
llama_kv_cache_unified: layer  24: dev = CPU
llama_kv_cache_unified: layer  25: dev = CPU
llama_kv_cache_unified: layer  26: dev = CPU
llama_kv_cache_unified: layer  27: dev = CPU
llama_kv_cache_unified: layer  28: dev = CPU
llama_kv_cache_unified: layer  29: dev = CPU
llama_kv_cache_unified: layer  30: dev = CPU
llama_kv_cache_unified: layer  31: dev = CPU
llama_kv_cache_unified:        CPU KV buffer size =   256.00 MiB
llama_kv_cache_unified: KV self size  =  256.00 MiB, K (f16):  128.00 MiB, V (f16):  128.00 MiB
llama_context: enumerating backends
llama_context: backend_ptrs.size() = 1
llama_context: max_nodes = 65536
llama_context: worst-case: n_tokens = 8, n_seqs = 1, n_outputs = 0
llama_context: reserving graph for n_tokens = 8, n_seqs = 1
llama_context: reserving graph for n_tokens = 1, n_seqs = 1
llama_context: reserving graph for n_tokens = 8, n_seqs = 1
llama_context:        CPU compute buffer size =     3.00 MiB
llama_context: graph nodes  = 1094
llama_context: graph splits = 1
CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
Model metadata: {'general.name': 'mistralai_mistral-7b-instruct-v0.1', 'general.architecture': 'llama', 'llama.context_length': '32768', 'llama.rope.dimension_count': '128', 'llama.embedding_length': '4096', 'llama.block_count': '32', 'llama.feed_forward_length': '14336', 'llama.attention.head_count': '32', 'tokenizer.ggml.eos_token_id': '2', 'general.file_type': '10', 'llama.attention.head_count_kv': '8', 'llama.attention.layer_norm_rms_epsilon': '0.000010', 'llama.rope.freq_base': '10000.000000', 'tokenizer.ggml.model': 'llama', 'general.quantization_version': '2', 'tokenizer.ggml.bos_token_id': '1', 'tokenizer.ggml.unknown_token_id': '0'}
Using fallback chat format: llama-2
Building index from SQLite database...
Loading embedding model: intfloat/e5-small-v2 on CPU
Index saved to faiss_index
llama_perf_context_print:        load time =   84328.52 ms
llama_perf_context_print: prompt eval time =   84328.05 ms /   332 tokens (  254.00 ms per token,     3.94 tokens per second)
llama_perf_context_print:        eval time =    9139.68 ms /    22 runs   (  415.44 ms per token,     2.41 tokens per second)
llama_perf_context_print:       total time =   93532.56 ms /   354 tokens
LLM is explicitly disabled. Using MockLLM.
llama_model_loader: loaded meta data with 20 key-value pairs and 291 tensors from C:/Users/Prakhar Srivastava/Desktop/PROJECTS/askMUJ/models/Mistral/mistral-7b-instruct-v0.1.Q2_K.gguf (version GGUF V2)
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = llama
llama_model_loader: - kv   1:                               general.name str              = mistralai_mistral-7b-instruct-v0.1
llama_model_loader: - kv   2:                       llama.context_length u32              = 32768
llama_model_loader: - kv   3:                     llama.embedding_length u32              = 4096
llama_model_loader: - kv   4:                          llama.block_count u32              = 32
llama_model_loader: - kv   5:                  llama.feed_forward_length u32              = 14336
llama_model_loader: - kv   6:                 llama.rope.dimension_count u32              = 128
llama_model_loader: - kv   7:                 llama.attention.head_count u32              = 32
llama_model_loader: - kv   8:              llama.attention.head_count_kv u32              = 8
llama_model_loader: - kv   9:     llama.attention.layer_norm_rms_epsilon f32              = 0.000010
llama_model_loader: - kv  10:                       llama.rope.freq_base f32              = 10000.000000
llama_model_loader: - kv  11:                          general.file_type u32              = 10
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,32000]   = ["<unk>", "<s>", "</s>", "<0x00>", "<...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,32000]   = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,32000]   = [2, 3, 3, 6, 6, 6, 6, 6, 6, 6, 6, 6, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 1
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 2
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 0
llama_model_loader: - kv  19:               general.quantization_version u32              = 2
llama_model_loader: - type  f32:   65 tensors
llama_model_loader: - type q2_K:   65 tensors
llama_model_loader: - type q3_K:  160 tensors
llama_model_loader: - type q6_K:    1 tensors
print_info: file format = GGUF V2
print_info: file type   = Q2_K - Medium
print_info: file size   = 2.87 GiB (3.41 BPW) 
init_tokenizer: initializing tokenizer for type 1
load: control token:      2 '</s>' is not marked as EOG
load: control token:      1 '<s>' is not marked as EOG
load: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
load: special tokens cache size = 3
load: token to piece cache size = 0.1637 MB
print_info: arch             = llama
print_info: vocab_only       = 0
print_info: n_ctx_train      = 32768
print_info: n_embd           = 4096
print_info: n_layer          = 32
print_info: n_head           = 32
print_info: n_head_kv        = 8
print_info: n_rot            = 128
print_info: n_swa            = 0
print_info: n_swa_pattern    = 1
print_info: n_embd_head_k    = 128
print_info: n_embd_head_v    = 128
print_info: n_gqa            = 4
print_info: n_embd_k_gqa     = 1024
print_info: n_embd_v_gqa     = 1024
print_info: f_norm_eps       = 0.0e+00
print_info: f_norm_rms_eps   = 1.0e-05
print_info: f_clamp_kqv      = 0.0e+00
print_info: f_max_alibi_bias = 0.0e+00
print_info: f_logit_scale    = 0.0e+00
print_info: f_attn_scale     = 0.0e+00
print_info: n_ff             = 14336
print_info: n_expert         = 0
print_info: n_expert_used    = 0
print_info: causal attn      = 1
print_info: pooling type     = 0
print_info: rope type        = 0
print_info: rope scaling     = linear
print_info: freq_base_train  = 10000.0
print_info: freq_scale_train = 1
print_info: n_ctx_orig_yarn  = 32768
print_info: rope_finetuned   = unknown
print_info: ssm_d_conv       = 0
print_info: ssm_d_inner      = 0
print_info: ssm_d_state      = 0
print_info: ssm_dt_rank      = 0
print_info: ssm_dt_b_c_rms   = 0
print_info: model type       = 7B
print_info: model params     = 7.24 B
print_info: general.name     = mistralai_mistral-7b-instruct-v0.1
print_info: vocab type       = SPM
print_info: n_vocab          = 32000
print_info: n_merges         = 0
print_info: BOS token        = 1 '<s>'
print_info: EOS token        = 2 '</s>'
print_info: UNK token        = 0 '<unk>'
print_info: LF token         = 13 '<0x0A>'
print_info: EOG token        = 2 '</s>'
print_info: max token length = 48
load_tensors: loading model tensors, this can take a while... (mmap = true)
load_tensors: layer   0 assigned to device CPU, is_swa = 0
load_tensors: layer   1 assigned to device CPU, is_swa = 0
load_tensors: layer   2 assigned to device CPU, is_swa = 0
load_tensors: layer   3 assigned to device CPU, is_swa = 0
load_tensors: layer   4 assigned to device CPU, is_swa = 0
load_tensors: layer   5 assigned to device CPU, is_swa = 0
load_tensors: layer   6 assigned to device CPU, is_swa = 0
load_tensors: layer   7 assigned to device CPU, is_swa = 0
load_tensors: layer   8 assigned to device CPU, is_swa = 0
load_tensors: layer   9 assigned to device CPU, is_swa = 0
load_tensors: layer  10 assigned to device CPU, is_swa = 0
load_tensors: layer  11 assigned to device CPU, is_swa = 0
load_tensors: layer  12 assigned to device CPU, is_swa = 0
load_tensors: layer  13 assigned to device CPU, is_swa = 0
load_tensors: layer  14 assigned to device CPU, is_swa = 0
load_tensors: layer  15 assigned to device CPU, is_swa = 0
load_tensors: layer  16 assigned to device CPU, is_swa = 0
load_tensors: layer  17 assigned to device CPU, is_swa = 0
load_tensors: layer  18 assigned to device CPU, is_swa = 0
load_tensors: layer  19 assigned to device CPU, is_swa = 0
load_tensors: layer  20 assigned to device CPU, is_swa = 0
load_tensors: layer  21 assigned to device CPU, is_swa = 0
load_tensors: layer  22 assigned to device CPU, is_swa = 0
load_tensors: layer  23 assigned to device CPU, is_swa = 0
load_tensors: layer  24 assigned to device CPU, is_swa = 0
load_tensors: layer  25 assigned to device CPU, is_swa = 0
load_tensors: layer  26 assigned to device CPU, is_swa = 0
load_tensors: layer  27 assigned to device CPU, is_swa = 0
load_tensors: layer  28 assigned to device CPU, is_swa = 0
load_tensors: layer  29 assigned to device CPU, is_swa = 0
load_tensors: layer  30 assigned to device CPU, is_swa = 0
load_tensors: layer  31 assigned to device CPU, is_swa = 0
load_tensors: layer  32 assigned to device CPU, is_swa = 0
load_tensors: tensor 'token_embd.weight' (q2_K) (and 290 others) cannot be used with preferred buffer type CPU_AARCH64, using CPU instead
load_tensors:   CPU_Mapped model buffer size =  2939.57 MiB
..................................................................................................
llama_context: constructing llama_context
llama_context: n_batch is less than GGML_KQ_MASK_PAD - increasing to 64
llama_context: n_seq_max     = 1
llama_context: n_ctx         = 2048
llama_context: n_ctx_per_seq = 2048
llama_context: n_batch       = 64
llama_context: n_ubatch      = 8
llama_context: causal_attn   = 1
llama_context: flash_attn    = 0
llama_context: freq_base     = 10000.0
llama_context: freq_scale    = 1
llama_context: n_ctx_per_seq (2048) < n_ctx_train (32768) -- the full capacity of the model will not be utilized
set_abort_callback: call
llama_context:        CPU  output buffer size =     0.12 MiB
create_memory: n_ctx = 2048 (padded)
llama_kv_cache_unified: kv_size = 2048, type_k = 'f16', type_v = 'f16', n_layer = 32, can_shift = 1, padding = 32
llama_kv_cache_unified: layer   0: dev = CPU
llama_kv_cache_unified: layer   1: dev = CPU
llama_kv_cache_unified: layer   2: dev = CPU
llama_kv_cache_unified: layer   3: dev = CPU
llama_kv_cache_unified: layer   4: dev = CPU
llama_kv_cache_unified: layer   5: dev = CPU
llama_kv_cache_unified: layer   6: dev = CPU
llama_kv_cache_unified: layer   7: dev = CPU
llama_kv_cache_unified: layer   8: dev = CPU
llama_kv_cache_unified: layer   9: dev = CPU
llama_kv_cache_unified: layer  10: dev = CPU
llama_kv_cache_unified: layer  11: dev = CPU
llama_kv_cache_unified: layer  12: dev = CPU
llama_kv_cache_unified: layer  13: dev = CPU
llama_kv_cache_unified: layer  14: dev = CPU
llama_kv_cache_unified: layer  15: dev = CPU
llama_kv_cache_unified: layer  16: dev = CPU
llama_kv_cache_unified: layer  17: dev = CPU
llama_kv_cache_unified: layer  18: dev = CPU
llama_kv_cache_unified: layer  19: dev = CPU
llama_kv_cache_unified: layer  20: dev = CPU
llama_kv_cache_unified: layer  21: dev = CPU
llama_kv_cache_unified: layer  22: dev = CPU
llama_kv_cache_unified: layer  23: dev = CPU
llama_kv_cache_unified: layer  24: dev = CPU
llama_kv_cache_unified: layer  25: dev = CPU
llama_kv_cache_unified: layer  26: dev = CPU
llama_kv_cache_unified: layer  27: dev = CPU
llama_kv_cache_unified: layer  28: dev = CPU
llama_kv_cache_unified: layer  29: dev = CPU
llama_kv_cache_unified: layer  30: dev = CPU
llama_kv_cache_unified: layer  31: dev = CPU
llama_kv_cache_unified:        CPU KV buffer size =   256.00 MiB
llama_kv_cache_unified: KV self size  =  256.00 MiB, K (f16):  128.00 MiB, V (f16):  128.00 MiB
llama_context: enumerating backends
llama_context: backend_ptrs.size() = 1
llama_context: max_nodes = 65536
llama_context: worst-case: n_tokens = 8, n_seqs = 1, n_outputs = 0
llama_context: reserving graph for n_tokens = 8, n_seqs = 1
llama_context: reserving graph for n_tokens = 1, n_seqs = 1
llama_context: reserving graph for n_tokens = 8, n_seqs = 1
llama_context:        CPU compute buffer size =     3.00 MiB
llama_context: graph nodes  = 1094
llama_context: graph splits = 1
CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
Model metadata: {'general.name': 'mistralai_mistral-7b-instruct-v0.1', 'general.architecture': 'llama', 'llama.context_length': '32768', 'llama.rope.dimension_count': '128', 'llama.embedding_length': '4096', 'llama.block_count': '32', 'llama.feed_forward_length': '14336', 'llama.attention.head_count': '32', 'tokenizer.ggml.eos_token_id': '2', 'general.file_type': '10', 'llama.attention.head_count_kv': '8', 'llama.attention.layer_norm_rms_epsilon': '0.000010', 'llama.rope.freq_base': '10000.000000', 'tokenizer.ggml.model': 'llama', 'general.quantization_version': '2', 'tokenizer.ggml.bos_token_id': '1', 'tokenizer.ggml.unknown_token_id': '0'}
Using fallback chat format: llama-2
Building index from SQLite database...
Loading embedding model: intfloat/e5-small-v2 on CPU
Index saved to faiss_index
llama_model_loader: loaded meta data with 20 key-value pairs and 291 tensors from C:/Users/Prakhar Srivastava/Desktop/PROJECTS/askMUJ/models/Mistral/mistral-7b-instruct-v0.1.Q2_K.gguf (version GGUF V2)
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = llama
llama_model_loader: - kv   1:                               general.name str              = mistralai_mistral-7b-instruct-v0.1
llama_model_loader: - kv   2:                       llama.context_length u32              = 32768
llama_model_loader: - kv   3:                     llama.embedding_length u32              = 4096
llama_model_loader: - kv   4:                          llama.block_count u32              = 32
llama_model_loader: - kv   5:                  llama.feed_forward_length u32              = 14336
llama_model_loader: - kv   6:                 llama.rope.dimension_count u32              = 128
llama_model_loader: - kv   7:                 llama.attention.head_count u32              = 32
llama_model_loader: - kv   8:              llama.attention.head_count_kv u32              = 8
llama_model_loader: - kv   9:     llama.attention.layer_norm_rms_epsilon f32              = 0.000010
llama_model_loader: - kv  10:                       llama.rope.freq_base f32              = 10000.000000
llama_model_loader: - kv  11:                          general.file_type u32              = 10
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,32000]   = ["<unk>", "<s>", "</s>", "<0x00>", "<...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,32000]   = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,32000]   = [2, 3, 3, 6, 6, 6, 6, 6, 6, 6, 6, 6, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 1
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 2
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 0
llama_model_loader: - kv  19:               general.quantization_version u32              = 2
llama_model_loader: - type  f32:   65 tensors
llama_model_loader: - type q2_K:   65 tensors
llama_model_loader: - type q3_K:  160 tensors
llama_model_loader: - type q6_K:    1 tensors
print_info: file format = GGUF V2
print_info: file type   = Q2_K - Medium
print_info: file size   = 2.87 GiB (3.41 BPW) 
init_tokenizer: initializing tokenizer for type 1
load: control token:      2 '</s>' is not marked as EOG
load: control token:      1 '<s>' is not marked as EOG
load: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
load: special tokens cache size = 3
load: token to piece cache size = 0.1637 MB
print_info: arch             = llama
print_info: vocab_only       = 0
print_info: n_ctx_train      = 32768
print_info: n_embd           = 4096
print_info: n_layer          = 32
print_info: n_head           = 32
print_info: n_head_kv        = 8
print_info: n_rot            = 128
print_info: n_swa            = 0
print_info: n_swa_pattern    = 1
print_info: n_embd_head_k    = 128
print_info: n_embd_head_v    = 128
print_info: n_gqa            = 4
print_info: n_embd_k_gqa     = 1024
print_info: n_embd_v_gqa     = 1024
print_info: f_norm_eps       = 0.0e+00
print_info: f_norm_rms_eps   = 1.0e-05
print_info: f_clamp_kqv      = 0.0e+00
print_info: f_max_alibi_bias = 0.0e+00
print_info: f_logit_scale    = 0.0e+00
print_info: f_attn_scale     = 0.0e+00
print_info: n_ff             = 14336
print_info: n_expert         = 0
print_info: n_expert_used    = 0
print_info: causal attn      = 1
print_info: pooling type     = 0
print_info: rope type        = 0
print_info: rope scaling     = linear
print_info: freq_base_train  = 10000.0
print_info: freq_scale_train = 1
print_info: n_ctx_orig_yarn  = 32768
print_info: rope_finetuned   = unknown
print_info: ssm_d_conv       = 0
print_info: ssm_d_inner      = 0
print_info: ssm_d_state      = 0
print_info: ssm_dt_rank      = 0
print_info: ssm_dt_b_c_rms   = 0
print_info: model type       = 7B
print_info: model params     = 7.24 B
print_info: general.name     = mistralai_mistral-7b-instruct-v0.1
print_info: vocab type       = SPM
print_info: n_vocab          = 32000
print_info: n_merges         = 0
print_info: BOS token        = 1 '<s>'
print_info: EOS token        = 2 '</s>'
print_info: UNK token        = 0 '<unk>'
print_info: LF token         = 13 '<0x0A>'
print_info: EOG token        = 2 '</s>'
print_info: max token length = 48
load_tensors: loading model tensors, this can take a while... (mmap = true)
load_tensors: layer   0 assigned to device CPU, is_swa = 0
load_tensors: layer   1 assigned to device CPU, is_swa = 0
load_tensors: layer   2 assigned to device CPU, is_swa = 0
load_tensors: layer   3 assigned to device CPU, is_swa = 0
load_tensors: layer   4 assigned to device CPU, is_swa = 0
load_tensors: layer   5 assigned to device CPU, is_swa = 0
load_tensors: layer   6 assigned to device CPU, is_swa = 0
load_tensors: layer   7 assigned to device CPU, is_swa = 0
load_tensors: layer   8 assigned to device CPU, is_swa = 0
load_tensors: layer   9 assigned to device CPU, is_swa = 0
load_tensors: layer  10 assigned to device CPU, is_swa = 0
load_tensors: layer  11 assigned to device CPU, is_swa = 0
load_tensors: layer  12 assigned to device CPU, is_swa = 0
load_tensors: layer  13 assigned to device CPU, is_swa = 0
load_tensors: layer  14 assigned to device CPU, is_swa = 0
load_tensors: layer  15 assigned to device CPU, is_swa = 0
load_tensors: layer  16 assigned to device CPU, is_swa = 0
load_tensors: layer  17 assigned to device CPU, is_swa = 0
load_tensors: layer  18 assigned to device CPU, is_swa = 0
load_tensors: layer  19 assigned to device CPU, is_swa = 0
load_tensors: layer  20 assigned to device CPU, is_swa = 0
load_tensors: layer  21 assigned to device CPU, is_swa = 0
load_tensors: layer  22 assigned to device CPU, is_swa = 0
load_tensors: layer  23 assigned to device CPU, is_swa = 0
load_tensors: layer  24 assigned to device CPU, is_swa = 0
load_tensors: layer  25 assigned to device CPU, is_swa = 0
load_tensors: layer  26 assigned to device CPU, is_swa = 0
load_tensors: layer  27 assigned to device CPU, is_swa = 0
load_tensors: layer  28 assigned to device CPU, is_swa = 0
load_tensors: layer  29 assigned to device CPU, is_swa = 0
load_tensors: layer  30 assigned to device CPU, is_swa = 0
load_tensors: layer  31 assigned to device CPU, is_swa = 0
load_tensors: layer  32 assigned to device CPU, is_swa = 0
load_tensors: tensor 'token_embd.weight' (q2_K) (and 290 others) cannot be used with preferred buffer type CPU_AARCH64, using CPU instead
load_tensors:   CPU_Mapped model buffer size =  2939.57 MiB
..................................................................................................
llama_context: constructing llama_context
llama_context: n_batch is less than GGML_KQ_MASK_PAD - increasing to 64
llama_context: n_seq_max     = 1
llama_context: n_ctx         = 2048
llama_context: n_ctx_per_seq = 2048
llama_context: n_batch       = 64
llama_context: n_ubatch      = 8
llama_context: causal_attn   = 1
llama_context: flash_attn    = 0
llama_context: freq_base     = 10000.0
llama_context: freq_scale    = 1
llama_context: n_ctx_per_seq (2048) < n_ctx_train (32768) -- the full capacity of the model will not be utilized
set_abort_callback: call
llama_context:        CPU  output buffer size =     0.12 MiB
create_memory: n_ctx = 2048 (padded)
llama_kv_cache_unified: kv_size = 2048, type_k = 'f16', type_v = 'f16', n_layer = 32, can_shift = 1, padding = 32
llama_kv_cache_unified: layer   0: dev = CPU
llama_kv_cache_unified: layer   1: dev = CPU
llama_kv_cache_unified: layer   2: dev = CPU
llama_kv_cache_unified: layer   3: dev = CPU
llama_kv_cache_unified: layer   4: dev = CPU
llama_kv_cache_unified: layer   5: dev = CPU
llama_kv_cache_unified: layer   6: dev = CPU
llama_kv_cache_unified: layer   7: dev = CPU
llama_kv_cache_unified: layer   8: dev = CPU
llama_kv_cache_unified: layer   9: dev = CPU
llama_kv_cache_unified: layer  10: dev = CPU
llama_kv_cache_unified: layer  11: dev = CPU
llama_kv_cache_unified: layer  12: dev = CPU
llama_kv_cache_unified: layer  13: dev = CPU
llama_kv_cache_unified: layer  14: dev = CPU
llama_kv_cache_unified: layer  15: dev = CPU
llama_kv_cache_unified: layer  16: dev = CPU
llama_kv_cache_unified: layer  17: dev = CPU
llama_kv_cache_unified: layer  18: dev = CPU
llama_kv_cache_unified: layer  19: dev = CPU
llama_kv_cache_unified: layer  20: dev = CPU
llama_kv_cache_unified: layer  21: dev = CPU
llama_kv_cache_unified: layer  22: dev = CPU
llama_kv_cache_unified: layer  23: dev = CPU
llama_kv_cache_unified: layer  24: dev = CPU
llama_kv_cache_unified: layer  25: dev = CPU
llama_kv_cache_unified: layer  26: dev = CPU
llama_kv_cache_unified: layer  27: dev = CPU
llama_kv_cache_unified: layer  28: dev = CPU
llama_kv_cache_unified: layer  29: dev = CPU
llama_kv_cache_unified: layer  30: dev = CPU
llama_kv_cache_unified: layer  31: dev = CPU
llama_kv_cache_unified:        CPU KV buffer size =   256.00 MiB
llama_kv_cache_unified: KV self size  =  256.00 MiB, K (f16):  128.00 MiB, V (f16):  128.00 MiB
llama_context: enumerating backends
llama_context: backend_ptrs.size() = 1
llama_context: max_nodes = 65536
llama_context: worst-case: n_tokens = 8, n_seqs = 1, n_outputs = 0
llama_context: reserving graph for n_tokens = 8, n_seqs = 1
llama_context: reserving graph for n_tokens = 1, n_seqs = 1
llama_context: reserving graph for n_tokens = 8, n_seqs = 1
llama_context:        CPU compute buffer size =     3.00 MiB
llama_context: graph nodes  = 1094
llama_context: graph splits = 1
CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
Model metadata: {'general.name': 'mistralai_mistral-7b-instruct-v0.1', 'general.architecture': 'llama', 'llama.context_length': '32768', 'llama.rope.dimension_count': '128', 'llama.embedding_length': '4096', 'llama.block_count': '32', 'llama.feed_forward_length': '14336', 'llama.attention.head_count': '32', 'tokenizer.ggml.eos_token_id': '2', 'general.file_type': '10', 'llama.attention.head_count_kv': '8', 'llama.attention.layer_norm_rms_epsilon': '0.000010', 'llama.rope.freq_base': '10000.000000', 'tokenizer.ggml.model': 'llama', 'general.quantization_version': '2', 'tokenizer.ggml.bos_token_id': '1', 'tokenizer.ggml.unknown_token_id': '0'}
Using fallback chat format: llama-2
Building index from SQLite database...
Loading embedding model: intfloat/e5-small-v2 on CPU
Index saved to faiss_index
LLM is explicitly disabled. Using MockLLM.
llama_model_loader: loaded meta data with 24 key-value pairs and 291 tensors from C:/Users/Prakhar Srivastava/Desktop/PROJECTS/askMUJ/models/Mistral/mistral-7b-instruct-v0.2.Q4_K_M.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = llama
llama_model_loader: - kv   1:                               general.name str              = mistralai_mistral-7b-instruct-v0.2
llama_model_loader: - kv   2:                       llama.context_length u32              = 32768
llama_model_loader: - kv   3:                     llama.embedding_length u32              = 4096
llama_model_loader: - kv   4:                          llama.block_count u32              = 32
llama_model_loader: - kv   5:                  llama.feed_forward_length u32              = 14336
llama_model_loader: - kv   6:                 llama.rope.dimension_count u32              = 128
llama_model_loader: - kv   7:                 llama.attention.head_count u32              = 32
llama_model_loader: - kv   8:              llama.attention.head_count_kv u32              = 8
llama_model_loader: - kv   9:     llama.attention.layer_norm_rms_epsilon f32              = 0.000010
llama_model_loader: - kv  10:                       llama.rope.freq_base f32              = 1000000.000000
llama_model_loader: - kv  11:                          general.file_type u32              = 15
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,32000]   = ["<unk>", "<s>", "</s>", "<0x00>", "<...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,32000]   = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,32000]   = [2, 3, 3, 6, 6, 6, 6, 6, 6, 6, 6, 6, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 1
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 2
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 0
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% for message in mess...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - type  f32:   65 tensors
llama_model_loader: - type q4_K:  193 tensors
llama_model_loader: - type q6_K:   33 tensors
print_info: file format = GGUF V3 (latest)
print_info: file type   = Q4_K - Medium
print_info: file size   = 4.07 GiB (4.83 BPW) 
init_tokenizer: initializing tokenizer for type 1
load: control token:      2 '</s>' is not marked as EOG
load: control token:      1 '<s>' is not marked as EOG
load: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
load: special tokens cache size = 3
load: token to piece cache size = 0.1637 MB
print_info: arch             = llama
print_info: vocab_only       = 0
print_info: n_ctx_train      = 32768
print_info: n_embd           = 4096
print_info: n_layer          = 32
print_info: n_head           = 32
print_info: n_head_kv        = 8
print_info: n_rot            = 128
print_info: n_swa            = 0
print_info: n_swa_pattern    = 1
print_info: n_embd_head_k    = 128
print_info: n_embd_head_v    = 128
print_info: n_gqa            = 4
print_info: n_embd_k_gqa     = 1024
print_info: n_embd_v_gqa     = 1024
print_info: f_norm_eps       = 0.0e+00
print_info: f_norm_rms_eps   = 1.0e-05
print_info: f_clamp_kqv      = 0.0e+00
print_info: f_max_alibi_bias = 0.0e+00
print_info: f_logit_scale    = 0.0e+00
print_info: f_attn_scale     = 0.0e+00
print_info: n_ff             = 14336
print_info: n_expert         = 0
print_info: n_expert_used    = 0
print_info: causal attn      = 1
print_info: pooling type     = 0
print_info: rope type        = 0
print_info: rope scaling     = linear
print_info: freq_base_train  = 1000000.0
print_info: freq_scale_train = 1
print_info: n_ctx_orig_yarn  = 32768
print_info: rope_finetuned   = unknown
print_info: ssm_d_conv       = 0
print_info: ssm_d_inner      = 0
print_info: ssm_d_state      = 0
print_info: ssm_dt_rank      = 0
print_info: ssm_dt_b_c_rms   = 0
print_info: model type       = 7B
print_info: model params     = 7.24 B
print_info: general.name     = mistralai_mistral-7b-instruct-v0.2
print_info: vocab type       = SPM
print_info: n_vocab          = 32000
print_info: n_merges         = 0
print_info: BOS token        = 1 '<s>'
print_info: EOS token        = 2 '</s>'
print_info: UNK token        = 0 '<unk>'
print_info: PAD token        = 0 '<unk>'
print_info: LF token         = 13 '<0x0A>'
print_info: EOG token        = 2 '</s>'
print_info: max token length = 48
load_tensors: loading model tensors, this can take a while... (mmap = true)
load_tensors: layer   0 assigned to device CPU, is_swa = 0
load_tensors: layer   1 assigned to device CPU, is_swa = 0
load_tensors: layer   2 assigned to device CPU, is_swa = 0
load_tensors: layer   3 assigned to device CPU, is_swa = 0
load_tensors: layer   4 assigned to device CPU, is_swa = 0
load_tensors: layer   5 assigned to device CPU, is_swa = 0
load_tensors: layer   6 assigned to device CPU, is_swa = 0
load_tensors: layer   7 assigned to device CPU, is_swa = 0
load_tensors: layer   8 assigned to device CPU, is_swa = 0
load_tensors: layer   9 assigned to device CPU, is_swa = 0
load_tensors: layer  10 assigned to device CPU, is_swa = 0
load_tensors: layer  11 assigned to device CPU, is_swa = 0
load_tensors: layer  12 assigned to device CPU, is_swa = 0
load_tensors: layer  13 assigned to device CPU, is_swa = 0
load_tensors: layer  14 assigned to device CPU, is_swa = 0
load_tensors: layer  15 assigned to device CPU, is_swa = 0
load_tensors: layer  16 assigned to device CPU, is_swa = 0
load_tensors: layer  17 assigned to device CPU, is_swa = 0
load_tensors: layer  18 assigned to device CPU, is_swa = 0
load_tensors: layer  19 assigned to device CPU, is_swa = 0
load_tensors: layer  20 assigned to device CPU, is_swa = 0
load_tensors: layer  21 assigned to device CPU, is_swa = 0
load_tensors: layer  22 assigned to device CPU, is_swa = 0
load_tensors: layer  23 assigned to device CPU, is_swa = 0
load_tensors: layer  24 assigned to device CPU, is_swa = 0
load_tensors: layer  25 assigned to device CPU, is_swa = 0
load_tensors: layer  26 assigned to device CPU, is_swa = 0
load_tensors: layer  27 assigned to device CPU, is_swa = 0
load_tensors: layer  28 assigned to device CPU, is_swa = 0
load_tensors: layer  29 assigned to device CPU, is_swa = 0
load_tensors: layer  30 assigned to device CPU, is_swa = 0
load_tensors: layer  31 assigned to device CPU, is_swa = 0
load_tensors: layer  32 assigned to device CPU, is_swa = 0
load_tensors: tensor 'token_embd.weight' (q4_K) (and 98 others) cannot be used with preferred buffer type CPU_AARCH64, using CPU instead
load_tensors:  CPU_AARCH64 model buffer size =  3204.00 MiB
load_tensors:   CPU_Mapped model buffer size =  4165.37 MiB
repack: repack tensor blk.0.attn_q.weight with q4_K_8x8
repack: repack tensor blk.0.attn_k.weight with q4_K_8x8
repack: repack tensor blk.0.attn_output.weight with q4_K_8x8
repack: repack tensor blk.0.ffn_gate.weight with q4_K_8x8
.repack: repack tensor blk.0.ffn_up.weight with q4_K_8x8
repack: repack tensor blk.1.attn_q.weight with q4_K_8x8
.repack: repack tensor blk.1.attn_k.weight with q4_K_8x8
repack: repack tensor blk.1.attn_output.weight with q4_K_8x8
repack: repack tensor blk.1.ffn_gate.weight with q4_K_8x8
.repack: repack tensor blk.1.ffn_up.weight with q4_K_8x8
repack: repack tensor blk.2.attn_q.weight with q4_K_8x8
.repack: repack tensor blk.2.attn_k.weight with q4_K_8x8
repack: repack tensor blk.2.attn_output.weight with q4_K_8x8
repack: repack tensor blk.2.ffn_gate.weight with q4_K_8x8
.repack: repack tensor blk.2.ffn_up.weight with q4_K_8x8
repack: repack tensor blk.3.attn_q.weight with q4_K_8x8
.repack: repack tensor blk.3.attn_k.weight with q4_K_8x8
repack: repack tensor blk.3.attn_output.weight with q4_K_8x8
repack: repack tensor blk.3.ffn_gate.weight with q4_K_8x8
.repack: repack tensor blk.3.ffn_up.weight with q4_K_8x8
repack: repack tensor blk.4.attn_q.weight with q4_K_8x8
.repack: repack tensor blk.4.attn_k.weight with q4_K_8x8
repack: repack tensor blk.4.attn_v.weight with q4_K_8x8
repack: repack tensor blk.4.attn_output.weight with q4_K_8x8
repack: repack tensor blk.4.ffn_gate.weight with q4_K_8x8
.repack: repack tensor blk.4.ffn_down.weight with q4_K_8x8
.repack: repack tensor blk.4.ffn_up.weight with q4_K_8x8
repack: repack tensor blk.5.attn_q.weight with q4_K_8x8
.repack: repack tensor blk.5.attn_k.weight with q4_K_8x8
repack: repack tensor blk.5.attn_v.weight with q4_K_8x8
repack: repack tensor blk.5.attn_output.weight with q4_K_8x8
repack: repack tensor blk.5.ffn_gate.weight with q4_K_8x8
.repack: repack tensor blk.5.ffn_down.weight with q4_K_8x8
repack: repack tensor blk.5.ffn_up.weight with q4_K_8x8
.repack: repack tensor blk.6.attn_q.weight with q4_K_8x8
repack: repack tensor blk.6.attn_k.weight with q4_K_8x8
repack: repack tensor blk.6.attn_output.weight with q4_K_8x8
.repack: repack tensor blk.6.ffn_gate.weight with q4_K_8x8
repack: repack tensor blk.6.ffn_up.weight with q4_K_8x8
.repack: repack tensor blk.7.attn_q.weight with q4_K_8x8
repack: repack tensor blk.7.attn_k.weight with q4_K_8x8
repack: repack tensor blk.7.attn_v.weight with q4_K_8x8
repack: repack tensor blk.7.attn_output.weight with q4_K_8x8
.repack: repack tensor blk.7.ffn_gate.weight with q4_K_8x8
repack: repack tensor blk.7.ffn_down.weight with q4_K_8x8
.repack: repack tensor blk.7.ffn_up.weight with q4_K_8x8
.repack: repack tensor blk.8.attn_q.weight with q4_K_8x8
repack: repack tensor blk.8.attn_k.weight with q4_K_8x8
repack: repack tensor blk.8.attn_v.weight with q4_K_8x8
repack: repack tensor blk.8.attn_output.weight with q4_K_8x8
repack: repack tensor blk.8.ffn_gate.weight with q4_K_8x8
.repack: repack tensor blk.8.ffn_down.weight with q4_K_8x8
.repack: repack tensor blk.8.ffn_up.weight with q4_K_8x8
.repack: repack tensor blk.9.attn_q.weight with q4_K_8x8
repack: repack tensor blk.9.attn_k.weight with q4_K_8x8
repack: repack tensor blk.9.attn_output.weight with q4_K_8x8
repack: repack tensor blk.9.ffn_gate.weight with q4_K_8x8
.repack: repack tensor blk.9.ffn_up.weight with q4_K_8x8
.repack: repack tensor blk.10.attn_q.weight with q4_K_8x8
repack: repack tensor blk.10.attn_k.weight with q4_K_8x8
repack: repack tensor blk.10.attn_v.weight with q4_K_8x8
repack: repack tensor blk.10.attn_output.weight with q4_K_8x8
repack: repack tensor blk.10.ffn_gate.weight with q4_K_8x8
.repack: repack tensor blk.10.ffn_down.weight with q4_K_8x8
.repack: repack tensor blk.10.ffn_up.weight with q4_K_8x8
.repack: repack tensor blk.11.attn_q.weight with q4_K_8x8
repack: repack tensor blk.11.attn_k.weight with q4_K_8x8
repack: repack tensor blk.11.attn_v.weight with q4_K_8x8
repack: repack tensor blk.11.attn_output.weight with q4_K_8x8
repack: repack tensor blk.11.ffn_gate.weight with q4_K_8x8
.repack: repack tensor blk.11.ffn_down.weight with q4_K_8x8
.repack: repack tensor blk.11.ffn_up.weight with q4_K_8x8
repack: repack tensor blk.12.attn_q.weight with q4_K_8x8
.repack: repack tensor blk.12.attn_k.weight with q4_K_8x8
repack: repack tensor blk.12.attn_output.weight with q4_K_8x8
repack: repack tensor blk.12.ffn_gate.weight with q4_K_8x8
.repack: repack tensor blk.12.ffn_up.weight with q4_K_8x8
repack: repack tensor blk.13.attn_q.weight with q4_K_8x8
.repack: repack tensor blk.13.attn_k.weight with q4_K_8x8
repack: repack tensor blk.13.attn_v.weight with q4_K_8x8
repack: repack tensor blk.13.attn_output.weight with q4_K_8x8
repack: repack tensor blk.13.ffn_gate.weight with q4_K_8x8
.repack: repack tensor blk.13.ffn_down.weight with q4_K_8x8
repack: repack tensor blk.13.ffn_up.weight with q4_K_8x8
.repack: repack tensor blk.14.attn_q.weight with q4_K_8x8
repack: repack tensor blk.14.attn_k.weight with q4_K_8x8
repack: repack tensor blk.14.attn_v.weight with q4_K_8x8
repack: repack tensor blk.14.attn_output.weight with q4_K_8x8
.repack: repack tensor blk.14.ffn_gate.weight with q4_K_8x8
repack: repack tensor blk.14.ffn_down.weight with q4_K_8x8
.repack: repack tensor blk.14.ffn_up.weight with q4_K_8x8
.repack: repack tensor blk.15.attn_q.weight with q4_K_8x8
repack: repack tensor blk.15.attn_k.weight with q4_K_8x8
repack: repack tensor blk.15.attn_output.weight with q4_K_8x8
repack: repack tensor blk.15.ffn_gate.weight with q4_K_8x8
.repack: repack tensor blk.15.ffn_up.weight with q4_K_8x8
.repack: repack tensor blk.16.attn_q.weight with q4_K_8x8
repack: repack tensor blk.16.attn_k.weight with q4_K_8x8
repack: repack tensor blk.16.attn_v.weight with q4_K_8x8
repack: repack tensor blk.16.attn_output.weight with q4_K_8x8
.repack: repack tensor blk.16.ffn_gate.weight with q4_K_8x8
repack: repack tensor blk.16.ffn_down.weight with q4_K_8x8
.repack: repack tensor blk.16.ffn_up.weight with q4_K_8x8
.repack: repack tensor blk.17.attn_q.weight with q4_K_8x8
repack: repack tensor blk.17.attn_k.weight with q4_K_8x8
repack: repack tensor blk.17.attn_v.weight with q4_K_8x8
repack: repack tensor blk.17.attn_output.weight with q4_K_8x8
repack: repack tensor blk.17.ffn_gate.weight with q4_K_8x8
.repack: repack tensor blk.17.ffn_down.weight with q4_K_8x8
.repack: repack tensor blk.17.ffn_up.weight with q4_K_8x8
.repack: repack tensor blk.18.attn_q.weight with q4_K_8x8
repack: repack tensor blk.18.attn_k.weight with q4_K_8x8
repack: repack tensor blk.18.attn_output.weight with q4_K_8x8
repack: repack tensor blk.18.ffn_gate.weight with q4_K_8x8
.repack: repack tensor blk.18.ffn_up.weight with q4_K_8x8
.repack: repack tensor blk.19.attn_q.weight with q4_K_8x8
repack: repack tensor blk.19.attn_k.weight with q4_K_8x8
repack: repack tensor blk.19.attn_v.weight with q4_K_8x8
repack: repack tensor blk.19.attn_output.weight with q4_K_8x8
repack: repack tensor blk.19.ffn_gate.weight with q4_K_8x8
.repack: repack tensor blk.19.ffn_down.weight with q4_K_8x8
.repack: repack tensor blk.19.ffn_up.weight with q4_K_8x8
repack: repack tensor blk.20.attn_q.weight with q4_K_8x8
.repack: repack tensor blk.20.attn_k.weight with q4_K_8x8
repack: repack tensor blk.20.attn_v.weight with q4_K_8x8
repack: repack tensor blk.20.attn_output.weight with q4_K_8x8
repack: repack tensor blk.20.ffn_gate.weight with q4_K_8x8
.repack: repack tensor blk.20.ffn_down.weight with q4_K_8x8
repack: repack tensor blk.20.ffn_up.weight with q4_K_8x8
.repack: repack tensor blk.21.attn_q.weight with q4_K_8x8
repack: repack tensor blk.21.attn_k.weight with q4_K_8x8
repack: repack tensor blk.21.attn_output.weight with q4_K_8x8
.repack: repack tensor blk.21.ffn_gate.weight with q4_K_8x8
repack: repack tensor blk.21.ffn_up.weight with q4_K_8x8
.repack: repack tensor blk.22.attn_q.weight with q4_K_8x8
repack: repack tensor blk.22.attn_k.weight with q4_K_8x8
repack: repack tensor blk.22.attn_v.weight with q4_K_8x8
.repack: repack tensor blk.22.attn_output.weight with q4_K_8x8
repack: repack tensor blk.22.ffn_gate.weight with q4_K_8x8
repack: repack tensor blk.22.ffn_down.weight with q4_K_8x8
.repack: repack tensor blk.22.ffn_up.weight with q4_K_8x8
.repack: repack tensor blk.23.attn_q.weight with q4_K_8x8
repack: repack tensor blk.23.attn_k.weight with q4_K_8x8
repack: repack tensor blk.23.attn_v.weight with q4_K_8x8
repack: repack tensor blk.23.attn_output.weight with q4_K_8x8
.repack: repack tensor blk.23.ffn_gate.weight with q4_K_8x8
repack: repack tensor blk.23.ffn_down.weight with q4_K_8x8
.repack: repack tensor blk.23.ffn_up.weight with q4_K_8x8
.repack: repack tensor blk.24.attn_q.weight with q4_K_8x8
repack: repack tensor blk.24.attn_k.weight with q4_K_8x8
repack: repack tensor blk.24.attn_output.weight with q4_K_8x8
repack: repack tensor blk.24.ffn_gate.weight with q4_K_8x8
.repack: repack tensor blk.24.ffn_up.weight with q4_K_8x8
.repack: repack tensor blk.25.attn_q.weight with q4_K_8x8
repack: repack tensor blk.25.attn_k.weight with q4_K_8x8
repack: repack tensor blk.25.attn_v.weight with q4_K_8x8
repack: repack tensor blk.25.attn_output.weight with q4_K_8x8
repack: repack tensor blk.25.ffn_gate.weight with q4_K_8x8
.repack: repack tensor blk.25.ffn_down.weight with q4_K_8x8
.repack: repack tensor blk.25.ffn_up.weight with q4_K_8x8
.repack: repack tensor blk.26.attn_q.weight with q4_K_8x8
repack: repack tensor blk.26.attn_k.weight with q4_K_8x8
repack: repack tensor blk.26.attn_v.weight with q4_K_8x8
repack: repack tensor blk.26.attn_output.weight with q4_K_8x8
repack: repack tensor blk.26.ffn_gate.weight with q4_K_8x8
.repack: repack tensor blk.26.ffn_down.weight with q4_K_8x8
.repack: repack tensor blk.26.ffn_up.weight with q4_K_8x8
repack: repack tensor blk.27.attn_q.weight with q4_K_8x8
.repack: repack tensor blk.27.attn_k.weight with q4_K_8x8
repack: repack tensor blk.27.attn_output.weight with q4_K_8x8
repack: repack tensor blk.27.ffn_gate.weight with q4_K_8x8
.repack: repack tensor blk.27.ffn_up.weight with q4_K_8x8
repack: repack tensor blk.28.attn_q.weight with q4_K_8x8
.repack: repack tensor blk.28.attn_k.weight with q4_K_8x8
repack: repack tensor blk.28.attn_output.weight with q4_K_8x8
repack: repack tensor blk.28.ffn_gate.weight with q4_K_8x8
.repack: repack tensor blk.28.ffn_up.weight with q4_K_8x8
repack: repack tensor blk.29.attn_q.weight with q4_K_8x8
.repack: repack tensor blk.29.attn_k.weight with q4_K_8x8
repack: repack tensor blk.29.attn_output.weight with q4_K_8x8
repack: repack tensor blk.29.ffn_gate.weight with q4_K_8x8
.repack: repack tensor blk.29.ffn_up.weight with q4_K_8x8
repack: repack tensor blk.30.attn_q.weight with q4_K_8x8
.repack: repack tensor blk.30.attn_k.weight with q4_K_8x8
repack: repack tensor blk.30.attn_output.weight with q4_K_8x8
repack: repack tensor blk.30.ffn_gate.weight with q4_K_8x8
.repack: repack tensor blk.30.ffn_up.weight with q4_K_8x8
repack: repack tensor blk.31.attn_q.weight with q4_K_8x8
.repack: repack tensor blk.31.attn_k.weight with q4_K_8x8
repack: repack tensor blk.31.attn_output.weight with q4_K_8x8
repack: repack tensor blk.31.ffn_gate.weight with q4_K_8x8
.repack: repack tensor blk.31.ffn_up.weight with q4_K_8x8
...................
llama_context: constructing llama_context
llama_context: n_batch is less than GGML_KQ_MASK_PAD - increasing to 64
llama_context: n_seq_max     = 1
llama_context: n_ctx         = 2048
llama_context: n_ctx_per_seq = 2048
llama_context: n_batch       = 64
llama_context: n_ubatch      = 8
llama_context: causal_attn   = 1
llama_context: flash_attn    = 0
llama_context: freq_base     = 1000000.0
llama_context: freq_scale    = 1
llama_context: n_ctx_per_seq (2048) < n_ctx_train (32768) -- the full capacity of the model will not be utilized
set_abort_callback: call
llama_context:        CPU  output buffer size =     0.12 MiB
create_memory: n_ctx = 2048 (padded)
llama_kv_cache_unified: kv_size = 2048, type_k = 'f16', type_v = 'f16', n_layer = 32, can_shift = 1, padding = 32
llama_kv_cache_unified: layer   0: dev = CPU
llama_kv_cache_unified: layer   1: dev = CPU
llama_kv_cache_unified: layer   2: dev = CPU
llama_kv_cache_unified: layer   3: dev = CPU
llama_kv_cache_unified: layer   4: dev = CPU
llama_kv_cache_unified: layer   5: dev = CPU
llama_kv_cache_unified: layer   6: dev = CPU
llama_kv_cache_unified: layer   7: dev = CPU
llama_kv_cache_unified: layer   8: dev = CPU
llama_kv_cache_unified: layer   9: dev = CPU
llama_kv_cache_unified: layer  10: dev = CPU
llama_kv_cache_unified: layer  11: dev = CPU
llama_kv_cache_unified: layer  12: dev = CPU
llama_kv_cache_unified: layer  13: dev = CPU
llama_kv_cache_unified: layer  14: dev = CPU
llama_kv_cache_unified: layer  15: dev = CPU
llama_kv_cache_unified: layer  16: dev = CPU
llama_kv_cache_unified: layer  17: dev = CPU
llama_kv_cache_unified: layer  18: dev = CPU
llama_kv_cache_unified: layer  19: dev = CPU
llama_kv_cache_unified: layer  20: dev = CPU
llama_kv_cache_unified: layer  21: dev = CPU
llama_kv_cache_unified: layer  22: dev = CPU
llama_kv_cache_unified: layer  23: dev = CPU
llama_kv_cache_unified: layer  24: dev = CPU
llama_kv_cache_unified: layer  25: dev = CPU
llama_kv_cache_unified: layer  26: dev = CPU
llama_kv_cache_unified: layer  27: dev = CPU
llama_kv_cache_unified: layer  28: dev = CPU
llama_kv_cache_unified: layer  29: dev = CPU
llama_kv_cache_unified: layer  30: dev = CPU
llama_kv_cache_unified: layer  31: dev = CPU
llama_kv_cache_unified:        CPU KV buffer size =   256.00 MiB
llama_kv_cache_unified: KV self size  =  256.00 MiB, K (f16):  128.00 MiB, V (f16):  128.00 MiB
llama_context: enumerating backends
llama_context: backend_ptrs.size() = 1
llama_context: max_nodes = 65536
llama_context: worst-case: n_tokens = 8, n_seqs = 1, n_outputs = 0
llama_context: reserving graph for n_tokens = 8, n_seqs = 1
llama_context: reserving graph for n_tokens = 1, n_seqs = 1
llama_context: reserving graph for n_tokens = 8, n_seqs = 1
llama_context:        CPU compute buffer size =     3.00 MiB
llama_context: graph nodes  = 1094
llama_context: graph splits = 1
CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
Model metadata: {'general.name': 'mistralai_mistral-7b-instruct-v0.2', 'general.architecture': 'llama', 'llama.context_length': '32768', 'llama.rope.dimension_count': '128', 'llama.embedding_length': '4096', 'llama.block_count': '32', 'llama.feed_forward_length': '14336', 'llama.attention.head_count': '32', 'tokenizer.ggml.eos_token_id': '2', 'general.file_type': '15', 'llama.attention.head_count_kv': '8', 'llama.attention.layer_norm_rms_epsilon': '0.000010', 'llama.rope.freq_base': '1000000.000000', 'tokenizer.ggml.model': 'llama', 'general.quantization_version': '2', 'tokenizer.ggml.bos_token_id': '1', 'tokenizer.ggml.unknown_token_id': '0', 'tokenizer.ggml.padding_token_id': '0', 'tokenizer.ggml.add_bos_token': 'true', 'tokenizer.ggml.add_eos_token': 'false', 'tokenizer.chat_template': "{{ bos_token }}{% for message in messages %}{% if (message['role'] == 'user') != (loop.index0 % 2 == 0) %}{{ raise_exception('Conversation roles must alternate user/assistant/user/assistant/...') }}{% endif %}{% if message['role'] == 'user' %}{{ '[INST] ' + message['content'] + ' [/INST]' }}{% elif message['role'] == 'assistant' %}{{ message['content'] + eos_token}}{% else %}{{ raise_exception('Only user and assistant roles are supported!') }}{% endif %}{% endfor %}"}
Available chat formats from metadata: chat_template.default
Guessed chat format: mistral-instruct
Building index from SQLite database...
Loading embedding model: intfloat/e5-small-v2 on CPU
Index saved to faiss_index
llama_model_loader: loaded meta data with 24 key-value pairs and 291 tensors from C:/Users/Prakhar Srivastava/Desktop/PROJECTS/askMUJ/models/Mistral/mistral-7b-instruct-v0.2.Q4_K_M.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = llama
llama_model_loader: - kv   1:                               general.name str              = mistralai_mistral-7b-instruct-v0.2
llama_model_loader: - kv   2:                       llama.context_length u32              = 32768
llama_model_loader: - kv   3:                     llama.embedding_length u32              = 4096
llama_model_loader: - kv   4:                          llama.block_count u32              = 32
llama_model_loader: - kv   5:                  llama.feed_forward_length u32              = 14336
llama_model_loader: - kv   6:                 llama.rope.dimension_count u32              = 128
llama_model_loader: - kv   7:                 llama.attention.head_count u32              = 32
llama_model_loader: - kv   8:              llama.attention.head_count_kv u32              = 8
llama_model_loader: - kv   9:     llama.attention.layer_norm_rms_epsilon f32              = 0.000010
llama_model_loader: - kv  10:                       llama.rope.freq_base f32              = 1000000.000000
llama_model_loader: - kv  11:                          general.file_type u32              = 15
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,32000]   = ["<unk>", "<s>", "</s>", "<0x00>", "<...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,32000]   = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,32000]   = [2, 3, 3, 6, 6, 6, 6, 6, 6, 6, 6, 6, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 1
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 2
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 0
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% for message in mess...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - type  f32:   65 tensors
llama_model_loader: - type q4_K:  193 tensors
llama_model_loader: - type q6_K:   33 tensors
print_info: file format = GGUF V3 (latest)
print_info: file type   = Q4_K - Medium
print_info: file size   = 4.07 GiB (4.83 BPW) 
init_tokenizer: initializing tokenizer for type 1
load: control token:      2 '</s>' is not marked as EOG
load: control token:      1 '<s>' is not marked as EOG
load: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
load: special tokens cache size = 3
load: token to piece cache size = 0.1637 MB
print_info: arch             = llama
print_info: vocab_only       = 0
print_info: n_ctx_train      = 32768
print_info: n_embd           = 4096
print_info: n_layer          = 32
print_info: n_head           = 32
print_info: n_head_kv        = 8
print_info: n_rot            = 128
print_info: n_swa            = 0
print_info: n_swa_pattern    = 1
print_info: n_embd_head_k    = 128
print_info: n_embd_head_v    = 128
print_info: n_gqa            = 4
print_info: n_embd_k_gqa     = 1024
print_info: n_embd_v_gqa     = 1024
print_info: f_norm_eps       = 0.0e+00
print_info: f_norm_rms_eps   = 1.0e-05
print_info: f_clamp_kqv      = 0.0e+00
print_info: f_max_alibi_bias = 0.0e+00
print_info: f_logit_scale    = 0.0e+00
print_info: f_attn_scale     = 0.0e+00
print_info: n_ff             = 14336
print_info: n_expert         = 0
print_info: n_expert_used    = 0
print_info: causal attn      = 1
print_info: pooling type     = 0
print_info: rope type        = 0
print_info: rope scaling     = linear
print_info: freq_base_train  = 1000000.0
print_info: freq_scale_train = 1
print_info: n_ctx_orig_yarn  = 32768
print_info: rope_finetuned   = unknown
print_info: ssm_d_conv       = 0
print_info: ssm_d_inner      = 0
print_info: ssm_d_state      = 0
print_info: ssm_dt_rank      = 0
print_info: ssm_dt_b_c_rms   = 0
print_info: model type       = 7B
print_info: model params     = 7.24 B
print_info: general.name     = mistralai_mistral-7b-instruct-v0.2
print_info: vocab type       = SPM
print_info: n_vocab          = 32000
print_info: n_merges         = 0
print_info: BOS token        = 1 '<s>'
print_info: EOS token        = 2 '</s>'
print_info: UNK token        = 0 '<unk>'
print_info: PAD token        = 0 '<unk>'
print_info: LF token         = 13 '<0x0A>'
print_info: EOG token        = 2 '</s>'
print_info: max token length = 48
load_tensors: loading model tensors, this can take a while... (mmap = true)
load_tensors: layer   0 assigned to device CPU, is_swa = 0
load_tensors: layer   1 assigned to device CPU, is_swa = 0
load_tensors: layer   2 assigned to device CPU, is_swa = 0
load_tensors: layer   3 assigned to device CPU, is_swa = 0
load_tensors: layer   4 assigned to device CPU, is_swa = 0
load_tensors: layer   5 assigned to device CPU, is_swa = 0
load_tensors: layer   6 assigned to device CPU, is_swa = 0
load_tensors: layer   7 assigned to device CPU, is_swa = 0
load_tensors: layer   8 assigned to device CPU, is_swa = 0
load_tensors: layer   9 assigned to device CPU, is_swa = 0
load_tensors: layer  10 assigned to device CPU, is_swa = 0
load_tensors: layer  11 assigned to device CPU, is_swa = 0
load_tensors: layer  12 assigned to device CPU, is_swa = 0
load_tensors: layer  13 assigned to device CPU, is_swa = 0
load_tensors: layer  14 assigned to device CPU, is_swa = 0
load_tensors: layer  15 assigned to device CPU, is_swa = 0
load_tensors: layer  16 assigned to device CPU, is_swa = 0
load_tensors: layer  17 assigned to device CPU, is_swa = 0
load_tensors: layer  18 assigned to device CPU, is_swa = 0
load_tensors: layer  19 assigned to device CPU, is_swa = 0
load_tensors: layer  20 assigned to device CPU, is_swa = 0
load_tensors: layer  21 assigned to device CPU, is_swa = 0
load_tensors: layer  22 assigned to device CPU, is_swa = 0
load_tensors: layer  23 assigned to device CPU, is_swa = 0
load_tensors: layer  24 assigned to device CPU, is_swa = 0
load_tensors: layer  25 assigned to device CPU, is_swa = 0
load_tensors: layer  26 assigned to device CPU, is_swa = 0
load_tensors: layer  27 assigned to device CPU, is_swa = 0
load_tensors: layer  28 assigned to device CPU, is_swa = 0
load_tensors: layer  29 assigned to device CPU, is_swa = 0
load_tensors: layer  30 assigned to device CPU, is_swa = 0
load_tensors: layer  31 assigned to device CPU, is_swa = 0
load_tensors: layer  32 assigned to device CPU, is_swa = 0
load_tensors: tensor 'token_embd.weight' (q4_K) (and 98 others) cannot be used with preferred buffer type CPU_AARCH64, using CPU instead
load_tensors:  CPU_AARCH64 model buffer size =  3204.00 MiB
load_tensors:   CPU_Mapped model buffer size =  4165.37 MiB
repack: repack tensor blk.0.attn_q.weight with q4_K_8x8
repack: repack tensor blk.0.attn_k.weight with q4_K_8x8
repack: repack tensor blk.0.attn_output.weight with q4_K_8x8
repack: repack tensor blk.0.ffn_gate.weight with q4_K_8x8
.repack: repack tensor blk.0.ffn_up.weight with q4_K_8x8
repack: repack tensor blk.1.attn_q.weight with q4_K_8x8
.repack: repack tensor blk.1.attn_k.weight with q4_K_8x8
repack: repack tensor blk.1.attn_output.weight with q4_K_8x8
repack: repack tensor blk.1.ffn_gate.weight with q4_K_8x8
.repack: repack tensor blk.1.ffn_up.weight with q4_K_8x8
repack: repack tensor blk.2.attn_q.weight with q4_K_8x8
.repack: repack tensor blk.2.attn_k.weight with q4_K_8x8
repack: repack tensor blk.2.attn_output.weight with q4_K_8x8
repack: repack tensor blk.2.ffn_gate.weight with q4_K_8x8
.repack: repack tensor blk.2.ffn_up.weight with q4_K_8x8
repack: repack tensor blk.3.attn_q.weight with q4_K_8x8
.repack: repack tensor blk.3.attn_k.weight with q4_K_8x8
repack: repack tensor blk.3.attn_output.weight with q4_K_8x8
repack: repack tensor blk.3.ffn_gate.weight with q4_K_8x8
.repack: repack tensor blk.3.ffn_up.weight with q4_K_8x8
repack: repack tensor blk.4.attn_q.weight with q4_K_8x8
.repack: repack tensor blk.4.attn_k.weight with q4_K_8x8
repack: repack tensor blk.4.attn_v.weight with q4_K_8x8
repack: repack tensor blk.4.attn_output.weight with q4_K_8x8
repack: repack tensor blk.4.ffn_gate.weight with q4_K_8x8
.repack: repack tensor blk.4.ffn_down.weight with q4_K_8x8
.repack: repack tensor blk.4.ffn_up.weight with q4_K_8x8
repack: repack tensor blk.5.attn_q.weight with q4_K_8x8
.repack: repack tensor blk.5.attn_k.weight with q4_K_8x8
repack: repack tensor blk.5.attn_v.weight with q4_K_8x8
repack: repack tensor blk.5.attn_output.weight with q4_K_8x8
repack: repack tensor blk.5.ffn_gate.weight with q4_K_8x8
.repack: repack tensor blk.5.ffn_down.weight with q4_K_8x8
repack: repack tensor blk.5.ffn_up.weight with q4_K_8x8
.repack: repack tensor blk.6.attn_q.weight with q4_K_8x8
repack: repack tensor blk.6.attn_k.weight with q4_K_8x8
repack: repack tensor blk.6.attn_output.weight with q4_K_8x8
.repack: repack tensor blk.6.ffn_gate.weight with q4_K_8x8
repack: repack tensor blk.6.ffn_up.weight with q4_K_8x8
.repack: repack tensor blk.7.attn_q.weight with q4_K_8x8
repack: repack tensor blk.7.attn_k.weight with q4_K_8x8
repack: repack tensor blk.7.attn_v.weight with q4_K_8x8
repack: repack tensor blk.7.attn_output.weight with q4_K_8x8
.repack: repack tensor blk.7.ffn_gate.weight with q4_K_8x8
repack: repack tensor blk.7.ffn_down.weight with q4_K_8x8
.repack: repack tensor blk.7.ffn_up.weight with q4_K_8x8
.repack: repack tensor blk.8.attn_q.weight with q4_K_8x8
repack: repack tensor blk.8.attn_k.weight with q4_K_8x8
repack: repack tensor blk.8.attn_v.weight with q4_K_8x8
repack: repack tensor blk.8.attn_output.weight with q4_K_8x8
repack: repack tensor blk.8.ffn_gate.weight with q4_K_8x8
.repack: repack tensor blk.8.ffn_down.weight with q4_K_8x8
.repack: repack tensor blk.8.ffn_up.weight with q4_K_8x8
.repack: repack tensor blk.9.attn_q.weight with q4_K_8x8
repack: repack tensor blk.9.attn_k.weight with q4_K_8x8
repack: repack tensor blk.9.attn_output.weight with q4_K_8x8
repack: repack tensor blk.9.ffn_gate.weight with q4_K_8x8
.repack: repack tensor blk.9.ffn_up.weight with q4_K_8x8
.repack: repack tensor blk.10.attn_q.weight with q4_K_8x8
repack: repack tensor blk.10.attn_k.weight with q4_K_8x8
repack: repack tensor blk.10.attn_v.weight with q4_K_8x8
repack: repack tensor blk.10.attn_output.weight with q4_K_8x8
repack: repack tensor blk.10.ffn_gate.weight with q4_K_8x8
.repack: repack tensor blk.10.ffn_down.weight with q4_K_8x8
.repack: repack tensor blk.10.ffn_up.weight with q4_K_8x8
.repack: repack tensor blk.11.attn_q.weight with q4_K_8x8
repack: repack tensor blk.11.attn_k.weight with q4_K_8x8
repack: repack tensor blk.11.attn_v.weight with q4_K_8x8
repack: repack tensor blk.11.attn_output.weight with q4_K_8x8
repack: repack tensor blk.11.ffn_gate.weight with q4_K_8x8
.repack: repack tensor blk.11.ffn_down.weight with q4_K_8x8
.repack: repack tensor blk.11.ffn_up.weight with q4_K_8x8
repack: repack tensor blk.12.attn_q.weight with q4_K_8x8
.repack: repack tensor blk.12.attn_k.weight with q4_K_8x8
repack: repack tensor blk.12.attn_output.weight with q4_K_8x8
repack: repack tensor blk.12.ffn_gate.weight with q4_K_8x8
.repack: repack tensor blk.12.ffn_up.weight with q4_K_8x8
repack: repack tensor blk.13.attn_q.weight with q4_K_8x8
.repack: repack tensor blk.13.attn_k.weight with q4_K_8x8
repack: repack tensor blk.13.attn_v.weight with q4_K_8x8
repack: repack tensor blk.13.attn_output.weight with q4_K_8x8
repack: repack tensor blk.13.ffn_gate.weight with q4_K_8x8
.repack: repack tensor blk.13.ffn_down.weight with q4_K_8x8
repack: repack tensor blk.13.ffn_up.weight with q4_K_8x8
.repack: repack tensor blk.14.attn_q.weight with q4_K_8x8
repack: repack tensor blk.14.attn_k.weight with q4_K_8x8
repack: repack tensor blk.14.attn_v.weight with q4_K_8x8
repack: repack tensor blk.14.attn_output.weight with q4_K_8x8
.repack: repack tensor blk.14.ffn_gate.weight with q4_K_8x8
repack: repack tensor blk.14.ffn_down.weight with q4_K_8x8
.repack: repack tensor blk.14.ffn_up.weight with q4_K_8x8
.repack: repack tensor blk.15.attn_q.weight with q4_K_8x8
repack: repack tensor blk.15.attn_k.weight with q4_K_8x8
repack: repack tensor blk.15.attn_output.weight with q4_K_8x8
repack: repack tensor blk.15.ffn_gate.weight with q4_K_8x8
.repack: repack tensor blk.15.ffn_up.weight with q4_K_8x8
.repack: repack tensor blk.16.attn_q.weight with q4_K_8x8
repack: repack tensor blk.16.attn_k.weight with q4_K_8x8
repack: repack tensor blk.16.attn_v.weight with q4_K_8x8
repack: repack tensor blk.16.attn_output.weight with q4_K_8x8
.repack: repack tensor blk.16.ffn_gate.weight with q4_K_8x8
repack: repack tensor blk.16.ffn_down.weight with q4_K_8x8
.repack: repack tensor blk.16.ffn_up.weight with q4_K_8x8
.repack: repack tensor blk.17.attn_q.weight with q4_K_8x8
repack: repack tensor blk.17.attn_k.weight with q4_K_8x8
repack: repack tensor blk.17.attn_v.weight with q4_K_8x8
repack: repack tensor blk.17.attn_output.weight with q4_K_8x8
repack: repack tensor blk.17.ffn_gate.weight with q4_K_8x8
.repack: repack tensor blk.17.ffn_down.weight with q4_K_8x8
.repack: repack tensor blk.17.ffn_up.weight with q4_K_8x8
.repack: repack tensor blk.18.attn_q.weight with q4_K_8x8
repack: repack tensor blk.18.attn_k.weight with q4_K_8x8
repack: repack tensor blk.18.attn_output.weight with q4_K_8x8
repack: repack tensor blk.18.ffn_gate.weight with q4_K_8x8
.repack: repack tensor blk.18.ffn_up.weight with q4_K_8x8
.repack: repack tensor blk.19.attn_q.weight with q4_K_8x8
repack: repack tensor blk.19.attn_k.weight with q4_K_8x8
repack: repack tensor blk.19.attn_v.weight with q4_K_8x8
repack: repack tensor blk.19.attn_output.weight with q4_K_8x8
repack: repack tensor blk.19.ffn_gate.weight with q4_K_8x8
.repack: repack tensor blk.19.ffn_down.weight with q4_K_8x8
.repack: repack tensor blk.19.ffn_up.weight with q4_K_8x8
repack: repack tensor blk.20.attn_q.weight with q4_K_8x8
.repack: repack tensor blk.20.attn_k.weight with q4_K_8x8
repack: repack tensor blk.20.attn_v.weight with q4_K_8x8
repack: repack tensor blk.20.attn_output.weight with q4_K_8x8
repack: repack tensor blk.20.ffn_gate.weight with q4_K_8x8
.repack: repack tensor blk.20.ffn_down.weight with q4_K_8x8
repack: repack tensor blk.20.ffn_up.weight with q4_K_8x8
.repack: repack tensor blk.21.attn_q.weight with q4_K_8x8
repack: repack tensor blk.21.attn_k.weight with q4_K_8x8
repack: repack tensor blk.21.attn_output.weight with q4_K_8x8
.repack: repack tensor blk.21.ffn_gate.weight with q4_K_8x8
repack: repack tensor blk.21.ffn_up.weight with q4_K_8x8
.repack: repack tensor blk.22.attn_q.weight with q4_K_8x8
repack: repack tensor blk.22.attn_k.weight with q4_K_8x8
repack: repack tensor blk.22.attn_v.weight with q4_K_8x8
.repack: repack tensor blk.22.attn_output.weight with q4_K_8x8
repack: repack tensor blk.22.ffn_gate.weight with q4_K_8x8
repack: repack tensor blk.22.ffn_down.weight with q4_K_8x8
.repack: repack tensor blk.22.ffn_up.weight with q4_K_8x8
.repack: repack tensor blk.23.attn_q.weight with q4_K_8x8
repack: repack tensor blk.23.attn_k.weight with q4_K_8x8
repack: repack tensor blk.23.attn_v.weight with q4_K_8x8
repack: repack tensor blk.23.attn_output.weight with q4_K_8x8
.repack: repack tensor blk.23.ffn_gate.weight with q4_K_8x8
repack: repack tensor blk.23.ffn_down.weight with q4_K_8x8
.repack: repack tensor blk.23.ffn_up.weight with q4_K_8x8
.repack: repack tensor blk.24.attn_q.weight with q4_K_8x8
repack: repack tensor blk.24.attn_k.weight with q4_K_8x8
repack: repack tensor blk.24.attn_output.weight with q4_K_8x8
repack: repack tensor blk.24.ffn_gate.weight with q4_K_8x8
.repack: repack tensor blk.24.ffn_up.weight with q4_K_8x8
.repack: repack tensor blk.25.attn_q.weight with q4_K_8x8
repack: repack tensor blk.25.attn_k.weight with q4_K_8x8
repack: repack tensor blk.25.attn_v.weight with q4_K_8x8
repack: repack tensor blk.25.attn_output.weight with q4_K_8x8
repack: repack tensor blk.25.ffn_gate.weight with q4_K_8x8
.repack: repack tensor blk.25.ffn_down.weight with q4_K_8x8
.repack: repack tensor blk.25.ffn_up.weight with q4_K_8x8
.repack: repack tensor blk.26.attn_q.weight with q4_K_8x8
repack: repack tensor blk.26.attn_k.weight with q4_K_8x8
repack: repack tensor blk.26.attn_v.weight with q4_K_8x8
repack: repack tensor blk.26.attn_output.weight with q4_K_8x8
repack: repack tensor blk.26.ffn_gate.weight with q4_K_8x8
.repack: repack tensor blk.26.ffn_down.weight with q4_K_8x8
.repack: repack tensor blk.26.ffn_up.weight with q4_K_8x8
repack: repack tensor blk.27.attn_q.weight with q4_K_8x8
.repack: repack tensor blk.27.attn_k.weight with q4_K_8x8
repack: repack tensor blk.27.attn_output.weight with q4_K_8x8
repack: repack tensor blk.27.ffn_gate.weight with q4_K_8x8
.repack: repack tensor blk.27.ffn_up.weight with q4_K_8x8
repack: repack tensor blk.28.attn_q.weight with q4_K_8x8
.repack: repack tensor blk.28.attn_k.weight with q4_K_8x8
repack: repack tensor blk.28.attn_output.weight with q4_K_8x8
repack: repack tensor blk.28.ffn_gate.weight with q4_K_8x8
.repack: repack tensor blk.28.ffn_up.weight with q4_K_8x8
repack: repack tensor blk.29.attn_q.weight with q4_K_8x8
.repack: repack tensor blk.29.attn_k.weight with q4_K_8x8
repack: repack tensor blk.29.attn_output.weight with q4_K_8x8
repack: repack tensor blk.29.ffn_gate.weight with q4_K_8x8
.repack: repack tensor blk.29.ffn_up.weight with q4_K_8x8
repack: repack tensor blk.30.attn_q.weight with q4_K_8x8
.repack: repack tensor blk.30.attn_k.weight with q4_K_8x8
repack: repack tensor blk.30.attn_output.weight with q4_K_8x8
repack: repack tensor blk.30.ffn_gate.weight with q4_K_8x8
.repack: repack tensor blk.30.ffn_up.weight with q4_K_8x8
repack: repack tensor blk.31.attn_q.weight with q4_K_8x8
.repack: repack tensor blk.31.attn_k.weight with q4_K_8x8
repack: repack tensor blk.31.attn_output.weight with q4_K_8x8
repack: repack tensor blk.31.ffn_gate.weight with q4_K_8x8
.repack: repack tensor blk.31.ffn_up.weight with q4_K_8x8
...................
llama_context: constructing llama_context
llama_context: n_batch is less than GGML_KQ_MASK_PAD - increasing to 64
llama_context: n_seq_max     = 1
llama_context: n_ctx         = 2048
llama_context: n_ctx_per_seq = 2048
llama_context: n_batch       = 64
llama_context: n_ubatch      = 8
llama_context: causal_attn   = 1
llama_context: flash_attn    = 0
llama_context: freq_base     = 1000000.0
llama_context: freq_scale    = 1
llama_context: n_ctx_per_seq (2048) < n_ctx_train (32768) -- the full capacity of the model will not be utilized
set_abort_callback: call
llama_context:        CPU  output buffer size =     0.12 MiB
create_memory: n_ctx = 2048 (padded)
llama_kv_cache_unified: kv_size = 2048, type_k = 'f16', type_v = 'f16', n_layer = 32, can_shift = 1, padding = 32
llama_kv_cache_unified: layer   0: dev = CPU
llama_kv_cache_unified: layer   1: dev = CPU
llama_kv_cache_unified: layer   2: dev = CPU
llama_kv_cache_unified: layer   3: dev = CPU
llama_kv_cache_unified: layer   4: dev = CPU
llama_kv_cache_unified: layer   5: dev = CPU
llama_kv_cache_unified: layer   6: dev = CPU
llama_kv_cache_unified: layer   7: dev = CPU
llama_kv_cache_unified: layer   8: dev = CPU
llama_kv_cache_unified: layer   9: dev = CPU
llama_kv_cache_unified: layer  10: dev = CPU
llama_kv_cache_unified: layer  11: dev = CPU
llama_kv_cache_unified: layer  12: dev = CPU
llama_kv_cache_unified: layer  13: dev = CPU
llama_kv_cache_unified: layer  14: dev = CPU
llama_kv_cache_unified: layer  15: dev = CPU
llama_kv_cache_unified: layer  16: dev = CPU
llama_kv_cache_unified: layer  17: dev = CPU
llama_kv_cache_unified: layer  18: dev = CPU
llama_kv_cache_unified: layer  19: dev = CPU
llama_kv_cache_unified: layer  20: dev = CPU
llama_kv_cache_unified: layer  21: dev = CPU
llama_kv_cache_unified: layer  22: dev = CPU
llama_kv_cache_unified: layer  23: dev = CPU
llama_kv_cache_unified: layer  24: dev = CPU
llama_kv_cache_unified: layer  25: dev = CPU
llama_kv_cache_unified: layer  26: dev = CPU
llama_kv_cache_unified: layer  27: dev = CPU
llama_kv_cache_unified: layer  28: dev = CPU
llama_kv_cache_unified: layer  29: dev = CPU
llama_kv_cache_unified: layer  30: dev = CPU
llama_kv_cache_unified: layer  31: dev = CPU
llama_kv_cache_unified:        CPU KV buffer size =   256.00 MiB
llama_kv_cache_unified: KV self size  =  256.00 MiB, K (f16):  128.00 MiB, V (f16):  128.00 MiB
llama_context: enumerating backends
llama_context: backend_ptrs.size() = 1
llama_context: max_nodes = 65536
llama_context: worst-case: n_tokens = 8, n_seqs = 1, n_outputs = 0
llama_context: reserving graph for n_tokens = 8, n_seqs = 1
llama_context: reserving graph for n_tokens = 1, n_seqs = 1
llama_context: reserving graph for n_tokens = 8, n_seqs = 1
llama_context:        CPU compute buffer size =     3.00 MiB
llama_context: graph nodes  = 1094
llama_context: graph splits = 1
CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
Model metadata: {'general.name': 'mistralai_mistral-7b-instruct-v0.2', 'general.architecture': 'llama', 'llama.context_length': '32768', 'llama.rope.dimension_count': '128', 'llama.embedding_length': '4096', 'llama.block_count': '32', 'llama.feed_forward_length': '14336', 'llama.attention.head_count': '32', 'tokenizer.ggml.eos_token_id': '2', 'general.file_type': '15', 'llama.attention.head_count_kv': '8', 'llama.attention.layer_norm_rms_epsilon': '0.000010', 'llama.rope.freq_base': '1000000.000000', 'tokenizer.ggml.model': 'llama', 'general.quantization_version': '2', 'tokenizer.ggml.bos_token_id': '1', 'tokenizer.ggml.unknown_token_id': '0', 'tokenizer.ggml.padding_token_id': '0', 'tokenizer.ggml.add_bos_token': 'true', 'tokenizer.ggml.add_eos_token': 'false', 'tokenizer.chat_template': "{{ bos_token }}{% for message in messages %}{% if (message['role'] == 'user') != (loop.index0 % 2 == 0) %}{{ raise_exception('Conversation roles must alternate user/assistant/user/assistant/...') }}{% endif %}{% if message['role'] == 'user' %}{{ '[INST] ' + message['content'] + ' [/INST]' }}{% elif message['role'] == 'assistant' %}{{ message['content'] + eos_token}}{% else %}{{ raise_exception('Only user and assistant roles are supported!') }}{% endif %}{% endfor %}"}
Available chat formats from metadata: chat_template.default
Guessed chat format: mistral-instruct
Building index from SQLite database...
Loading embedding model: intfloat/e5-small-v2 on CPU
Index saved to faiss_index
llama_perf_context_print:        load time =  195578.05 ms
llama_perf_context_print: prompt eval time =  195573.87 ms /   332 tokens (  589.08 ms per token,     1.70 tokens per second)
llama_perf_context_print:        eval time =   10639.76 ms /    18 runs   (  591.10 ms per token,     1.69 tokens per second)
llama_perf_context_print:       total time =  206280.64 ms /   350 tokens
Llama.generate: 86 prefix-match hit, remaining 116 prompt tokens to eval
llama_perf_context_print:        load time =  195578.05 ms
llama_perf_context_print: prompt eval time =   94351.72 ms /   116 tokens (  813.38 ms per token,     1.23 tokens per second)
llama_perf_context_print:        eval time =  352250.00 ms /    43 runs   ( 8191.86 ms per token,     0.12 tokens per second)
llama_perf_context_print:       total time =  448087.89 ms /   159 tokens
Llama.generate: 86 prefix-match hit, remaining 233 prompt tokens to eval
llama_perf_context_print:        load time =  195578.05 ms
llama_perf_context_print: prompt eval time =  177949.83 ms /   233 tokens (  763.73 ms per token,     1.31 tokens per second)
llama_perf_context_print:        eval time =  196041.23 ms /    28 runs   ( 7001.47 ms per token,     0.14 tokens per second)
llama_perf_context_print:       total time =  374665.58 ms /   261 tokens
LLM is explicitly disabled. Using MockLLM.
LLM is explicitly disabled. Using MockLLM.
LLM is explicitly disabled. Using MockLLM.
llama_model_loader: loaded meta data with 24 key-value pairs and 291 tensors from C:/Users/Prakhar Srivastava/Desktop/AskQuery/models/Mistral/mistral-7b-instruct-v0.2.Q4_K_M.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = llama
llama_model_loader: - kv   1:                               general.name str              = mistralai_mistral-7b-instruct-v0.2
llama_model_loader: - kv   2:                       llama.context_length u32              = 32768
llama_model_loader: - kv   3:                     llama.embedding_length u32              = 4096
llama_model_loader: - kv   4:                          llama.block_count u32              = 32
llama_model_loader: - kv   5:                  llama.feed_forward_length u32              = 14336
llama_model_loader: - kv   6:                 llama.rope.dimension_count u32              = 128
llama_model_loader: - kv   7:                 llama.attention.head_count u32              = 32
llama_model_loader: - kv   8:              llama.attention.head_count_kv u32              = 8
llama_model_loader: - kv   9:     llama.attention.layer_norm_rms_epsilon f32              = 0.000010
llama_model_loader: - kv  10:                       llama.rope.freq_base f32              = 1000000.000000
llama_model_loader: - kv  11:                          general.file_type u32              = 15
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,32000]   = ["<unk>", "<s>", "</s>", "<0x00>", "<...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,32000]   = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,32000]   = [2, 3, 3, 6, 6, 6, 6, 6, 6, 6, 6, 6, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 1
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 2
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 0
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% for message in mess...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - type  f32:   65 tensors
llama_model_loader: - type q4_K:  193 tensors
llama_model_loader: - type q6_K:   33 tensors
print_info: file format = GGUF V3 (latest)
print_info: file type   = Q4_K - Medium
print_info: file size   = 4.07 GiB (4.83 BPW) 
init_tokenizer: initializing tokenizer for type 1
load: control token:      2 '</s>' is not marked as EOG
load: control token:      1 '<s>' is not marked as EOG
load: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
load: printing all EOG tokens:
load:   - 2 ('</s>')
load: special tokens cache size = 3
load: token to piece cache size = 0.1637 MB
print_info: arch             = llama
print_info: vocab_only       = 0
print_info: n_ctx_train      = 32768
print_info: n_embd           = 4096
print_info: n_layer          = 32
print_info: n_head           = 32
print_info: n_head_kv        = 8
print_info: n_rot            = 128
print_info: n_swa            = 0
print_info: is_swa_any       = 0
print_info: n_embd_head_k    = 128
print_info: n_embd_head_v    = 128
print_info: n_gqa            = 4
print_info: n_embd_k_gqa     = 1024
print_info: n_embd_v_gqa     = 1024
print_info: f_norm_eps       = 0.0e+00
print_info: f_norm_rms_eps   = 1.0e-05
print_info: f_clamp_kqv      = 0.0e+00
print_info: f_max_alibi_bias = 0.0e+00
print_info: f_logit_scale    = 0.0e+00
print_info: f_attn_scale     = 0.0e+00
print_info: n_ff             = 14336
print_info: n_expert         = 0
print_info: n_expert_used    = 0
print_info: causal attn      = 1
print_info: pooling type     = 0
print_info: rope type        = 0
print_info: rope scaling     = linear
print_info: freq_base_train  = 1000000.0
print_info: freq_scale_train = 1
print_info: n_ctx_orig_yarn  = 32768
print_info: rope_finetuned   = unknown
print_info: model type       = 7B
print_info: model params     = 7.24 B
print_info: general.name     = mistralai_mistral-7b-instruct-v0.2
print_info: vocab type       = SPM
print_info: n_vocab          = 32000
print_info: n_merges         = 0
print_info: BOS token        = 1 '<s>'
print_info: EOS token        = 2 '</s>'
print_info: UNK token        = 0 '<unk>'
print_info: PAD token        = 0 '<unk>'
print_info: LF token         = 13 '<0x0A>'
print_info: EOG token        = 2 '</s>'
print_info: max token length = 48
load_tensors: loading model tensors, this can take a while... (mmap = true)
load_tensors: layer   0 assigned to device CPU, is_swa = 0
load_tensors: layer   1 assigned to device CPU, is_swa = 0
load_tensors: layer   2 assigned to device CPU, is_swa = 0
load_tensors: layer   3 assigned to device CPU, is_swa = 0
load_tensors: layer   4 assigned to device CPU, is_swa = 0
load_tensors: layer   5 assigned to device CPU, is_swa = 0
load_tensors: layer   6 assigned to device CPU, is_swa = 0
load_tensors: layer   7 assigned to device CPU, is_swa = 0
load_tensors: layer   8 assigned to device CPU, is_swa = 0
load_tensors: layer   9 assigned to device CPU, is_swa = 0
load_tensors: layer  10 assigned to device CPU, is_swa = 0
load_tensors: layer  11 assigned to device CPU, is_swa = 0
load_tensors: layer  12 assigned to device CPU, is_swa = 0
load_tensors: layer  13 assigned to device CPU, is_swa = 0
load_tensors: layer  14 assigned to device CPU, is_swa = 0
load_tensors: layer  15 assigned to device CPU, is_swa = 0
load_tensors: layer  16 assigned to device CPU, is_swa = 0
load_tensors: layer  17 assigned to device CPU, is_swa = 0
load_tensors: layer  18 assigned to device CPU, is_swa = 0
load_tensors: layer  19 assigned to device CPU, is_swa = 0
load_tensors: layer  20 assigned to device CPU, is_swa = 0
load_tensors: layer  21 assigned to device CPU, is_swa = 0
load_tensors: layer  22 assigned to device CPU, is_swa = 0
load_tensors: layer  23 assigned to device CPU, is_swa = 0
load_tensors: layer  24 assigned to device CPU, is_swa = 0
load_tensors: layer  25 assigned to device CPU, is_swa = 0
load_tensors: layer  26 assigned to device CPU, is_swa = 0
load_tensors: layer  27 assigned to device CPU, is_swa = 0
load_tensors: layer  28 assigned to device CPU, is_swa = 0
load_tensors: layer  29 assigned to device CPU, is_swa = 0
load_tensors: layer  30 assigned to device CPU, is_swa = 0
load_tensors: layer  31 assigned to device CPU, is_swa = 0
load_tensors: layer  32 assigned to device CPU, is_swa = 0
load_tensors: tensor 'token_embd.weight' (q4_K) (and 98 others) cannot be used with preferred buffer type CPU_REPACK, using CPU instead
load_tensors:   CPU_REPACK model buffer size =  3204.00 MiB
load_tensors:   CPU_Mapped model buffer size =  4165.37 MiB
repack: repack tensor blk.0.attn_q.weight with q4_K_8x8
repack: repack tensor blk.0.attn_k.weight with q4_K_8x8
repack: repack tensor blk.0.attn_output.weight with q4_K_8x8
repack: repack tensor blk.0.ffn_gate.weight with q4_K_8x8
.repack: repack tensor blk.0.ffn_up.weight with q4_K_8x8
repack: repack tensor blk.1.attn_q.weight with q4_K_8x8
.repack: repack tensor blk.1.attn_k.weight with q4_K_8x8
repack: repack tensor blk.1.attn_output.weight with q4_K_8x8
repack: repack tensor blk.1.ffn_gate.weight with q4_K_8x8
.repack: repack tensor blk.1.ffn_up.weight with q4_K_8x8
repack: repack tensor blk.2.attn_q.weight with q4_K_8x8
.repack: repack tensor blk.2.attn_k.weight with q4_K_8x8
repack: repack tensor blk.2.attn_output.weight with q4_K_8x8
repack: repack tensor blk.2.ffn_gate.weight with q4_K_8x8
.repack: repack tensor blk.2.ffn_up.weight with q4_K_8x8
repack: repack tensor blk.3.attn_q.weight with q4_K_8x8
.repack: repack tensor blk.3.attn_k.weight with q4_K_8x8
repack: repack tensor blk.3.attn_output.weight with q4_K_8x8
repack: repack tensor blk.3.ffn_gate.weight with q4_K_8x8
.repack: repack tensor blk.3.ffn_up.weight with q4_K_8x8
repack: repack tensor blk.4.attn_q.weight with q4_K_8x8
.repack: repack tensor blk.4.attn_k.weight with q4_K_8x8
repack: repack tensor blk.4.attn_v.weight with q4_K_8x8
repack: repack tensor blk.4.attn_output.weight with q4_K_8x8
repack: repack tensor blk.4.ffn_gate.weight with q4_K_8x8
.repack: repack tensor blk.4.ffn_down.weight with q4_K_8x8
.repack: repack tensor blk.4.ffn_up.weight with q4_K_8x8
repack: repack tensor blk.5.attn_q.weight with q4_K_8x8
.repack: repack tensor blk.5.attn_k.weight with q4_K_8x8
repack: repack tensor blk.5.attn_v.weight with q4_K_8x8
repack: repack tensor blk.5.attn_output.weight with q4_K_8x8
repack: repack tensor blk.5.ffn_gate.weight with q4_K_8x8
.repack: repack tensor blk.5.ffn_down.weight with q4_K_8x8
repack: repack tensor blk.5.ffn_up.weight with q4_K_8x8
.repack: repack tensor blk.6.attn_q.weight with q4_K_8x8
repack: repack tensor blk.6.attn_k.weight with q4_K_8x8
repack: repack tensor blk.6.attn_output.weight with q4_K_8x8
.repack: repack tensor blk.6.ffn_gate.weight with q4_K_8x8
repack: repack tensor blk.6.ffn_up.weight with q4_K_8x8
.repack: repack tensor blk.7.attn_q.weight with q4_K_8x8
repack: repack tensor blk.7.attn_k.weight with q4_K_8x8
repack: repack tensor blk.7.attn_v.weight with q4_K_8x8
repack: repack tensor blk.7.attn_output.weight with q4_K_8x8
.repack: repack tensor blk.7.ffn_gate.weight with q4_K_8x8
repack: repack tensor blk.7.ffn_down.weight with q4_K_8x8
.repack: repack tensor blk.7.ffn_up.weight with q4_K_8x8
.repack: repack tensor blk.8.attn_q.weight with q4_K_8x8
repack: repack tensor blk.8.attn_k.weight with q4_K_8x8
repack: repack tensor blk.8.attn_v.weight with q4_K_8x8
repack: repack tensor blk.8.attn_output.weight with q4_K_8x8
repack: repack tensor blk.8.ffn_gate.weight with q4_K_8x8
.repack: repack tensor blk.8.ffn_down.weight with q4_K_8x8
.repack: repack tensor blk.8.ffn_up.weight with q4_K_8x8
.repack: repack tensor blk.9.attn_q.weight with q4_K_8x8
repack: repack tensor blk.9.attn_k.weight with q4_K_8x8
repack: repack tensor blk.9.attn_output.weight with q4_K_8x8
repack: repack tensor blk.9.ffn_gate.weight with q4_K_8x8
.repack: repack tensor blk.9.ffn_up.weight with q4_K_8x8
.repack: repack tensor blk.10.attn_q.weight with q4_K_8x8
repack: repack tensor blk.10.attn_k.weight with q4_K_8x8
repack: repack tensor blk.10.attn_v.weight with q4_K_8x8
repack: repack tensor blk.10.attn_output.weight with q4_K_8x8
repack: repack tensor blk.10.ffn_gate.weight with q4_K_8x8
.repack: repack tensor blk.10.ffn_down.weight with q4_K_8x8
.repack: repack tensor blk.10.ffn_up.weight with q4_K_8x8
.repack: repack tensor blk.11.attn_q.weight with q4_K_8x8
repack: repack tensor blk.11.attn_k.weight with q4_K_8x8
repack: repack tensor blk.11.attn_v.weight with q4_K_8x8
repack: repack tensor blk.11.attn_output.weight with q4_K_8x8
repack: repack tensor blk.11.ffn_gate.weight with q4_K_8x8
.repack: repack tensor blk.11.ffn_down.weight with q4_K_8x8
.repack: repack tensor blk.11.ffn_up.weight with q4_K_8x8
repack: repack tensor blk.12.attn_q.weight with q4_K_8x8
.repack: repack tensor blk.12.attn_k.weight with q4_K_8x8
repack: repack tensor blk.12.attn_output.weight with q4_K_8x8
repack: repack tensor blk.12.ffn_gate.weight with q4_K_8x8
.repack: repack tensor blk.12.ffn_up.weight with q4_K_8x8
repack: repack tensor blk.13.attn_q.weight with q4_K_8x8
.repack: repack tensor blk.13.attn_k.weight with q4_K_8x8
repack: repack tensor blk.13.attn_v.weight with q4_K_8x8
repack: repack tensor blk.13.attn_output.weight with q4_K_8x8
repack: repack tensor blk.13.ffn_gate.weight with q4_K_8x8
.repack: repack tensor blk.13.ffn_down.weight with q4_K_8x8
repack: repack tensor blk.13.ffn_up.weight with q4_K_8x8
.repack: repack tensor blk.14.attn_q.weight with q4_K_8x8
repack: repack tensor blk.14.attn_k.weight with q4_K_8x8
repack: repack tensor blk.14.attn_v.weight with q4_K_8x8
repack: repack tensor blk.14.attn_output.weight with q4_K_8x8
.repack: repack tensor blk.14.ffn_gate.weight with q4_K_8x8
repack: repack tensor blk.14.ffn_down.weight with q4_K_8x8
.repack: repack tensor blk.14.ffn_up.weight with q4_K_8x8
.repack: repack tensor blk.15.attn_q.weight with q4_K_8x8
repack: repack tensor blk.15.attn_k.weight with q4_K_8x8
repack: repack tensor blk.15.attn_output.weight with q4_K_8x8
repack: repack tensor blk.15.ffn_gate.weight with q4_K_8x8
.repack: repack tensor blk.15.ffn_up.weight with q4_K_8x8
.repack: repack tensor blk.16.attn_q.weight with q4_K_8x8
repack: repack tensor blk.16.attn_k.weight with q4_K_8x8
repack: repack tensor blk.16.attn_v.weight with q4_K_8x8
repack: repack tensor blk.16.attn_output.weight with q4_K_8x8
.repack: repack tensor blk.16.ffn_gate.weight with q4_K_8x8
repack: repack tensor blk.16.ffn_down.weight with q4_K_8x8
.repack: repack tensor blk.16.ffn_up.weight with q4_K_8x8
.repack: repack tensor blk.17.attn_q.weight with q4_K_8x8
repack: repack tensor blk.17.attn_k.weight with q4_K_8x8
repack: repack tensor blk.17.attn_v.weight with q4_K_8x8
repack: repack tensor blk.17.attn_output.weight with q4_K_8x8
repack: repack tensor blk.17.ffn_gate.weight with q4_K_8x8
.repack: repack tensor blk.17.ffn_down.weight with q4_K_8x8
.repack: repack tensor blk.17.ffn_up.weight with q4_K_8x8
.repack: repack tensor blk.18.attn_q.weight with q4_K_8x8
repack: repack tensor blk.18.attn_k.weight with q4_K_8x8
repack: repack tensor blk.18.attn_output.weight with q4_K_8x8
repack: repack tensor blk.18.ffn_gate.weight with q4_K_8x8
.repack: repack tensor blk.18.ffn_up.weight with q4_K_8x8
.repack: repack tensor blk.19.attn_q.weight with q4_K_8x8
repack: repack tensor blk.19.attn_k.weight with q4_K_8x8
repack: repack tensor blk.19.attn_v.weight with q4_K_8x8
repack: repack tensor blk.19.attn_output.weight with q4_K_8x8
repack: repack tensor blk.19.ffn_gate.weight with q4_K_8x8
.repack: repack tensor blk.19.ffn_down.weight with q4_K_8x8
.repack: repack tensor blk.19.ffn_up.weight with q4_K_8x8
repack: repack tensor blk.20.attn_q.weight with q4_K_8x8
.repack: repack tensor blk.20.attn_k.weight with q4_K_8x8
repack: repack tensor blk.20.attn_v.weight with q4_K_8x8
repack: repack tensor blk.20.attn_output.weight with q4_K_8x8
repack: repack tensor blk.20.ffn_gate.weight with q4_K_8x8
.repack: repack tensor blk.20.ffn_down.weight with q4_K_8x8
repack: repack tensor blk.20.ffn_up.weight with q4_K_8x8
.repack: repack tensor blk.21.attn_q.weight with q4_K_8x8
repack: repack tensor blk.21.attn_k.weight with q4_K_8x8
repack: repack tensor blk.21.attn_output.weight with q4_K_8x8
.repack: repack tensor blk.21.ffn_gate.weight with q4_K_8x8
repack: repack tensor blk.21.ffn_up.weight with q4_K_8x8
.repack: repack tensor blk.22.attn_q.weight with q4_K_8x8
repack: repack tensor blk.22.attn_k.weight with q4_K_8x8
repack: repack tensor blk.22.attn_v.weight with q4_K_8x8
.repack: repack tensor blk.22.attn_output.weight with q4_K_8x8
repack: repack tensor blk.22.ffn_gate.weight with q4_K_8x8
repack: repack tensor blk.22.ffn_down.weight with q4_K_8x8
.repack: repack tensor blk.22.ffn_up.weight with q4_K_8x8
.repack: repack tensor blk.23.attn_q.weight with q4_K_8x8
repack: repack tensor blk.23.attn_k.weight with q4_K_8x8
repack: repack tensor blk.23.attn_v.weight with q4_K_8x8
repack: repack tensor blk.23.attn_output.weight with q4_K_8x8
.repack: repack tensor blk.23.ffn_gate.weight with q4_K_8x8
repack: repack tensor blk.23.ffn_down.weight with q4_K_8x8
.repack: repack tensor blk.23.ffn_up.weight with q4_K_8x8
.repack: repack tensor blk.24.attn_q.weight with q4_K_8x8
repack: repack tensor blk.24.attn_k.weight with q4_K_8x8
repack: repack tensor blk.24.attn_output.weight with q4_K_8x8
repack: repack tensor blk.24.ffn_gate.weight with q4_K_8x8
.repack: repack tensor blk.24.ffn_up.weight with q4_K_8x8
.repack: repack tensor blk.25.attn_q.weight with q4_K_8x8
repack: repack tensor blk.25.attn_k.weight with q4_K_8x8
repack: repack tensor blk.25.attn_v.weight with q4_K_8x8
repack: repack tensor blk.25.attn_output.weight with q4_K_8x8
repack: repack tensor blk.25.ffn_gate.weight with q4_K_8x8
.repack: repack tensor blk.25.ffn_down.weight with q4_K_8x8
.repack: repack tensor blk.25.ffn_up.weight with q4_K_8x8
.repack: repack tensor blk.26.attn_q.weight with q4_K_8x8
repack: repack tensor blk.26.attn_k.weight with q4_K_8x8
repack: repack tensor blk.26.attn_v.weight with q4_K_8x8
repack: repack tensor blk.26.attn_output.weight with q4_K_8x8
repack: repack tensor blk.26.ffn_gate.weight with q4_K_8x8
.repack: repack tensor blk.26.ffn_down.weight with q4_K_8x8
.repack: repack tensor blk.26.ffn_up.weight with q4_K_8x8
repack: repack tensor blk.27.attn_q.weight with q4_K_8x8
.repack: repack tensor blk.27.attn_k.weight with q4_K_8x8
repack: repack tensor blk.27.attn_output.weight with q4_K_8x8
repack: repack tensor blk.27.ffn_gate.weight with q4_K_8x8
.repack: repack tensor blk.27.ffn_up.weight with q4_K_8x8
repack: repack tensor blk.28.attn_q.weight with q4_K_8x8
.repack: repack tensor blk.28.attn_k.weight with q4_K_8x8
repack: repack tensor blk.28.attn_output.weight with q4_K_8x8
repack: repack tensor blk.28.ffn_gate.weight with q4_K_8x8
.repack: repack tensor blk.28.ffn_up.weight with q4_K_8x8
repack: repack tensor blk.29.attn_q.weight with q4_K_8x8
.repack: repack tensor blk.29.attn_k.weight with q4_K_8x8
repack: repack tensor blk.29.attn_output.weight with q4_K_8x8
repack: repack tensor blk.29.ffn_gate.weight with q4_K_8x8
.repack: repack tensor blk.29.ffn_up.weight with q4_K_8x8
repack: repack tensor blk.30.attn_q.weight with q4_K_8x8
.repack: repack tensor blk.30.attn_k.weight with q4_K_8x8
repack: repack tensor blk.30.attn_output.weight with q4_K_8x8
repack: repack tensor blk.30.ffn_gate.weight with q4_K_8x8
.repack: repack tensor blk.30.ffn_up.weight with q4_K_8x8
repack: repack tensor blk.31.attn_q.weight with q4_K_8x8
.repack: repack tensor blk.31.attn_k.weight with q4_K_8x8
repack: repack tensor blk.31.attn_output.weight with q4_K_8x8
repack: repack tensor blk.31.ffn_gate.weight with q4_K_8x8
.repack: repack tensor blk.31.ffn_up.weight with q4_K_8x8
...................
llama_context: constructing llama_context
llama_context: n_batch is less than GGML_KQ_MASK_PAD - increasing to 64
llama_context: n_seq_max     = 1
llama_context: n_ctx         = 2048
llama_context: n_ctx_per_seq = 2048
llama_context: n_batch       = 64
llama_context: n_ubatch      = 8
llama_context: causal_attn   = 1
llama_context: flash_attn    = 0
llama_context: kv_unified    = false
llama_context: freq_base     = 1000000.0
llama_context: freq_scale    = 1
llama_context: n_ctx_per_seq (2048) < n_ctx_train (32768) -- the full capacity of the model will not be utilized
set_abort_callback: call
llama_context:        CPU  output buffer size =     0.12 MiB
create_memory: n_ctx = 2048 (padded)
llama_kv_cache_unified: layer   0: dev = CPU
llama_kv_cache_unified: layer   1: dev = CPU
llama_kv_cache_unified: layer   2: dev = CPU
llama_kv_cache_unified: layer   3: dev = CPU
llama_kv_cache_unified: layer   4: dev = CPU
llama_kv_cache_unified: layer   5: dev = CPU
llama_kv_cache_unified: layer   6: dev = CPU
llama_kv_cache_unified: layer   7: dev = CPU
llama_kv_cache_unified: layer   8: dev = CPU
llama_kv_cache_unified: layer   9: dev = CPU
llama_kv_cache_unified: layer  10: dev = CPU
llama_kv_cache_unified: layer  11: dev = CPU
llama_kv_cache_unified: layer  12: dev = CPU
llama_kv_cache_unified: layer  13: dev = CPU
llama_kv_cache_unified: layer  14: dev = CPU
llama_kv_cache_unified: layer  15: dev = CPU
llama_kv_cache_unified: layer  16: dev = CPU
llama_kv_cache_unified: layer  17: dev = CPU
llama_kv_cache_unified: layer  18: dev = CPU
llama_kv_cache_unified: layer  19: dev = CPU
llama_kv_cache_unified: layer  20: dev = CPU
llama_kv_cache_unified: layer  21: dev = CPU
llama_kv_cache_unified: layer  22: dev = CPU
llama_kv_cache_unified: layer  23: dev = CPU
llama_kv_cache_unified: layer  24: dev = CPU
llama_kv_cache_unified: layer  25: dev = CPU
llama_kv_cache_unified: layer  26: dev = CPU
llama_kv_cache_unified: layer  27: dev = CPU
llama_kv_cache_unified: layer  28: dev = CPU
llama_kv_cache_unified: layer  29: dev = CPU
llama_kv_cache_unified: layer  30: dev = CPU
llama_kv_cache_unified: layer  31: dev = CPU
llama_kv_cache_unified:        CPU KV buffer size =   256.00 MiB
llama_kv_cache_unified: size =  256.00 MiB (  2048 cells,  32 layers,  1/1 seqs), K (f16):  128.00 MiB, V (f16):  128.00 MiB
llama_context: enumerating backends
llama_context: backend_ptrs.size() = 1
llama_context: max_nodes = 2328
llama_context: worst-case: n_tokens = 8, n_seqs = 1, n_outputs = 0
graph_reserve: reserving a graph for ubatch with n_tokens =    8, n_seqs =  1, n_outputs =    8
graph_reserve: reserving a graph for ubatch with n_tokens =    1, n_seqs =  1, n_outputs =    1
graph_reserve: reserving a graph for ubatch with n_tokens =    8, n_seqs =  1, n_outputs =    8
llama_context:        CPU compute buffer size =     3.06 MiB
llama_context: graph nodes  = 1126
llama_context: graph splits = 1
CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | LLAMAFILE = 1 | OPENMP = 1 | REPACK = 1 | 
Model metadata: {'general.name': 'mistralai_mistral-7b-instruct-v0.2', 'general.architecture': 'llama', 'llama.context_length': '32768', 'llama.rope.dimension_count': '128', 'llama.embedding_length': '4096', 'llama.block_count': '32', 'llama.feed_forward_length': '14336', 'llama.attention.head_count': '32', 'tokenizer.ggml.eos_token_id': '2', 'general.file_type': '15', 'llama.attention.head_count_kv': '8', 'llama.attention.layer_norm_rms_epsilon': '0.000010', 'llama.rope.freq_base': '1000000.000000', 'tokenizer.ggml.model': 'llama', 'general.quantization_version': '2', 'tokenizer.ggml.bos_token_id': '1', 'tokenizer.ggml.unknown_token_id': '0', 'tokenizer.ggml.padding_token_id': '0', 'tokenizer.ggml.add_bos_token': 'true', 'tokenizer.ggml.add_eos_token': 'false', 'tokenizer.chat_template': "{{ bos_token }}{% for message in messages %}{% if (message['role'] == 'user') != (loop.index0 % 2 == 0) %}{{ raise_exception('Conversation roles must alternate user/assistant/user/assistant/...') }}{% endif %}{% if message['role'] == 'user' %}{{ '[INST] ' + message['content'] + ' [/INST]' }}{% elif message['role'] == 'assistant' %}{{ message['content'] + eos_token}}{% else %}{{ raise_exception('Only user and assistant roles are supported!') }}{% endif %}{% endfor %}"}
Available chat formats from metadata: chat_template.default
Guessed chat format: mistral-instruct
Building index from SQLite database...
Loading embedding model: intfloat/e5-small-v2 on CPU
Index saved to faiss_index
llama_model_loader: loaded meta data with 24 key-value pairs and 291 tensors from C:/Users/Prakhar Srivastava/Desktop/AskQuery/models/Mistral/mistral-7b-instruct-v0.2.Q4_K_M.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = llama
llama_model_loader: - kv   1:                               general.name str              = mistralai_mistral-7b-instruct-v0.2
llama_model_loader: - kv   2:                       llama.context_length u32              = 32768
llama_model_loader: - kv   3:                     llama.embedding_length u32              = 4096
llama_model_loader: - kv   4:                          llama.block_count u32              = 32
llama_model_loader: - kv   5:                  llama.feed_forward_length u32              = 14336
llama_model_loader: - kv   6:                 llama.rope.dimension_count u32              = 128
llama_model_loader: - kv   7:                 llama.attention.head_count u32              = 32
llama_model_loader: - kv   8:              llama.attention.head_count_kv u32              = 8
llama_model_loader: - kv   9:     llama.attention.layer_norm_rms_epsilon f32              = 0.000010
llama_model_loader: - kv  10:                       llama.rope.freq_base f32              = 1000000.000000
llama_model_loader: - kv  11:                          general.file_type u32              = 15
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,32000]   = ["<unk>", "<s>", "</s>", "<0x00>", "<...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,32000]   = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,32000]   = [2, 3, 3, 6, 6, 6, 6, 6, 6, 6, 6, 6, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 1
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 2
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 0
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% for message in mess...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - type  f32:   65 tensors
llama_model_loader: - type q4_K:  193 tensors
llama_model_loader: - type q6_K:   33 tensors
print_info: file format = GGUF V3 (latest)
print_info: file type   = Q4_K - Medium
print_info: file size   = 4.07 GiB (4.83 BPW) 
init_tokenizer: initializing tokenizer for type 1
load: control token:      2 '</s>' is not marked as EOG
load: control token:      1 '<s>' is not marked as EOG
load: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
load: printing all EOG tokens:
load:   - 2 ('</s>')
load: special tokens cache size = 3
load: token to piece cache size = 0.1637 MB
print_info: arch             = llama
print_info: vocab_only       = 0
print_info: n_ctx_train      = 32768
print_info: n_embd           = 4096
print_info: n_layer          = 32
print_info: n_head           = 32
print_info: n_head_kv        = 8
print_info: n_rot            = 128
print_info: n_swa            = 0
print_info: is_swa_any       = 0
print_info: n_embd_head_k    = 128
print_info: n_embd_head_v    = 128
print_info: n_gqa            = 4
print_info: n_embd_k_gqa     = 1024
print_info: n_embd_v_gqa     = 1024
print_info: f_norm_eps       = 0.0e+00
print_info: f_norm_rms_eps   = 1.0e-05
print_info: f_clamp_kqv      = 0.0e+00
print_info: f_max_alibi_bias = 0.0e+00
print_info: f_logit_scale    = 0.0e+00
print_info: f_attn_scale     = 0.0e+00
print_info: n_ff             = 14336
print_info: n_expert         = 0
print_info: n_expert_used    = 0
print_info: causal attn      = 1
print_info: pooling type     = 0
print_info: rope type        = 0
print_info: rope scaling     = linear
print_info: freq_base_train  = 1000000.0
print_info: freq_scale_train = 1
print_info: n_ctx_orig_yarn  = 32768
print_info: rope_finetuned   = unknown
print_info: model type       = 7B
print_info: model params     = 7.24 B
print_info: general.name     = mistralai_mistral-7b-instruct-v0.2
print_info: vocab type       = SPM
print_info: n_vocab          = 32000
print_info: n_merges         = 0
print_info: BOS token        = 1 '<s>'
print_info: EOS token        = 2 '</s>'
print_info: UNK token        = 0 '<unk>'
print_info: PAD token        = 0 '<unk>'
print_info: LF token         = 13 '<0x0A>'
print_info: EOG token        = 2 '</s>'
print_info: max token length = 48
load_tensors: loading model tensors, this can take a while... (mmap = true)
load_tensors: layer   0 assigned to device CPU, is_swa = 0
load_tensors: layer   1 assigned to device CPU, is_swa = 0
load_tensors: layer   2 assigned to device CPU, is_swa = 0
load_tensors: layer   3 assigned to device CPU, is_swa = 0
load_tensors: layer   4 assigned to device CPU, is_swa = 0
load_tensors: layer   5 assigned to device CPU, is_swa = 0
load_tensors: layer   6 assigned to device CPU, is_swa = 0
load_tensors: layer   7 assigned to device CPU, is_swa = 0
load_tensors: layer   8 assigned to device CPU, is_swa = 0
load_tensors: layer   9 assigned to device CPU, is_swa = 0
load_tensors: layer  10 assigned to device CPU, is_swa = 0
load_tensors: layer  11 assigned to device CPU, is_swa = 0
load_tensors: layer  12 assigned to device CPU, is_swa = 0
load_tensors: layer  13 assigned to device CPU, is_swa = 0
load_tensors: layer  14 assigned to device CPU, is_swa = 0
load_tensors: layer  15 assigned to device CPU, is_swa = 0
load_tensors: layer  16 assigned to device CPU, is_swa = 0
load_tensors: layer  17 assigned to device CPU, is_swa = 0
load_tensors: layer  18 assigned to device CPU, is_swa = 0
load_tensors: layer  19 assigned to device CPU, is_swa = 0
load_tensors: layer  20 assigned to device CPU, is_swa = 0
load_tensors: layer  21 assigned to device CPU, is_swa = 0
load_tensors: layer  22 assigned to device CPU, is_swa = 0
load_tensors: layer  23 assigned to device CPU, is_swa = 0
load_tensors: layer  24 assigned to device CPU, is_swa = 0
load_tensors: layer  25 assigned to device CPU, is_swa = 0
load_tensors: layer  26 assigned to device CPU, is_swa = 0
load_tensors: layer  27 assigned to device CPU, is_swa = 0
load_tensors: layer  28 assigned to device CPU, is_swa = 0
load_tensors: layer  29 assigned to device CPU, is_swa = 0
load_tensors: layer  30 assigned to device CPU, is_swa = 0
load_tensors: layer  31 assigned to device CPU, is_swa = 0
load_tensors: layer  32 assigned to device CPU, is_swa = 0
load_tensors: tensor 'token_embd.weight' (q4_K) (and 98 others) cannot be used with preferred buffer type CPU_REPACK, using CPU instead
load_tensors:   CPU_REPACK model buffer size =  3204.00 MiB
load_tensors:   CPU_Mapped model buffer size =  4165.37 MiB
repack: repack tensor blk.0.attn_q.weight with q4_K_8x8
repack: repack tensor blk.0.attn_k.weight with q4_K_8x8
repack: repack tensor blk.0.attn_output.weight with q4_K_8x8
repack: repack tensor blk.0.ffn_gate.weight with q4_K_8x8
.repack: repack tensor blk.0.ffn_up.weight with q4_K_8x8
repack: repack tensor blk.1.attn_q.weight with q4_K_8x8
.repack: repack tensor blk.1.attn_k.weight with q4_K_8x8
repack: repack tensor blk.1.attn_output.weight with q4_K_8x8
repack: repack tensor blk.1.ffn_gate.weight with q4_K_8x8
.repack: repack tensor blk.1.ffn_up.weight with q4_K_8x8
repack: repack tensor blk.2.attn_q.weight with q4_K_8x8
.repack: repack tensor blk.2.attn_k.weight with q4_K_8x8
repack: repack tensor blk.2.attn_output.weight with q4_K_8x8
repack: repack tensor blk.2.ffn_gate.weight with q4_K_8x8
.repack: repack tensor blk.2.ffn_up.weight with q4_K_8x8
repack: repack tensor blk.3.attn_q.weight with q4_K_8x8
.repack: repack tensor blk.3.attn_k.weight with q4_K_8x8
repack: repack tensor blk.3.attn_output.weight with q4_K_8x8
repack: repack tensor blk.3.ffn_gate.weight with q4_K_8x8
.repack: repack tensor blk.3.ffn_up.weight with q4_K_8x8
repack: repack tensor blk.4.attn_q.weight with q4_K_8x8
.repack: repack tensor blk.4.attn_k.weight with q4_K_8x8
repack: repack tensor blk.4.attn_v.weight with q4_K_8x8
repack: repack tensor blk.4.attn_output.weight with q4_K_8x8
repack: repack tensor blk.4.ffn_gate.weight with q4_K_8x8
.repack: repack tensor blk.4.ffn_down.weight with q4_K_8x8
.repack: repack tensor blk.4.ffn_up.weight with q4_K_8x8
repack: repack tensor blk.5.attn_q.weight with q4_K_8x8
.repack: repack tensor blk.5.attn_k.weight with q4_K_8x8
repack: repack tensor blk.5.attn_v.weight with q4_K_8x8
repack: repack tensor blk.5.attn_output.weight with q4_K_8x8
repack: repack tensor blk.5.ffn_gate.weight with q4_K_8x8
.repack: repack tensor blk.5.ffn_down.weight with q4_K_8x8
repack: repack tensor blk.5.ffn_up.weight with q4_K_8x8
.repack: repack tensor blk.6.attn_q.weight with q4_K_8x8
repack: repack tensor blk.6.attn_k.weight with q4_K_8x8
repack: repack tensor blk.6.attn_output.weight with q4_K_8x8
.repack: repack tensor blk.6.ffn_gate.weight with q4_K_8x8
repack: repack tensor blk.6.ffn_up.weight with q4_K_8x8
.repack: repack tensor blk.7.attn_q.weight with q4_K_8x8
repack: repack tensor blk.7.attn_k.weight with q4_K_8x8
repack: repack tensor blk.7.attn_v.weight with q4_K_8x8
repack: repack tensor blk.7.attn_output.weight with q4_K_8x8
.repack: repack tensor blk.7.ffn_gate.weight with q4_K_8x8
repack: repack tensor blk.7.ffn_down.weight with q4_K_8x8
.repack: repack tensor blk.7.ffn_up.weight with q4_K_8x8
.repack: repack tensor blk.8.attn_q.weight with q4_K_8x8
repack: repack tensor blk.8.attn_k.weight with q4_K_8x8
repack: repack tensor blk.8.attn_v.weight with q4_K_8x8
repack: repack tensor blk.8.attn_output.weight with q4_K_8x8
repack: repack tensor blk.8.ffn_gate.weight with q4_K_8x8
.repack: repack tensor blk.8.ffn_down.weight with q4_K_8x8
.repack: repack tensor blk.8.ffn_up.weight with q4_K_8x8
.repack: repack tensor blk.9.attn_q.weight with q4_K_8x8
repack: repack tensor blk.9.attn_k.weight with q4_K_8x8
repack: repack tensor blk.9.attn_output.weight with q4_K_8x8
repack: repack tensor blk.9.ffn_gate.weight with q4_K_8x8
.repack: repack tensor blk.9.ffn_up.weight with q4_K_8x8
.repack: repack tensor blk.10.attn_q.weight with q4_K_8x8
repack: repack tensor blk.10.attn_k.weight with q4_K_8x8
repack: repack tensor blk.10.attn_v.weight with q4_K_8x8
repack: repack tensor blk.10.attn_output.weight with q4_K_8x8
repack: repack tensor blk.10.ffn_gate.weight with q4_K_8x8
.repack: repack tensor blk.10.ffn_down.weight with q4_K_8x8
.repack: repack tensor blk.10.ffn_up.weight with q4_K_8x8
.repack: repack tensor blk.11.attn_q.weight with q4_K_8x8
repack: repack tensor blk.11.attn_k.weight with q4_K_8x8
repack: repack tensor blk.11.attn_v.weight with q4_K_8x8
repack: repack tensor blk.11.attn_output.weight with q4_K_8x8
repack: repack tensor blk.11.ffn_gate.weight with q4_K_8x8
.repack: repack tensor blk.11.ffn_down.weight with q4_K_8x8
.repack: repack tensor blk.11.ffn_up.weight with q4_K_8x8
repack: repack tensor blk.12.attn_q.weight with q4_K_8x8
.repack: repack tensor blk.12.attn_k.weight with q4_K_8x8
repack: repack tensor blk.12.attn_output.weight with q4_K_8x8
repack: repack tensor blk.12.ffn_gate.weight with q4_K_8x8
.repack: repack tensor blk.12.ffn_up.weight with q4_K_8x8
repack: repack tensor blk.13.attn_q.weight with q4_K_8x8
.repack: repack tensor blk.13.attn_k.weight with q4_K_8x8
repack: repack tensor blk.13.attn_v.weight with q4_K_8x8
repack: repack tensor blk.13.attn_output.weight with q4_K_8x8
repack: repack tensor blk.13.ffn_gate.weight with q4_K_8x8
.repack: repack tensor blk.13.ffn_down.weight with q4_K_8x8
repack: repack tensor blk.13.ffn_up.weight with q4_K_8x8
.repack: repack tensor blk.14.attn_q.weight with q4_K_8x8
repack: repack tensor blk.14.attn_k.weight with q4_K_8x8
repack: repack tensor blk.14.attn_v.weight with q4_K_8x8
repack: repack tensor blk.14.attn_output.weight with q4_K_8x8
.repack: repack tensor blk.14.ffn_gate.weight with q4_K_8x8
repack: repack tensor blk.14.ffn_down.weight with q4_K_8x8
.repack: repack tensor blk.14.ffn_up.weight with q4_K_8x8
.repack: repack tensor blk.15.attn_q.weight with q4_K_8x8
repack: repack tensor blk.15.attn_k.weight with q4_K_8x8
repack: repack tensor blk.15.attn_output.weight with q4_K_8x8
repack: repack tensor blk.15.ffn_gate.weight with q4_K_8x8
.repack: repack tensor blk.15.ffn_up.weight with q4_K_8x8
.repack: repack tensor blk.16.attn_q.weight with q4_K_8x8
repack: repack tensor blk.16.attn_k.weight with q4_K_8x8
repack: repack tensor blk.16.attn_v.weight with q4_K_8x8
repack: repack tensor blk.16.attn_output.weight with q4_K_8x8
.repack: repack tensor blk.16.ffn_gate.weight with q4_K_8x8
repack: repack tensor blk.16.ffn_down.weight with q4_K_8x8
.repack: repack tensor blk.16.ffn_up.weight with q4_K_8x8
.repack: repack tensor blk.17.attn_q.weight with q4_K_8x8
repack: repack tensor blk.17.attn_k.weight with q4_K_8x8
repack: repack tensor blk.17.attn_v.weight with q4_K_8x8
repack: repack tensor blk.17.attn_output.weight with q4_K_8x8
repack: repack tensor blk.17.ffn_gate.weight with q4_K_8x8
.repack: repack tensor blk.17.ffn_down.weight with q4_K_8x8
.repack: repack tensor blk.17.ffn_up.weight with q4_K_8x8
.repack: repack tensor blk.18.attn_q.weight with q4_K_8x8
repack: repack tensor blk.18.attn_k.weight with q4_K_8x8
repack: repack tensor blk.18.attn_output.weight with q4_K_8x8
repack: repack tensor blk.18.ffn_gate.weight with q4_K_8x8
.repack: repack tensor blk.18.ffn_up.weight with q4_K_8x8
.repack: repack tensor blk.19.attn_q.weight with q4_K_8x8
repack: repack tensor blk.19.attn_k.weight with q4_K_8x8
repack: repack tensor blk.19.attn_v.weight with q4_K_8x8
repack: repack tensor blk.19.attn_output.weight with q4_K_8x8
repack: repack tensor blk.19.ffn_gate.weight with q4_K_8x8
.repack: repack tensor blk.19.ffn_down.weight with q4_K_8x8
.repack: repack tensor blk.19.ffn_up.weight with q4_K_8x8
repack: repack tensor blk.20.attn_q.weight with q4_K_8x8
.repack: repack tensor blk.20.attn_k.weight with q4_K_8x8
repack: repack tensor blk.20.attn_v.weight with q4_K_8x8
repack: repack tensor blk.20.attn_output.weight with q4_K_8x8
repack: repack tensor blk.20.ffn_gate.weight with q4_K_8x8
.repack: repack tensor blk.20.ffn_down.weight with q4_K_8x8
repack: repack tensor blk.20.ffn_up.weight with q4_K_8x8
.repack: repack tensor blk.21.attn_q.weight with q4_K_8x8
repack: repack tensor blk.21.attn_k.weight with q4_K_8x8
repack: repack tensor blk.21.attn_output.weight with q4_K_8x8
.repack: repack tensor blk.21.ffn_gate.weight with q4_K_8x8
repack: repack tensor blk.21.ffn_up.weight with q4_K_8x8
.repack: repack tensor blk.22.attn_q.weight with q4_K_8x8
repack: repack tensor blk.22.attn_k.weight with q4_K_8x8
repack: repack tensor blk.22.attn_v.weight with q4_K_8x8
.repack: repack tensor blk.22.attn_output.weight with q4_K_8x8
repack: repack tensor blk.22.ffn_gate.weight with q4_K_8x8
repack: repack tensor blk.22.ffn_down.weight with q4_K_8x8
.repack: repack tensor blk.22.ffn_up.weight with q4_K_8x8
.repack: repack tensor blk.23.attn_q.weight with q4_K_8x8
repack: repack tensor blk.23.attn_k.weight with q4_K_8x8
repack: repack tensor blk.23.attn_v.weight with q4_K_8x8
repack: repack tensor blk.23.attn_output.weight with q4_K_8x8
.repack: repack tensor blk.23.ffn_gate.weight with q4_K_8x8
repack: repack tensor blk.23.ffn_down.weight with q4_K_8x8
.repack: repack tensor blk.23.ffn_up.weight with q4_K_8x8
.repack: repack tensor blk.24.attn_q.weight with q4_K_8x8
repack: repack tensor blk.24.attn_k.weight with q4_K_8x8
repack: repack tensor blk.24.attn_output.weight with q4_K_8x8
repack: repack tensor blk.24.ffn_gate.weight with q4_K_8x8
.repack: repack tensor blk.24.ffn_up.weight with q4_K_8x8
.repack: repack tensor blk.25.attn_q.weight with q4_K_8x8
repack: repack tensor blk.25.attn_k.weight with q4_K_8x8
repack: repack tensor blk.25.attn_v.weight with q4_K_8x8
repack: repack tensor blk.25.attn_output.weight with q4_K_8x8
repack: repack tensor blk.25.ffn_gate.weight with q4_K_8x8
.repack: repack tensor blk.25.ffn_down.weight with q4_K_8x8
.repack: repack tensor blk.25.ffn_up.weight with q4_K_8x8
.repack: repack tensor blk.26.attn_q.weight with q4_K_8x8
repack: repack tensor blk.26.attn_k.weight with q4_K_8x8
repack: repack tensor blk.26.attn_v.weight with q4_K_8x8
repack: repack tensor blk.26.attn_output.weight with q4_K_8x8
repack: repack tensor blk.26.ffn_gate.weight with q4_K_8x8
.repack: repack tensor blk.26.ffn_down.weight with q4_K_8x8
.repack: repack tensor blk.26.ffn_up.weight with q4_K_8x8
repack: repack tensor blk.27.attn_q.weight with q4_K_8x8
.repack: repack tensor blk.27.attn_k.weight with q4_K_8x8
repack: repack tensor blk.27.attn_output.weight with q4_K_8x8
repack: repack tensor blk.27.ffn_gate.weight with q4_K_8x8
.repack: repack tensor blk.27.ffn_up.weight with q4_K_8x8
repack: repack tensor blk.28.attn_q.weight with q4_K_8x8
.repack: repack tensor blk.28.attn_k.weight with q4_K_8x8
repack: repack tensor blk.28.attn_output.weight with q4_K_8x8
repack: repack tensor blk.28.ffn_gate.weight with q4_K_8x8
.repack: repack tensor blk.28.ffn_up.weight with q4_K_8x8
repack: repack tensor blk.29.attn_q.weight with q4_K_8x8
.repack: repack tensor blk.29.attn_k.weight with q4_K_8x8
repack: repack tensor blk.29.attn_output.weight with q4_K_8x8
repack: repack tensor blk.29.ffn_gate.weight with q4_K_8x8
.repack: repack tensor blk.29.ffn_up.weight with q4_K_8x8
repack: repack tensor blk.30.attn_q.weight with q4_K_8x8
.repack: repack tensor blk.30.attn_k.weight with q4_K_8x8
repack: repack tensor blk.30.attn_output.weight with q4_K_8x8
repack: repack tensor blk.30.ffn_gate.weight with q4_K_8x8
.repack: repack tensor blk.30.ffn_up.weight with q4_K_8x8
repack: repack tensor blk.31.attn_q.weight with q4_K_8x8
.repack: repack tensor blk.31.attn_k.weight with q4_K_8x8
repack: repack tensor blk.31.attn_output.weight with q4_K_8x8
repack: repack tensor blk.31.ffn_gate.weight with q4_K_8x8
.repack: repack tensor blk.31.ffn_up.weight with q4_K_8x8
...................
llama_context: constructing llama_context
llama_context: n_batch is less than GGML_KQ_MASK_PAD - increasing to 64
llama_context: n_seq_max     = 1
llama_context: n_ctx         = 2048
llama_context: n_ctx_per_seq = 2048
llama_context: n_batch       = 64
llama_context: n_ubatch      = 8
llama_context: causal_attn   = 1
llama_context: flash_attn    = 0
llama_context: kv_unified    = false
llama_context: freq_base     = 1000000.0
llama_context: freq_scale    = 1
llama_context: n_ctx_per_seq (2048) < n_ctx_train (32768) -- the full capacity of the model will not be utilized
set_abort_callback: call
llama_context:        CPU  output buffer size =     0.12 MiB
create_memory: n_ctx = 2048 (padded)
llama_kv_cache_unified: layer   0: dev = CPU
llama_kv_cache_unified: layer   1: dev = CPU
llama_kv_cache_unified: layer   2: dev = CPU
llama_kv_cache_unified: layer   3: dev = CPU
llama_kv_cache_unified: layer   4: dev = CPU
llama_kv_cache_unified: layer   5: dev = CPU
llama_kv_cache_unified: layer   6: dev = CPU
llama_kv_cache_unified: layer   7: dev = CPU
llama_kv_cache_unified: layer   8: dev = CPU
llama_kv_cache_unified: layer   9: dev = CPU
llama_kv_cache_unified: layer  10: dev = CPU
llama_kv_cache_unified: layer  11: dev = CPU
llama_kv_cache_unified: layer  12: dev = CPU
llama_kv_cache_unified: layer  13: dev = CPU
llama_kv_cache_unified: layer  14: dev = CPU
llama_kv_cache_unified: layer  15: dev = CPU
llama_kv_cache_unified: layer  16: dev = CPU
llama_kv_cache_unified: layer  17: dev = CPU
llama_kv_cache_unified: layer  18: dev = CPU
llama_kv_cache_unified: layer  19: dev = CPU
llama_kv_cache_unified: layer  20: dev = CPU
llama_kv_cache_unified: layer  21: dev = CPU
llama_kv_cache_unified: layer  22: dev = CPU
llama_kv_cache_unified: layer  23: dev = CPU
llama_kv_cache_unified: layer  24: dev = CPU
llama_kv_cache_unified: layer  25: dev = CPU
llama_kv_cache_unified: layer  26: dev = CPU
llama_kv_cache_unified: layer  27: dev = CPU
llama_kv_cache_unified: layer  28: dev = CPU
llama_kv_cache_unified: layer  29: dev = CPU
llama_kv_cache_unified: layer  30: dev = CPU
llama_kv_cache_unified: layer  31: dev = CPU
llama_kv_cache_unified:        CPU KV buffer size =   256.00 MiB
llama_kv_cache_unified: size =  256.00 MiB (  2048 cells,  32 layers,  1/1 seqs), K (f16):  128.00 MiB, V (f16):  128.00 MiB
llama_context: enumerating backends
llama_context: backend_ptrs.size() = 1
llama_context: max_nodes = 2328
llama_context: worst-case: n_tokens = 8, n_seqs = 1, n_outputs = 0
graph_reserve: reserving a graph for ubatch with n_tokens =    8, n_seqs =  1, n_outputs =    8
graph_reserve: reserving a graph for ubatch with n_tokens =    1, n_seqs =  1, n_outputs =    1
graph_reserve: reserving a graph for ubatch with n_tokens =    8, n_seqs =  1, n_outputs =    8
llama_context:        CPU compute buffer size =     3.06 MiB
llama_context: graph nodes  = 1126
llama_context: graph splits = 1
CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | LLAMAFILE = 1 | OPENMP = 1 | REPACK = 1 | 
Model metadata: {'general.name': 'mistralai_mistral-7b-instruct-v0.2', 'general.architecture': 'llama', 'llama.context_length': '32768', 'llama.rope.dimension_count': '128', 'llama.embedding_length': '4096', 'llama.block_count': '32', 'llama.feed_forward_length': '14336', 'llama.attention.head_count': '32', 'tokenizer.ggml.eos_token_id': '2', 'general.file_type': '15', 'llama.attention.head_count_kv': '8', 'llama.attention.layer_norm_rms_epsilon': '0.000010', 'llama.rope.freq_base': '1000000.000000', 'tokenizer.ggml.model': 'llama', 'general.quantization_version': '2', 'tokenizer.ggml.bos_token_id': '1', 'tokenizer.ggml.unknown_token_id': '0', 'tokenizer.ggml.padding_token_id': '0', 'tokenizer.ggml.add_bos_token': 'true', 'tokenizer.ggml.add_eos_token': 'false', 'tokenizer.chat_template': "{{ bos_token }}{% for message in messages %}{% if (message['role'] == 'user') != (loop.index0 % 2 == 0) %}{{ raise_exception('Conversation roles must alternate user/assistant/user/assistant/...') }}{% endif %}{% if message['role'] == 'user' %}{{ '[INST] ' + message['content'] + ' [/INST]' }}{% elif message['role'] == 'assistant' %}{{ message['content'] + eos_token}}{% else %}{{ raise_exception('Only user and assistant roles are supported!') }}{% endif %}{% endfor %}"}
Available chat formats from metadata: chat_template.default
Guessed chat format: mistral-instruct
Building index from SQLite database...
Loading embedding model: intfloat/e5-small-v2 on CPU
Index saved to faiss_index
llama_perf_context_print:        load time =  256554.89 ms
llama_perf_context_print: prompt eval time =  256548.39 ms /   549 tokens (  467.30 ms per token,     2.14 tokens per second)
llama_perf_context_print:        eval time =   38605.94 ms /    31 runs   ( 1245.35 ms per token,     0.80 tokens per second)
llama_perf_context_print:       total time =  295213.45 ms /   580 tokens
llama_perf_context_print:    graphs reused =         80
LLM is explicitly disabled. Using MockLLM.
LLM is explicitly disabled. Using MockLLM.
llama_model_loader: loaded meta data with 24 key-value pairs and 291 tensors from C:/Users/Prakhar Srivastava/Desktop/AskQuery/models/Mistral/mistral-7b-instruct-v0.2.Q4_K_M.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = llama
llama_model_loader: - kv   1:                               general.name str              = mistralai_mistral-7b-instruct-v0.2
llama_model_loader: - kv   2:                       llama.context_length u32              = 32768
llama_model_loader: - kv   3:                     llama.embedding_length u32              = 4096
llama_model_loader: - kv   4:                          llama.block_count u32              = 32
llama_model_loader: - kv   5:                  llama.feed_forward_length u32              = 14336
llama_model_loader: - kv   6:                 llama.rope.dimension_count u32              = 128
llama_model_loader: - kv   7:                 llama.attention.head_count u32              = 32
llama_model_loader: - kv   8:              llama.attention.head_count_kv u32              = 8
llama_model_loader: - kv   9:     llama.attention.layer_norm_rms_epsilon f32              = 0.000010
llama_model_loader: - kv  10:                       llama.rope.freq_base f32              = 1000000.000000
llama_model_loader: - kv  11:                          general.file_type u32              = 15
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,32000]   = ["<unk>", "<s>", "</s>", "<0x00>", "<...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,32000]   = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,32000]   = [2, 3, 3, 6, 6, 6, 6, 6, 6, 6, 6, 6, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 1
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 2
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 0
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% for message in mess...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - type  f32:   65 tensors
llama_model_loader: - type q4_K:  193 tensors
llama_model_loader: - type q6_K:   33 tensors
print_info: file format = GGUF V3 (latest)
print_info: file type   = Q4_K - Medium
print_info: file size   = 4.07 GiB (4.83 BPW) 
init_tokenizer: initializing tokenizer for type 1
load: control token:      2 '</s>' is not marked as EOG
load: control token:      1 '<s>' is not marked as EOG
load: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
load: printing all EOG tokens:
load:   - 2 ('</s>')
load: special tokens cache size = 3
load: token to piece cache size = 0.1637 MB
print_info: arch             = llama
print_info: vocab_only       = 0
print_info: n_ctx_train      = 32768
print_info: n_embd           = 4096
print_info: n_layer          = 32
print_info: n_head           = 32
print_info: n_head_kv        = 8
print_info: n_rot            = 128
print_info: n_swa            = 0
print_info: is_swa_any       = 0
print_info: n_embd_head_k    = 128
print_info: n_embd_head_v    = 128
print_info: n_gqa            = 4
print_info: n_embd_k_gqa     = 1024
print_info: n_embd_v_gqa     = 1024
print_info: f_norm_eps       = 0.0e+00
print_info: f_norm_rms_eps   = 1.0e-05
print_info: f_clamp_kqv      = 0.0e+00
print_info: f_max_alibi_bias = 0.0e+00
print_info: f_logit_scale    = 0.0e+00
print_info: f_attn_scale     = 0.0e+00
print_info: n_ff             = 14336
print_info: n_expert         = 0
print_info: n_expert_used    = 0
print_info: causal attn      = 1
print_info: pooling type     = 0
print_info: rope type        = 0
print_info: rope scaling     = linear
print_info: freq_base_train  = 1000000.0
print_info: freq_scale_train = 1
print_info: n_ctx_orig_yarn  = 32768
print_info: rope_finetuned   = unknown
print_info: model type       = 7B
print_info: model params     = 7.24 B
print_info: general.name     = mistralai_mistral-7b-instruct-v0.2
print_info: vocab type       = SPM
print_info: n_vocab          = 32000
print_info: n_merges         = 0
print_info: BOS token        = 1 '<s>'
print_info: EOS token        = 2 '</s>'
print_info: UNK token        = 0 '<unk>'
print_info: PAD token        = 0 '<unk>'
print_info: LF token         = 13 '<0x0A>'
print_info: EOG token        = 2 '</s>'
print_info: max token length = 48
load_tensors: loading model tensors, this can take a while... (mmap = true)
load_tensors: layer   0 assigned to device CPU, is_swa = 0
load_tensors: layer   1 assigned to device CPU, is_swa = 0
load_tensors: layer   2 assigned to device CPU, is_swa = 0
load_tensors: layer   3 assigned to device CPU, is_swa = 0
load_tensors: layer   4 assigned to device CPU, is_swa = 0
load_tensors: layer   5 assigned to device CPU, is_swa = 0
load_tensors: layer   6 assigned to device CPU, is_swa = 0
load_tensors: layer   7 assigned to device CPU, is_swa = 0
load_tensors: layer   8 assigned to device CPU, is_swa = 0
load_tensors: layer   9 assigned to device CPU, is_swa = 0
load_tensors: layer  10 assigned to device CPU, is_swa = 0
load_tensors: layer  11 assigned to device CPU, is_swa = 0
load_tensors: layer  12 assigned to device CPU, is_swa = 0
load_tensors: layer  13 assigned to device CPU, is_swa = 0
load_tensors: layer  14 assigned to device CPU, is_swa = 0
load_tensors: layer  15 assigned to device CPU, is_swa = 0
load_tensors: layer  16 assigned to device CPU, is_swa = 0
load_tensors: layer  17 assigned to device CPU, is_swa = 0
load_tensors: layer  18 assigned to device CPU, is_swa = 0
load_tensors: layer  19 assigned to device CPU, is_swa = 0
load_tensors: layer  20 assigned to device CPU, is_swa = 0
load_tensors: layer  21 assigned to device CPU, is_swa = 0
load_tensors: layer  22 assigned to device CPU, is_swa = 0
load_tensors: layer  23 assigned to device CPU, is_swa = 0
load_tensors: layer  24 assigned to device CPU, is_swa = 0
load_tensors: layer  25 assigned to device CPU, is_swa = 0
load_tensors: layer  26 assigned to device CPU, is_swa = 0
load_tensors: layer  27 assigned to device CPU, is_swa = 0
load_tensors: layer  28 assigned to device CPU, is_swa = 0
load_tensors: layer  29 assigned to device CPU, is_swa = 0
load_tensors: layer  30 assigned to device CPU, is_swa = 0
load_tensors: layer  31 assigned to device CPU, is_swa = 0
load_tensors: layer  32 assigned to device CPU, is_swa = 0
load_tensors: tensor 'token_embd.weight' (q4_K) (and 98 others) cannot be used with preferred buffer type CPU_REPACK, using CPU instead
load_tensors:   CPU_REPACK model buffer size =  3204.00 MiB
load_tensors:   CPU_Mapped model buffer size =  4165.37 MiB
repack: repack tensor blk.0.attn_q.weight with q4_K_8x8
repack: repack tensor blk.0.attn_k.weight with q4_K_8x8
repack: repack tensor blk.0.attn_output.weight with q4_K_8x8
repack: repack tensor blk.0.ffn_gate.weight with q4_K_8x8
.repack: repack tensor blk.0.ffn_up.weight with q4_K_8x8
repack: repack tensor blk.1.attn_q.weight with q4_K_8x8
.repack: repack tensor blk.1.attn_k.weight with q4_K_8x8
repack: repack tensor blk.1.attn_output.weight with q4_K_8x8
repack: repack tensor blk.1.ffn_gate.weight with q4_K_8x8
.repack: repack tensor blk.1.ffn_up.weight with q4_K_8x8
repack: repack tensor blk.2.attn_q.weight with q4_K_8x8
.repack: repack tensor blk.2.attn_k.weight with q4_K_8x8
repack: repack tensor blk.2.attn_output.weight with q4_K_8x8
repack: repack tensor blk.2.ffn_gate.weight with q4_K_8x8
.repack: repack tensor blk.2.ffn_up.weight with q4_K_8x8
repack: repack tensor blk.3.attn_q.weight with q4_K_8x8
.repack: repack tensor blk.3.attn_k.weight with q4_K_8x8
repack: repack tensor blk.3.attn_output.weight with q4_K_8x8
repack: repack tensor blk.3.ffn_gate.weight with q4_K_8x8
.repack: repack tensor blk.3.ffn_up.weight with q4_K_8x8
repack: repack tensor blk.4.attn_q.weight with q4_K_8x8
.repack: repack tensor blk.4.attn_k.weight with q4_K_8x8
repack: repack tensor blk.4.attn_v.weight with q4_K_8x8
repack: repack tensor blk.4.attn_output.weight with q4_K_8x8
repack: repack tensor blk.4.ffn_gate.weight with q4_K_8x8
.repack: repack tensor blk.4.ffn_down.weight with q4_K_8x8
.repack: repack tensor blk.4.ffn_up.weight with q4_K_8x8
repack: repack tensor blk.5.attn_q.weight with q4_K_8x8
.repack: repack tensor blk.5.attn_k.weight with q4_K_8x8
repack: repack tensor blk.5.attn_v.weight with q4_K_8x8
repack: repack tensor blk.5.attn_output.weight with q4_K_8x8
repack: repack tensor blk.5.ffn_gate.weight with q4_K_8x8
.repack: repack tensor blk.5.ffn_down.weight with q4_K_8x8
repack: repack tensor blk.5.ffn_up.weight with q4_K_8x8
.repack: repack tensor blk.6.attn_q.weight with q4_K_8x8
repack: repack tensor blk.6.attn_k.weight with q4_K_8x8
repack: repack tensor blk.6.attn_output.weight with q4_K_8x8
.repack: repack tensor blk.6.ffn_gate.weight with q4_K_8x8
repack: repack tensor blk.6.ffn_up.weight with q4_K_8x8
.repack: repack tensor blk.7.attn_q.weight with q4_K_8x8
repack: repack tensor blk.7.attn_k.weight with q4_K_8x8
repack: repack tensor blk.7.attn_v.weight with q4_K_8x8
repack: repack tensor blk.7.attn_output.weight with q4_K_8x8
.repack: repack tensor blk.7.ffn_gate.weight with q4_K_8x8
repack: repack tensor blk.7.ffn_down.weight with q4_K_8x8
.repack: repack tensor blk.7.ffn_up.weight with q4_K_8x8
.repack: repack tensor blk.8.attn_q.weight with q4_K_8x8
repack: repack tensor blk.8.attn_k.weight with q4_K_8x8
repack: repack tensor blk.8.attn_v.weight with q4_K_8x8
repack: repack tensor blk.8.attn_output.weight with q4_K_8x8
repack: repack tensor blk.8.ffn_gate.weight with q4_K_8x8
.repack: repack tensor blk.8.ffn_down.weight with q4_K_8x8
.repack: repack tensor blk.8.ffn_up.weight with q4_K_8x8
.repack: repack tensor blk.9.attn_q.weight with q4_K_8x8
repack: repack tensor blk.9.attn_k.weight with q4_K_8x8
repack: repack tensor blk.9.attn_output.weight with q4_K_8x8
repack: repack tensor blk.9.ffn_gate.weight with q4_K_8x8
.repack: repack tensor blk.9.ffn_up.weight with q4_K_8x8
.repack: repack tensor blk.10.attn_q.weight with q4_K_8x8
repack: repack tensor blk.10.attn_k.weight with q4_K_8x8
repack: repack tensor blk.10.attn_v.weight with q4_K_8x8
repack: repack tensor blk.10.attn_output.weight with q4_K_8x8
repack: repack tensor blk.10.ffn_gate.weight with q4_K_8x8
.repack: repack tensor blk.10.ffn_down.weight with q4_K_8x8
.repack: repack tensor blk.10.ffn_up.weight with q4_K_8x8
.repack: repack tensor blk.11.attn_q.weight with q4_K_8x8
repack: repack tensor blk.11.attn_k.weight with q4_K_8x8
repack: repack tensor blk.11.attn_v.weight with q4_K_8x8
repack: repack tensor blk.11.attn_output.weight with q4_K_8x8
repack: repack tensor blk.11.ffn_gate.weight with q4_K_8x8
.repack: repack tensor blk.11.ffn_down.weight with q4_K_8x8
.repack: repack tensor blk.11.ffn_up.weight with q4_K_8x8
repack: repack tensor blk.12.attn_q.weight with q4_K_8x8
.repack: repack tensor blk.12.attn_k.weight with q4_K_8x8
repack: repack tensor blk.12.attn_output.weight with q4_K_8x8
repack: repack tensor blk.12.ffn_gate.weight with q4_K_8x8
.repack: repack tensor blk.12.ffn_up.weight with q4_K_8x8
repack: repack tensor blk.13.attn_q.weight with q4_K_8x8
.repack: repack tensor blk.13.attn_k.weight with q4_K_8x8
repack: repack tensor blk.13.attn_v.weight with q4_K_8x8
repack: repack tensor blk.13.attn_output.weight with q4_K_8x8
repack: repack tensor blk.13.ffn_gate.weight with q4_K_8x8
.repack: repack tensor blk.13.ffn_down.weight with q4_K_8x8
repack: repack tensor blk.13.ffn_up.weight with q4_K_8x8
.repack: repack tensor blk.14.attn_q.weight with q4_K_8x8
repack: repack tensor blk.14.attn_k.weight with q4_K_8x8
repack: repack tensor blk.14.attn_v.weight with q4_K_8x8
repack: repack tensor blk.14.attn_output.weight with q4_K_8x8
.repack: repack tensor blk.14.ffn_gate.weight with q4_K_8x8
repack: repack tensor blk.14.ffn_down.weight with q4_K_8x8
.repack: repack tensor blk.14.ffn_up.weight with q4_K_8x8
.repack: repack tensor blk.15.attn_q.weight with q4_K_8x8
repack: repack tensor blk.15.attn_k.weight with q4_K_8x8
repack: repack tensor blk.15.attn_output.weight with q4_K_8x8
repack: repack tensor blk.15.ffn_gate.weight with q4_K_8x8
.repack: repack tensor blk.15.ffn_up.weight with q4_K_8x8
.repack: repack tensor blk.16.attn_q.weight with q4_K_8x8
repack: repack tensor blk.16.attn_k.weight with q4_K_8x8
repack: repack tensor blk.16.attn_v.weight with q4_K_8x8
repack: repack tensor blk.16.attn_output.weight with q4_K_8x8
.repack: repack tensor blk.16.ffn_gate.weight with q4_K_8x8
repack: repack tensor blk.16.ffn_down.weight with q4_K_8x8
.repack: repack tensor blk.16.ffn_up.weight with q4_K_8x8
.repack: repack tensor blk.17.attn_q.weight with q4_K_8x8
repack: repack tensor blk.17.attn_k.weight with q4_K_8x8
repack: repack tensor blk.17.attn_v.weight with q4_K_8x8
repack: repack tensor blk.17.attn_output.weight with q4_K_8x8
repack: repack tensor blk.17.ffn_gate.weight with q4_K_8x8
.repack: repack tensor blk.17.ffn_down.weight with q4_K_8x8
.repack: repack tensor blk.17.ffn_up.weight with q4_K_8x8
.repack: repack tensor blk.18.attn_q.weight with q4_K_8x8
repack: repack tensor blk.18.attn_k.weight with q4_K_8x8
repack: repack tensor blk.18.attn_output.weight with q4_K_8x8
repack: repack tensor blk.18.ffn_gate.weight with q4_K_8x8
.repack: repack tensor blk.18.ffn_up.weight with q4_K_8x8
.repack: repack tensor blk.19.attn_q.weight with q4_K_8x8
repack: repack tensor blk.19.attn_k.weight with q4_K_8x8
repack: repack tensor blk.19.attn_v.weight with q4_K_8x8
repack: repack tensor blk.19.attn_output.weight with q4_K_8x8
repack: repack tensor blk.19.ffn_gate.weight with q4_K_8x8
.repack: repack tensor blk.19.ffn_down.weight with q4_K_8x8
.repack: repack tensor blk.19.ffn_up.weight with q4_K_8x8
repack: repack tensor blk.20.attn_q.weight with q4_K_8x8
.repack: repack tensor blk.20.attn_k.weight with q4_K_8x8
repack: repack tensor blk.20.attn_v.weight with q4_K_8x8
repack: repack tensor blk.20.attn_output.weight with q4_K_8x8
repack: repack tensor blk.20.ffn_gate.weight with q4_K_8x8
.repack: repack tensor blk.20.ffn_down.weight with q4_K_8x8
repack: repack tensor blk.20.ffn_up.weight with q4_K_8x8
.repack: repack tensor blk.21.attn_q.weight with q4_K_8x8
repack: repack tensor blk.21.attn_k.weight with q4_K_8x8
repack: repack tensor blk.21.attn_output.weight with q4_K_8x8
.repack: repack tensor blk.21.ffn_gate.weight with q4_K_8x8
repack: repack tensor blk.21.ffn_up.weight with q4_K_8x8
.repack: repack tensor blk.22.attn_q.weight with q4_K_8x8
repack: repack tensor blk.22.attn_k.weight with q4_K_8x8
repack: repack tensor blk.22.attn_v.weight with q4_K_8x8
.repack: repack tensor blk.22.attn_output.weight with q4_K_8x8
repack: repack tensor blk.22.ffn_gate.weight with q4_K_8x8
repack: repack tensor blk.22.ffn_down.weight with q4_K_8x8
.repack: repack tensor blk.22.ffn_up.weight with q4_K_8x8
.repack: repack tensor blk.23.attn_q.weight with q4_K_8x8
repack: repack tensor blk.23.attn_k.weight with q4_K_8x8
repack: repack tensor blk.23.attn_v.weight with q4_K_8x8
repack: repack tensor blk.23.attn_output.weight with q4_K_8x8
.repack: repack tensor blk.23.ffn_gate.weight with q4_K_8x8
repack: repack tensor blk.23.ffn_down.weight with q4_K_8x8
.repack: repack tensor blk.23.ffn_up.weight with q4_K_8x8
.repack: repack tensor blk.24.attn_q.weight with q4_K_8x8
repack: repack tensor blk.24.attn_k.weight with q4_K_8x8
repack: repack tensor blk.24.attn_output.weight with q4_K_8x8
repack: repack tensor blk.24.ffn_gate.weight with q4_K_8x8
.repack: repack tensor blk.24.ffn_up.weight with q4_K_8x8
.repack: repack tensor blk.25.attn_q.weight with q4_K_8x8
repack: repack tensor blk.25.attn_k.weight with q4_K_8x8
repack: repack tensor blk.25.attn_v.weight with q4_K_8x8
repack: repack tensor blk.25.attn_output.weight with q4_K_8x8
repack: repack tensor blk.25.ffn_gate.weight with q4_K_8x8
.repack: repack tensor blk.25.ffn_down.weight with q4_K_8x8
.repack: repack tensor blk.25.ffn_up.weight with q4_K_8x8
.repack: repack tensor blk.26.attn_q.weight with q4_K_8x8
repack: repack tensor blk.26.attn_k.weight with q4_K_8x8
repack: repack tensor blk.26.attn_v.weight with q4_K_8x8
repack: repack tensor blk.26.attn_output.weight with q4_K_8x8
repack: repack tensor blk.26.ffn_gate.weight with q4_K_8x8
.repack: repack tensor blk.26.ffn_down.weight with q4_K_8x8
.repack: repack tensor blk.26.ffn_up.weight with q4_K_8x8
repack: repack tensor blk.27.attn_q.weight with q4_K_8x8
.repack: repack tensor blk.27.attn_k.weight with q4_K_8x8
repack: repack tensor blk.27.attn_output.weight with q4_K_8x8
repack: repack tensor blk.27.ffn_gate.weight with q4_K_8x8
.repack: repack tensor blk.27.ffn_up.weight with q4_K_8x8
repack: repack tensor blk.28.attn_q.weight with q4_K_8x8
.repack: repack tensor blk.28.attn_k.weight with q4_K_8x8
repack: repack tensor blk.28.attn_output.weight with q4_K_8x8
repack: repack tensor blk.28.ffn_gate.weight with q4_K_8x8
.repack: repack tensor blk.28.ffn_up.weight with q4_K_8x8
repack: repack tensor blk.29.attn_q.weight with q4_K_8x8
.repack: repack tensor blk.29.attn_k.weight with q4_K_8x8
repack: repack tensor blk.29.attn_output.weight with q4_K_8x8
repack: repack tensor blk.29.ffn_gate.weight with q4_K_8x8
.repack: repack tensor blk.29.ffn_up.weight with q4_K_8x8
repack: repack tensor blk.30.attn_q.weight with q4_K_8x8
.repack: repack tensor blk.30.attn_k.weight with q4_K_8x8
repack: repack tensor blk.30.attn_output.weight with q4_K_8x8
repack: repack tensor blk.30.ffn_gate.weight with q4_K_8x8
.repack: repack tensor blk.30.ffn_up.weight with q4_K_8x8
repack: repack tensor blk.31.attn_q.weight with q4_K_8x8
.repack: repack tensor blk.31.attn_k.weight with q4_K_8x8
repack: repack tensor blk.31.attn_output.weight with q4_K_8x8
repack: repack tensor blk.31.ffn_gate.weight with q4_K_8x8
.repack: repack tensor blk.31.ffn_up.weight with q4_K_8x8
...................
llama_context: constructing llama_context
llama_context: n_batch is less than GGML_KQ_MASK_PAD - increasing to 64
llama_context: n_seq_max     = 1
llama_context: n_ctx         = 2048
llama_context: n_ctx_per_seq = 2048
llama_context: n_batch       = 64
llama_context: n_ubatch      = 8
llama_context: causal_attn   = 1
llama_context: flash_attn    = 0
llama_context: kv_unified    = false
llama_context: freq_base     = 1000000.0
llama_context: freq_scale    = 1
llama_context: n_ctx_per_seq (2048) < n_ctx_train (32768) -- the full capacity of the model will not be utilized
set_abort_callback: call
llama_context:        CPU  output buffer size =     0.12 MiB
create_memory: n_ctx = 2048 (padded)
llama_kv_cache_unified: layer   0: dev = CPU
llama_kv_cache_unified: layer   1: dev = CPU
llama_kv_cache_unified: layer   2: dev = CPU
llama_kv_cache_unified: layer   3: dev = CPU
llama_kv_cache_unified: layer   4: dev = CPU
llama_kv_cache_unified: layer   5: dev = CPU
llama_kv_cache_unified: layer   6: dev = CPU
llama_kv_cache_unified: layer   7: dev = CPU
llama_kv_cache_unified: layer   8: dev = CPU
llama_kv_cache_unified: layer   9: dev = CPU
llama_kv_cache_unified: layer  10: dev = CPU
llama_kv_cache_unified: layer  11: dev = CPU
llama_kv_cache_unified: layer  12: dev = CPU
llama_kv_cache_unified: layer  13: dev = CPU
llama_kv_cache_unified: layer  14: dev = CPU
llama_kv_cache_unified: layer  15: dev = CPU
llama_kv_cache_unified: layer  16: dev = CPU
llama_kv_cache_unified: layer  17: dev = CPU
llama_kv_cache_unified: layer  18: dev = CPU
llama_kv_cache_unified: layer  19: dev = CPU
llama_kv_cache_unified: layer  20: dev = CPU
llama_kv_cache_unified: layer  21: dev = CPU
llama_kv_cache_unified: layer  22: dev = CPU
llama_kv_cache_unified: layer  23: dev = CPU
llama_kv_cache_unified: layer  24: dev = CPU
llama_kv_cache_unified: layer  25: dev = CPU
llama_kv_cache_unified: layer  26: dev = CPU
llama_kv_cache_unified: layer  27: dev = CPU
llama_kv_cache_unified: layer  28: dev = CPU
llama_kv_cache_unified: layer  29: dev = CPU
llama_kv_cache_unified: layer  30: dev = CPU
llama_kv_cache_unified: layer  31: dev = CPU
llama_kv_cache_unified:        CPU KV buffer size =   256.00 MiB
llama_kv_cache_unified: size =  256.00 MiB (  2048 cells,  32 layers,  1/1 seqs), K (f16):  128.00 MiB, V (f16):  128.00 MiB
llama_context: enumerating backends
llama_context: backend_ptrs.size() = 1
llama_context: max_nodes = 2328
llama_context: worst-case: n_tokens = 8, n_seqs = 1, n_outputs = 0
graph_reserve: reserving a graph for ubatch with n_tokens =    8, n_seqs =  1, n_outputs =    8
graph_reserve: reserving a graph for ubatch with n_tokens =    1, n_seqs =  1, n_outputs =    1
graph_reserve: reserving a graph for ubatch with n_tokens =    8, n_seqs =  1, n_outputs =    8
llama_context:        CPU compute buffer size =     3.06 MiB
llama_context: graph nodes  = 1126
llama_context: graph splits = 1
CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | LLAMAFILE = 1 | OPENMP = 1 | REPACK = 1 | 
Model metadata: {'general.name': 'mistralai_mistral-7b-instruct-v0.2', 'general.architecture': 'llama', 'llama.context_length': '32768', 'llama.rope.dimension_count': '128', 'llama.embedding_length': '4096', 'llama.block_count': '32', 'llama.feed_forward_length': '14336', 'llama.attention.head_count': '32', 'tokenizer.ggml.eos_token_id': '2', 'general.file_type': '15', 'llama.attention.head_count_kv': '8', 'llama.attention.layer_norm_rms_epsilon': '0.000010', 'llama.rope.freq_base': '1000000.000000', 'tokenizer.ggml.model': 'llama', 'general.quantization_version': '2', 'tokenizer.ggml.bos_token_id': '1', 'tokenizer.ggml.unknown_token_id': '0', 'tokenizer.ggml.padding_token_id': '0', 'tokenizer.ggml.add_bos_token': 'true', 'tokenizer.ggml.add_eos_token': 'false', 'tokenizer.chat_template': "{{ bos_token }}{% for message in messages %}{% if (message['role'] == 'user') != (loop.index0 % 2 == 0) %}{{ raise_exception('Conversation roles must alternate user/assistant/user/assistant/...') }}{% endif %}{% if message['role'] == 'user' %}{{ '[INST] ' + message['content'] + ' [/INST]' }}{% elif message['role'] == 'assistant' %}{{ message['content'] + eos_token}}{% else %}{{ raise_exception('Only user and assistant roles are supported!') }}{% endif %}{% endfor %}"}
Available chat formats from metadata: chat_template.default
Guessed chat format: mistral-instruct
Building index from SQLite database...
Loading embedding model: intfloat/e5-small-v2 on CPU
Index saved to faiss_index
llama_perf_context_print:        load time =  189515.86 ms
llama_perf_context_print: prompt eval time =  189515.26 ms /   549 tokens (  345.20 ms per token,     2.90 tokens per second)
llama_perf_context_print:        eval time =   30484.62 ms /    45 runs   (  677.44 ms per token,     1.48 tokens per second)
llama_perf_context_print:       total time =  220058.52 ms /   594 tokens
llama_perf_context_print:    graphs reused =         94
LLM is explicitly disabled. Using MockLLM.
llama_model_loader: loaded meta data with 24 key-value pairs and 291 tensors from C:/Users/Prakhar Srivastava/Desktop/AskQuery/models/Mistral/mistral-7b-instruct-v0.2.Q4_K_M.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = llama
llama_model_loader: - kv   1:                               general.name str              = mistralai_mistral-7b-instruct-v0.2
llama_model_loader: - kv   2:                       llama.context_length u32              = 32768
llama_model_loader: - kv   3:                     llama.embedding_length u32              = 4096
llama_model_loader: - kv   4:                          llama.block_count u32              = 32
llama_model_loader: - kv   5:                  llama.feed_forward_length u32              = 14336
llama_model_loader: - kv   6:                 llama.rope.dimension_count u32              = 128
llama_model_loader: - kv   7:                 llama.attention.head_count u32              = 32
llama_model_loader: - kv   8:              llama.attention.head_count_kv u32              = 8
llama_model_loader: - kv   9:     llama.attention.layer_norm_rms_epsilon f32              = 0.000010
llama_model_loader: - kv  10:                       llama.rope.freq_base f32              = 1000000.000000
llama_model_loader: - kv  11:                          general.file_type u32              = 15
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,32000]   = ["<unk>", "<s>", "</s>", "<0x00>", "<...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,32000]   = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,32000]   = [2, 3, 3, 6, 6, 6, 6, 6, 6, 6, 6, 6, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 1
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 2
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 0
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% for message in mess...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - type  f32:   65 tensors
llama_model_loader: - type q4_K:  193 tensors
llama_model_loader: - type q6_K:   33 tensors
print_info: file format = GGUF V3 (latest)
print_info: file type   = Q4_K - Medium
print_info: file size   = 4.07 GiB (4.83 BPW) 
init_tokenizer: initializing tokenizer for type 1
load: control token:      2 '</s>' is not marked as EOG
load: control token:      1 '<s>' is not marked as EOG
load: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
load: printing all EOG tokens:
load:   - 2 ('</s>')
load: special tokens cache size = 3
load: token to piece cache size = 0.1637 MB
print_info: arch             = llama
print_info: vocab_only       = 0
print_info: n_ctx_train      = 32768
print_info: n_embd           = 4096
print_info: n_layer          = 32
print_info: n_head           = 32
print_info: n_head_kv        = 8
print_info: n_rot            = 128
print_info: n_swa            = 0
print_info: is_swa_any       = 0
print_info: n_embd_head_k    = 128
print_info: n_embd_head_v    = 128
print_info: n_gqa            = 4
print_info: n_embd_k_gqa     = 1024
print_info: n_embd_v_gqa     = 1024
print_info: f_norm_eps       = 0.0e+00
print_info: f_norm_rms_eps   = 1.0e-05
print_info: f_clamp_kqv      = 0.0e+00
print_info: f_max_alibi_bias = 0.0e+00
print_info: f_logit_scale    = 0.0e+00
print_info: f_attn_scale     = 0.0e+00
print_info: n_ff             = 14336
print_info: n_expert         = 0
print_info: n_expert_used    = 0
print_info: causal attn      = 1
print_info: pooling type     = 0
print_info: rope type        = 0
print_info: rope scaling     = linear
print_info: freq_base_train  = 1000000.0
print_info: freq_scale_train = 1
print_info: n_ctx_orig_yarn  = 32768
print_info: rope_finetuned   = unknown
print_info: model type       = 7B
print_info: model params     = 7.24 B
print_info: general.name     = mistralai_mistral-7b-instruct-v0.2
print_info: vocab type       = SPM
print_info: n_vocab          = 32000
print_info: n_merges         = 0
print_info: BOS token        = 1 '<s>'
print_info: EOS token        = 2 '</s>'
print_info: UNK token        = 0 '<unk>'
print_info: PAD token        = 0 '<unk>'
print_info: LF token         = 13 '<0x0A>'
print_info: EOG token        = 2 '</s>'
print_info: max token length = 48
load_tensors: loading model tensors, this can take a while... (mmap = true)
load_tensors: layer   0 assigned to device CPU, is_swa = 0
load_tensors: layer   1 assigned to device CPU, is_swa = 0
load_tensors: layer   2 assigned to device CPU, is_swa = 0
load_tensors: layer   3 assigned to device CPU, is_swa = 0
load_tensors: layer   4 assigned to device CPU, is_swa = 0
load_tensors: layer   5 assigned to device CPU, is_swa = 0
load_tensors: layer   6 assigned to device CPU, is_swa = 0
load_tensors: layer   7 assigned to device CPU, is_swa = 0
load_tensors: layer   8 assigned to device CPU, is_swa = 0
load_tensors: layer   9 assigned to device CPU, is_swa = 0
load_tensors: layer  10 assigned to device CPU, is_swa = 0
load_tensors: layer  11 assigned to device CPU, is_swa = 0
load_tensors: layer  12 assigned to device CPU, is_swa = 0
load_tensors: layer  13 assigned to device CPU, is_swa = 0
load_tensors: layer  14 assigned to device CPU, is_swa = 0
load_tensors: layer  15 assigned to device CPU, is_swa = 0
load_tensors: layer  16 assigned to device CPU, is_swa = 0
load_tensors: layer  17 assigned to device CPU, is_swa = 0
load_tensors: layer  18 assigned to device CPU, is_swa = 0
load_tensors: layer  19 assigned to device CPU, is_swa = 0
load_tensors: layer  20 assigned to device CPU, is_swa = 0
load_tensors: layer  21 assigned to device CPU, is_swa = 0
load_tensors: layer  22 assigned to device CPU, is_swa = 0
load_tensors: layer  23 assigned to device CPU, is_swa = 0
load_tensors: layer  24 assigned to device CPU, is_swa = 0
load_tensors: layer  25 assigned to device CPU, is_swa = 0
load_tensors: layer  26 assigned to device CPU, is_swa = 0
load_tensors: layer  27 assigned to device CPU, is_swa = 0
load_tensors: layer  28 assigned to device CPU, is_swa = 0
load_tensors: layer  29 assigned to device CPU, is_swa = 0
load_tensors: layer  30 assigned to device CPU, is_swa = 0
load_tensors: layer  31 assigned to device CPU, is_swa = 0
load_tensors: layer  32 assigned to device CPU, is_swa = 0
load_tensors: tensor 'token_embd.weight' (q4_K) (and 98 others) cannot be used with preferred buffer type CPU_REPACK, using CPU instead
load_tensors:   CPU_REPACK model buffer size =  3204.00 MiB
load_tensors:   CPU_Mapped model buffer size =  4165.37 MiB
repack: repack tensor blk.0.attn_q.weight with q4_K_8x8
repack: repack tensor blk.0.attn_k.weight with q4_K_8x8
repack: repack tensor blk.0.attn_output.weight with q4_K_8x8
repack: repack tensor blk.0.ffn_gate.weight with q4_K_8x8
.repack: repack tensor blk.0.ffn_up.weight with q4_K_8x8
repack: repack tensor blk.1.attn_q.weight with q4_K_8x8
.repack: repack tensor blk.1.attn_k.weight with q4_K_8x8
repack: repack tensor blk.1.attn_output.weight with q4_K_8x8
repack: repack tensor blk.1.ffn_gate.weight with q4_K_8x8
.repack: repack tensor blk.1.ffn_up.weight with q4_K_8x8
repack: repack tensor blk.2.attn_q.weight with q4_K_8x8
.repack: repack tensor blk.2.attn_k.weight with q4_K_8x8
repack: repack tensor blk.2.attn_output.weight with q4_K_8x8
repack: repack tensor blk.2.ffn_gate.weight with q4_K_8x8
.repack: repack tensor blk.2.ffn_up.weight with q4_K_8x8
repack: repack tensor blk.3.attn_q.weight with q4_K_8x8
.repack: repack tensor blk.3.attn_k.weight with q4_K_8x8
repack: repack tensor blk.3.attn_output.weight with q4_K_8x8
repack: repack tensor blk.3.ffn_gate.weight with q4_K_8x8
.repack: repack tensor blk.3.ffn_up.weight with q4_K_8x8
repack: repack tensor blk.4.attn_q.weight with q4_K_8x8
.repack: repack tensor blk.4.attn_k.weight with q4_K_8x8
repack: repack tensor blk.4.attn_v.weight with q4_K_8x8
repack: repack tensor blk.4.attn_output.weight with q4_K_8x8
repack: repack tensor blk.4.ffn_gate.weight with q4_K_8x8
.repack: repack tensor blk.4.ffn_down.weight with q4_K_8x8
.repack: repack tensor blk.4.ffn_up.weight with q4_K_8x8
repack: repack tensor blk.5.attn_q.weight with q4_K_8x8
.repack: repack tensor blk.5.attn_k.weight with q4_K_8x8
repack: repack tensor blk.5.attn_v.weight with q4_K_8x8
repack: repack tensor blk.5.attn_output.weight with q4_K_8x8
repack: repack tensor blk.5.ffn_gate.weight with q4_K_8x8
.repack: repack tensor blk.5.ffn_down.weight with q4_K_8x8
repack: repack tensor blk.5.ffn_up.weight with q4_K_8x8
.repack: repack tensor blk.6.attn_q.weight with q4_K_8x8
repack: repack tensor blk.6.attn_k.weight with q4_K_8x8
repack: repack tensor blk.6.attn_output.weight with q4_K_8x8
.repack: repack tensor blk.6.ffn_gate.weight with q4_K_8x8
repack: repack tensor blk.6.ffn_up.weight with q4_K_8x8
.repack: repack tensor blk.7.attn_q.weight with q4_K_8x8
repack: repack tensor blk.7.attn_k.weight with q4_K_8x8
repack: repack tensor blk.7.attn_v.weight with q4_K_8x8
repack: repack tensor blk.7.attn_output.weight with q4_K_8x8
.repack: repack tensor blk.7.ffn_gate.weight with q4_K_8x8
repack: repack tensor blk.7.ffn_down.weight with q4_K_8x8
.repack: repack tensor blk.7.ffn_up.weight with q4_K_8x8
.repack: repack tensor blk.8.attn_q.weight with q4_K_8x8
repack: repack tensor blk.8.attn_k.weight with q4_K_8x8
repack: repack tensor blk.8.attn_v.weight with q4_K_8x8
repack: repack tensor blk.8.attn_output.weight with q4_K_8x8
repack: repack tensor blk.8.ffn_gate.weight with q4_K_8x8
.repack: repack tensor blk.8.ffn_down.weight with q4_K_8x8
.repack: repack tensor blk.8.ffn_up.weight with q4_K_8x8
.repack: repack tensor blk.9.attn_q.weight with q4_K_8x8
repack: repack tensor blk.9.attn_k.weight with q4_K_8x8
repack: repack tensor blk.9.attn_output.weight with q4_K_8x8
repack: repack tensor blk.9.ffn_gate.weight with q4_K_8x8
.repack: repack tensor blk.9.ffn_up.weight with q4_K_8x8
.repack: repack tensor blk.10.attn_q.weight with q4_K_8x8
repack: repack tensor blk.10.attn_k.weight with q4_K_8x8
repack: repack tensor blk.10.attn_v.weight with q4_K_8x8
repack: repack tensor blk.10.attn_output.weight with q4_K_8x8
repack: repack tensor blk.10.ffn_gate.weight with q4_K_8x8
.repack: repack tensor blk.10.ffn_down.weight with q4_K_8x8
.repack: repack tensor blk.10.ffn_up.weight with q4_K_8x8
.repack: repack tensor blk.11.attn_q.weight with q4_K_8x8
repack: repack tensor blk.11.attn_k.weight with q4_K_8x8
repack: repack tensor blk.11.attn_v.weight with q4_K_8x8
repack: repack tensor blk.11.attn_output.weight with q4_K_8x8
repack: repack tensor blk.11.ffn_gate.weight with q4_K_8x8
.repack: repack tensor blk.11.ffn_down.weight with q4_K_8x8
.repack: repack tensor blk.11.ffn_up.weight with q4_K_8x8
repack: repack tensor blk.12.attn_q.weight with q4_K_8x8
.repack: repack tensor blk.12.attn_k.weight with q4_K_8x8
repack: repack tensor blk.12.attn_output.weight with q4_K_8x8
repack: repack tensor blk.12.ffn_gate.weight with q4_K_8x8
.repack: repack tensor blk.12.ffn_up.weight with q4_K_8x8
repack: repack tensor blk.13.attn_q.weight with q4_K_8x8
.repack: repack tensor blk.13.attn_k.weight with q4_K_8x8
repack: repack tensor blk.13.attn_v.weight with q4_K_8x8
repack: repack tensor blk.13.attn_output.weight with q4_K_8x8
repack: repack tensor blk.13.ffn_gate.weight with q4_K_8x8
.repack: repack tensor blk.13.ffn_down.weight with q4_K_8x8
repack: repack tensor blk.13.ffn_up.weight with q4_K_8x8
.repack: repack tensor blk.14.attn_q.weight with q4_K_8x8
repack: repack tensor blk.14.attn_k.weight with q4_K_8x8
repack: repack tensor blk.14.attn_v.weight with q4_K_8x8
repack: repack tensor blk.14.attn_output.weight with q4_K_8x8
.repack: repack tensor blk.14.ffn_gate.weight with q4_K_8x8
repack: repack tensor blk.14.ffn_down.weight with q4_K_8x8
.repack: repack tensor blk.14.ffn_up.weight with q4_K_8x8
.repack: repack tensor blk.15.attn_q.weight with q4_K_8x8
repack: repack tensor blk.15.attn_k.weight with q4_K_8x8
repack: repack tensor blk.15.attn_output.weight with q4_K_8x8
repack: repack tensor blk.15.ffn_gate.weight with q4_K_8x8
.repack: repack tensor blk.15.ffn_up.weight with q4_K_8x8
.repack: repack tensor blk.16.attn_q.weight with q4_K_8x8
repack: repack tensor blk.16.attn_k.weight with q4_K_8x8
repack: repack tensor blk.16.attn_v.weight with q4_K_8x8
repack: repack tensor blk.16.attn_output.weight with q4_K_8x8
.repack: repack tensor blk.16.ffn_gate.weight with q4_K_8x8
repack: repack tensor blk.16.ffn_down.weight with q4_K_8x8
.repack: repack tensor blk.16.ffn_up.weight with q4_K_8x8
.repack: repack tensor blk.17.attn_q.weight with q4_K_8x8
repack: repack tensor blk.17.attn_k.weight with q4_K_8x8
repack: repack tensor blk.17.attn_v.weight with q4_K_8x8
repack: repack tensor blk.17.attn_output.weight with q4_K_8x8
repack: repack tensor blk.17.ffn_gate.weight with q4_K_8x8
.repack: repack tensor blk.17.ffn_down.weight with q4_K_8x8
.repack: repack tensor blk.17.ffn_up.weight with q4_K_8x8
.repack: repack tensor blk.18.attn_q.weight with q4_K_8x8
repack: repack tensor blk.18.attn_k.weight with q4_K_8x8
repack: repack tensor blk.18.attn_output.weight with q4_K_8x8
repack: repack tensor blk.18.ffn_gate.weight with q4_K_8x8
.repack: repack tensor blk.18.ffn_up.weight with q4_K_8x8
.repack: repack tensor blk.19.attn_q.weight with q4_K_8x8
repack: repack tensor blk.19.attn_k.weight with q4_K_8x8
repack: repack tensor blk.19.attn_v.weight with q4_K_8x8
repack: repack tensor blk.19.attn_output.weight with q4_K_8x8
repack: repack tensor blk.19.ffn_gate.weight with q4_K_8x8
.repack: repack tensor blk.19.ffn_down.weight with q4_K_8x8
.repack: repack tensor blk.19.ffn_up.weight with q4_K_8x8
repack: repack tensor blk.20.attn_q.weight with q4_K_8x8
.repack: repack tensor blk.20.attn_k.weight with q4_K_8x8
repack: repack tensor blk.20.attn_v.weight with q4_K_8x8
repack: repack tensor blk.20.attn_output.weight with q4_K_8x8
repack: repack tensor blk.20.ffn_gate.weight with q4_K_8x8
.repack: repack tensor blk.20.ffn_down.weight with q4_K_8x8
repack: repack tensor blk.20.ffn_up.weight with q4_K_8x8
.repack: repack tensor blk.21.attn_q.weight with q4_K_8x8
repack: repack tensor blk.21.attn_k.weight with q4_K_8x8
repack: repack tensor blk.21.attn_output.weight with q4_K_8x8
.repack: repack tensor blk.21.ffn_gate.weight with q4_K_8x8
repack: repack tensor blk.21.ffn_up.weight with q4_K_8x8
.repack: repack tensor blk.22.attn_q.weight with q4_K_8x8
repack: repack tensor blk.22.attn_k.weight with q4_K_8x8
repack: repack tensor blk.22.attn_v.weight with q4_K_8x8
.repack: repack tensor blk.22.attn_output.weight with q4_K_8x8
repack: repack tensor blk.22.ffn_gate.weight with q4_K_8x8
repack: repack tensor blk.22.ffn_down.weight with q4_K_8x8
.repack: repack tensor blk.22.ffn_up.weight with q4_K_8x8
.repack: repack tensor blk.23.attn_q.weight with q4_K_8x8
repack: repack tensor blk.23.attn_k.weight with q4_K_8x8
repack: repack tensor blk.23.attn_v.weight with q4_K_8x8
repack: repack tensor blk.23.attn_output.weight with q4_K_8x8
.repack: repack tensor blk.23.ffn_gate.weight with q4_K_8x8
repack: repack tensor blk.23.ffn_down.weight with q4_K_8x8
.repack: repack tensor blk.23.ffn_up.weight with q4_K_8x8
.repack: repack tensor blk.24.attn_q.weight with q4_K_8x8
repack: repack tensor blk.24.attn_k.weight with q4_K_8x8
repack: repack tensor blk.24.attn_output.weight with q4_K_8x8
repack: repack tensor blk.24.ffn_gate.weight with q4_K_8x8
.repack: repack tensor blk.24.ffn_up.weight with q4_K_8x8
.repack: repack tensor blk.25.attn_q.weight with q4_K_8x8
repack: repack tensor blk.25.attn_k.weight with q4_K_8x8
repack: repack tensor blk.25.attn_v.weight with q4_K_8x8
repack: repack tensor blk.25.attn_output.weight with q4_K_8x8
repack: repack tensor blk.25.ffn_gate.weight with q4_K_8x8
.repack: repack tensor blk.25.ffn_down.weight with q4_K_8x8
.repack: repack tensor blk.25.ffn_up.weight with q4_K_8x8
.repack: repack tensor blk.26.attn_q.weight with q4_K_8x8
repack: repack tensor blk.26.attn_k.weight with q4_K_8x8
repack: repack tensor blk.26.attn_v.weight with q4_K_8x8
repack: repack tensor blk.26.attn_output.weight with q4_K_8x8
repack: repack tensor blk.26.ffn_gate.weight with q4_K_8x8
.repack: repack tensor blk.26.ffn_down.weight with q4_K_8x8
.repack: repack tensor blk.26.ffn_up.weight with q4_K_8x8
repack: repack tensor blk.27.attn_q.weight with q4_K_8x8
.repack: repack tensor blk.27.attn_k.weight with q4_K_8x8
repack: repack tensor blk.27.attn_output.weight with q4_K_8x8
repack: repack tensor blk.27.ffn_gate.weight with q4_K_8x8
.repack: repack tensor blk.27.ffn_up.weight with q4_K_8x8
repack: repack tensor blk.28.attn_q.weight with q4_K_8x8
.repack: repack tensor blk.28.attn_k.weight with q4_K_8x8
repack: repack tensor blk.28.attn_output.weight with q4_K_8x8
repack: repack tensor blk.28.ffn_gate.weight with q4_K_8x8
.repack: repack tensor blk.28.ffn_up.weight with q4_K_8x8
repack: repack tensor blk.29.attn_q.weight with q4_K_8x8
.repack: repack tensor blk.29.attn_k.weight with q4_K_8x8
repack: repack tensor blk.29.attn_output.weight with q4_K_8x8
repack: repack tensor blk.29.ffn_gate.weight with q4_K_8x8
.repack: repack tensor blk.29.ffn_up.weight with q4_K_8x8
repack: repack tensor blk.30.attn_q.weight with q4_K_8x8
.repack: repack tensor blk.30.attn_k.weight with q4_K_8x8
repack: repack tensor blk.30.attn_output.weight with q4_K_8x8
repack: repack tensor blk.30.ffn_gate.weight with q4_K_8x8
.repack: repack tensor blk.30.ffn_up.weight with q4_K_8x8
repack: repack tensor blk.31.attn_q.weight with q4_K_8x8
.repack: repack tensor blk.31.attn_k.weight with q4_K_8x8
repack: repack tensor blk.31.attn_output.weight with q4_K_8x8
repack: repack tensor blk.31.ffn_gate.weight with q4_K_8x8
.repack: repack tensor blk.31.ffn_up.weight with q4_K_8x8
...................
llama_context: constructing llama_context
llama_context: n_batch is less than GGML_KQ_MASK_PAD - increasing to 64
llama_context: n_seq_max     = 1
llama_context: n_ctx         = 2048
llama_context: n_ctx_per_seq = 2048
llama_context: n_batch       = 64
llama_context: n_ubatch      = 8
llama_context: causal_attn   = 1
llama_context: flash_attn    = 0
llama_context: kv_unified    = false
llama_context: freq_base     = 1000000.0
llama_context: freq_scale    = 1
llama_context: n_ctx_per_seq (2048) < n_ctx_train (32768) -- the full capacity of the model will not be utilized
set_abort_callback: call
llama_context:        CPU  output buffer size =     0.12 MiB
create_memory: n_ctx = 2048 (padded)
llama_kv_cache_unified: layer   0: dev = CPU
llama_kv_cache_unified: layer   1: dev = CPU
llama_kv_cache_unified: layer   2: dev = CPU
llama_kv_cache_unified: layer   3: dev = CPU
llama_kv_cache_unified: layer   4: dev = CPU
llama_kv_cache_unified: layer   5: dev = CPU
llama_kv_cache_unified: layer   6: dev = CPU
llama_kv_cache_unified: layer   7: dev = CPU
llama_kv_cache_unified: layer   8: dev = CPU
llama_kv_cache_unified: layer   9: dev = CPU
llama_kv_cache_unified: layer  10: dev = CPU
llama_kv_cache_unified: layer  11: dev = CPU
llama_kv_cache_unified: layer  12: dev = CPU
llama_kv_cache_unified: layer  13: dev = CPU
llama_kv_cache_unified: layer  14: dev = CPU
llama_kv_cache_unified: layer  15: dev = CPU
llama_kv_cache_unified: layer  16: dev = CPU
llama_kv_cache_unified: layer  17: dev = CPU
llama_kv_cache_unified: layer  18: dev = CPU
llama_kv_cache_unified: layer  19: dev = CPU
llama_kv_cache_unified: layer  20: dev = CPU
llama_kv_cache_unified: layer  21: dev = CPU
llama_kv_cache_unified: layer  22: dev = CPU
llama_kv_cache_unified: layer  23: dev = CPU
llama_kv_cache_unified: layer  24: dev = CPU
llama_kv_cache_unified: layer  25: dev = CPU
llama_kv_cache_unified: layer  26: dev = CPU
llama_kv_cache_unified: layer  27: dev = CPU
llama_kv_cache_unified: layer  28: dev = CPU
llama_kv_cache_unified: layer  29: dev = CPU
llama_kv_cache_unified: layer  30: dev = CPU
llama_kv_cache_unified: layer  31: dev = CPU
llama_kv_cache_unified:        CPU KV buffer size =   256.00 MiB
llama_kv_cache_unified: size =  256.00 MiB (  2048 cells,  32 layers,  1/1 seqs), K (f16):  128.00 MiB, V (f16):  128.00 MiB
llama_context: enumerating backends
llama_context: backend_ptrs.size() = 1
llama_context: max_nodes = 2328
llama_context: worst-case: n_tokens = 8, n_seqs = 1, n_outputs = 0
graph_reserve: reserving a graph for ubatch with n_tokens =    8, n_seqs =  1, n_outputs =    8
graph_reserve: reserving a graph for ubatch with n_tokens =    1, n_seqs =  1, n_outputs =    1
graph_reserve: reserving a graph for ubatch with n_tokens =    8, n_seqs =  1, n_outputs =    8
llama_context:        CPU compute buffer size =     3.06 MiB
llama_context: graph nodes  = 1126
llama_context: graph splits = 1
CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | LLAMAFILE = 1 | OPENMP = 1 | REPACK = 1 | 
Model metadata: {'general.name': 'mistralai_mistral-7b-instruct-v0.2', 'general.architecture': 'llama', 'llama.context_length': '32768', 'llama.rope.dimension_count': '128', 'llama.embedding_length': '4096', 'llama.block_count': '32', 'llama.feed_forward_length': '14336', 'llama.attention.head_count': '32', 'tokenizer.ggml.eos_token_id': '2', 'general.file_type': '15', 'llama.attention.head_count_kv': '8', 'llama.attention.layer_norm_rms_epsilon': '0.000010', 'llama.rope.freq_base': '1000000.000000', 'tokenizer.ggml.model': 'llama', 'general.quantization_version': '2', 'tokenizer.ggml.bos_token_id': '1', 'tokenizer.ggml.unknown_token_id': '0', 'tokenizer.ggml.padding_token_id': '0', 'tokenizer.ggml.add_bos_token': 'true', 'tokenizer.ggml.add_eos_token': 'false', 'tokenizer.chat_template': "{{ bos_token }}{% for message in messages %}{% if (message['role'] == 'user') != (loop.index0 % 2 == 0) %}{{ raise_exception('Conversation roles must alternate user/assistant/user/assistant/...') }}{% endif %}{% if message['role'] == 'user' %}{{ '[INST] ' + message['content'] + ' [/INST]' }}{% elif message['role'] == 'assistant' %}{{ message['content'] + eos_token}}{% else %}{{ raise_exception('Only user and assistant roles are supported!') }}{% endif %}{% endfor %}"}
Available chat formats from metadata: chat_template.default
Guessed chat format: mistral-instruct
Building index from SQLite database...
Loading embedding model: intfloat/e5-small-v2 on CPU
Index saved to faiss_index
llama_model_loader: loaded meta data with 24 key-value pairs and 291 tensors from C:/Users/Prakhar Srivastava/Desktop/AskQuery/models/Mistral/mistral-7b-instruct-v0.2.Q4_K_M.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = llama
llama_model_loader: - kv   1:                               general.name str              = mistralai_mistral-7b-instruct-v0.2
llama_model_loader: - kv   2:                       llama.context_length u32              = 32768
llama_model_loader: - kv   3:                     llama.embedding_length u32              = 4096
llama_model_loader: - kv   4:                          llama.block_count u32              = 32
llama_model_loader: - kv   5:                  llama.feed_forward_length u32              = 14336
llama_model_loader: - kv   6:                 llama.rope.dimension_count u32              = 128
llama_model_loader: - kv   7:                 llama.attention.head_count u32              = 32
llama_model_loader: - kv   8:              llama.attention.head_count_kv u32              = 8
llama_model_loader: - kv   9:     llama.attention.layer_norm_rms_epsilon f32              = 0.000010
llama_model_loader: - kv  10:                       llama.rope.freq_base f32              = 1000000.000000
llama_model_loader: - kv  11:                          general.file_type u32              = 15
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,32000]   = ["<unk>", "<s>", "</s>", "<0x00>", "<...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,32000]   = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,32000]   = [2, 3, 3, 6, 6, 6, 6, 6, 6, 6, 6, 6, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 1
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 2
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 0
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% for message in mess...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - type  f32:   65 tensors
llama_model_loader: - type q4_K:  193 tensors
llama_model_loader: - type q6_K:   33 tensors
print_info: file format = GGUF V3 (latest)
print_info: file type   = Q4_K - Medium
print_info: file size   = 4.07 GiB (4.83 BPW) 
init_tokenizer: initializing tokenizer for type 1
load: control token:      2 '</s>' is not marked as EOG
load: control token:      1 '<s>' is not marked as EOG
load: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
load: printing all EOG tokens:
load:   - 2 ('</s>')
load: special tokens cache size = 3
load: token to piece cache size = 0.1637 MB
print_info: arch             = llama
print_info: vocab_only       = 0
print_info: n_ctx_train      = 32768
print_info: n_embd           = 4096
print_info: n_layer          = 32
print_info: n_head           = 32
print_info: n_head_kv        = 8
print_info: n_rot            = 128
print_info: n_swa            = 0
print_info: is_swa_any       = 0
print_info: n_embd_head_k    = 128
print_info: n_embd_head_v    = 128
print_info: n_gqa            = 4
print_info: n_embd_k_gqa     = 1024
print_info: n_embd_v_gqa     = 1024
print_info: f_norm_eps       = 0.0e+00
print_info: f_norm_rms_eps   = 1.0e-05
print_info: f_clamp_kqv      = 0.0e+00
print_info: f_max_alibi_bias = 0.0e+00
print_info: f_logit_scale    = 0.0e+00
print_info: f_attn_scale     = 0.0e+00
print_info: n_ff             = 14336
print_info: n_expert         = 0
print_info: n_expert_used    = 0
print_info: causal attn      = 1
print_info: pooling type     = 0
print_info: rope type        = 0
print_info: rope scaling     = linear
print_info: freq_base_train  = 1000000.0
print_info: freq_scale_train = 1
print_info: n_ctx_orig_yarn  = 32768
print_info: rope_finetuned   = unknown
print_info: model type       = 7B
print_info: model params     = 7.24 B
print_info: general.name     = mistralai_mistral-7b-instruct-v0.2
print_info: vocab type       = SPM
print_info: n_vocab          = 32000
print_info: n_merges         = 0
print_info: BOS token        = 1 '<s>'
print_info: EOS token        = 2 '</s>'
print_info: UNK token        = 0 '<unk>'
print_info: PAD token        = 0 '<unk>'
print_info: LF token         = 13 '<0x0A>'
print_info: EOG token        = 2 '</s>'
print_info: max token length = 48
load_tensors: loading model tensors, this can take a while... (mmap = true)
load_tensors: layer   0 assigned to device CPU, is_swa = 0
load_tensors: layer   1 assigned to device CPU, is_swa = 0
load_tensors: layer   2 assigned to device CPU, is_swa = 0
load_tensors: layer   3 assigned to device CPU, is_swa = 0
load_tensors: layer   4 assigned to device CPU, is_swa = 0
load_tensors: layer   5 assigned to device CPU, is_swa = 0
load_tensors: layer   6 assigned to device CPU, is_swa = 0
load_tensors: layer   7 assigned to device CPU, is_swa = 0
load_tensors: layer   8 assigned to device CPU, is_swa = 0
load_tensors: layer   9 assigned to device CPU, is_swa = 0
load_tensors: layer  10 assigned to device CPU, is_swa = 0
load_tensors: layer  11 assigned to device CPU, is_swa = 0
load_tensors: layer  12 assigned to device CPU, is_swa = 0
load_tensors: layer  13 assigned to device CPU, is_swa = 0
load_tensors: layer  14 assigned to device CPU, is_swa = 0
load_tensors: layer  15 assigned to device CPU, is_swa = 0
load_tensors: layer  16 assigned to device CPU, is_swa = 0
load_tensors: layer  17 assigned to device CPU, is_swa = 0
load_tensors: layer  18 assigned to device CPU, is_swa = 0
load_tensors: layer  19 assigned to device CPU, is_swa = 0
load_tensors: layer  20 assigned to device CPU, is_swa = 0
load_tensors: layer  21 assigned to device CPU, is_swa = 0
load_tensors: layer  22 assigned to device CPU, is_swa = 0
load_tensors: layer  23 assigned to device CPU, is_swa = 0
load_tensors: layer  24 assigned to device CPU, is_swa = 0
load_tensors: layer  25 assigned to device CPU, is_swa = 0
load_tensors: layer  26 assigned to device CPU, is_swa = 0
load_tensors: layer  27 assigned to device CPU, is_swa = 0
load_tensors: layer  28 assigned to device CPU, is_swa = 0
load_tensors: layer  29 assigned to device CPU, is_swa = 0
load_tensors: layer  30 assigned to device CPU, is_swa = 0
load_tensors: layer  31 assigned to device CPU, is_swa = 0
load_tensors: layer  32 assigned to device CPU, is_swa = 0
load_tensors: tensor 'token_embd.weight' (q4_K) (and 98 others) cannot be used with preferred buffer type CPU_REPACK, using CPU instead
load_tensors:   CPU_REPACK model buffer size =  3204.00 MiB
load_tensors:   CPU_Mapped model buffer size =  4165.37 MiB
repack: repack tensor blk.0.attn_q.weight with q4_K_8x8
repack: repack tensor blk.0.attn_k.weight with q4_K_8x8
repack: repack tensor blk.0.attn_output.weight with q4_K_8x8
repack: repack tensor blk.0.ffn_gate.weight with q4_K_8x8
.repack: repack tensor blk.0.ffn_up.weight with q4_K_8x8
repack: repack tensor blk.1.attn_q.weight with q4_K_8x8
.repack: repack tensor blk.1.attn_k.weight with q4_K_8x8
repack: repack tensor blk.1.attn_output.weight with q4_K_8x8
repack: repack tensor blk.1.ffn_gate.weight with q4_K_8x8
.repack: repack tensor blk.1.ffn_up.weight with q4_K_8x8
repack: repack tensor blk.2.attn_q.weight with q4_K_8x8
.repack: repack tensor blk.2.attn_k.weight with q4_K_8x8
repack: repack tensor blk.2.attn_output.weight with q4_K_8x8
repack: repack tensor blk.2.ffn_gate.weight with q4_K_8x8
.repack: repack tensor blk.2.ffn_up.weight with q4_K_8x8
repack: repack tensor blk.3.attn_q.weight with q4_K_8x8
.repack: repack tensor blk.3.attn_k.weight with q4_K_8x8
repack: repack tensor blk.3.attn_output.weight with q4_K_8x8
repack: repack tensor blk.3.ffn_gate.weight with q4_K_8x8
.repack: repack tensor blk.3.ffn_up.weight with q4_K_8x8
repack: repack tensor blk.4.attn_q.weight with q4_K_8x8
.repack: repack tensor blk.4.attn_k.weight with q4_K_8x8
repack: repack tensor blk.4.attn_v.weight with q4_K_8x8
repack: repack tensor blk.4.attn_output.weight with q4_K_8x8
repack: repack tensor blk.4.ffn_gate.weight with q4_K_8x8
.repack: repack tensor blk.4.ffn_down.weight with q4_K_8x8
.repack: repack tensor blk.4.ffn_up.weight with q4_K_8x8
repack: repack tensor blk.5.attn_q.weight with q4_K_8x8
.repack: repack tensor blk.5.attn_k.weight with q4_K_8x8
repack: repack tensor blk.5.attn_v.weight with q4_K_8x8
repack: repack tensor blk.5.attn_output.weight with q4_K_8x8
repack: repack tensor blk.5.ffn_gate.weight with q4_K_8x8
.repack: repack tensor blk.5.ffn_down.weight with q4_K_8x8
repack: repack tensor blk.5.ffn_up.weight with q4_K_8x8
.repack: repack tensor blk.6.attn_q.weight with q4_K_8x8
repack: repack tensor blk.6.attn_k.weight with q4_K_8x8
repack: repack tensor blk.6.attn_output.weight with q4_K_8x8
.repack: repack tensor blk.6.ffn_gate.weight with q4_K_8x8
repack: repack tensor blk.6.ffn_up.weight with q4_K_8x8
.repack: repack tensor blk.7.attn_q.weight with q4_K_8x8
repack: repack tensor blk.7.attn_k.weight with q4_K_8x8
repack: repack tensor blk.7.attn_v.weight with q4_K_8x8
repack: repack tensor blk.7.attn_output.weight with q4_K_8x8
.repack: repack tensor blk.7.ffn_gate.weight with q4_K_8x8
repack: repack tensor blk.7.ffn_down.weight with q4_K_8x8
.repack: repack tensor blk.7.ffn_up.weight with q4_K_8x8
.repack: repack tensor blk.8.attn_q.weight with q4_K_8x8
repack: repack tensor blk.8.attn_k.weight with q4_K_8x8
repack: repack tensor blk.8.attn_v.weight with q4_K_8x8
repack: repack tensor blk.8.attn_output.weight with q4_K_8x8
repack: repack tensor blk.8.ffn_gate.weight with q4_K_8x8
.repack: repack tensor blk.8.ffn_down.weight with q4_K_8x8
.repack: repack tensor blk.8.ffn_up.weight with q4_K_8x8
.repack: repack tensor blk.9.attn_q.weight with q4_K_8x8
repack: repack tensor blk.9.attn_k.weight with q4_K_8x8
repack: repack tensor blk.9.attn_output.weight with q4_K_8x8
repack: repack tensor blk.9.ffn_gate.weight with q4_K_8x8
.repack: repack tensor blk.9.ffn_up.weight with q4_K_8x8
.repack: repack tensor blk.10.attn_q.weight with q4_K_8x8
repack: repack tensor blk.10.attn_k.weight with q4_K_8x8
repack: repack tensor blk.10.attn_v.weight with q4_K_8x8
repack: repack tensor blk.10.attn_output.weight with q4_K_8x8
repack: repack tensor blk.10.ffn_gate.weight with q4_K_8x8
.repack: repack tensor blk.10.ffn_down.weight with q4_K_8x8
.repack: repack tensor blk.10.ffn_up.weight with q4_K_8x8
.repack: repack tensor blk.11.attn_q.weight with q4_K_8x8
repack: repack tensor blk.11.attn_k.weight with q4_K_8x8
repack: repack tensor blk.11.attn_v.weight with q4_K_8x8
repack: repack tensor blk.11.attn_output.weight with q4_K_8x8
repack: repack tensor blk.11.ffn_gate.weight with q4_K_8x8
.repack: repack tensor blk.11.ffn_down.weight with q4_K_8x8
.repack: repack tensor blk.11.ffn_up.weight with q4_K_8x8
repack: repack tensor blk.12.attn_q.weight with q4_K_8x8
.repack: repack tensor blk.12.attn_k.weight with q4_K_8x8
repack: repack tensor blk.12.attn_output.weight with q4_K_8x8
repack: repack tensor blk.12.ffn_gate.weight with q4_K_8x8
.repack: repack tensor blk.12.ffn_up.weight with q4_K_8x8
repack: repack tensor blk.13.attn_q.weight with q4_K_8x8
.repack: repack tensor blk.13.attn_k.weight with q4_K_8x8
repack: repack tensor blk.13.attn_v.weight with q4_K_8x8
repack: repack tensor blk.13.attn_output.weight with q4_K_8x8
repack: repack tensor blk.13.ffn_gate.weight with q4_K_8x8
.repack: repack tensor blk.13.ffn_down.weight with q4_K_8x8
repack: repack tensor blk.13.ffn_up.weight with q4_K_8x8
.repack: repack tensor blk.14.attn_q.weight with q4_K_8x8
repack: repack tensor blk.14.attn_k.weight with q4_K_8x8
repack: repack tensor blk.14.attn_v.weight with q4_K_8x8
repack: repack tensor blk.14.attn_output.weight with q4_K_8x8
.repack: repack tensor blk.14.ffn_gate.weight with q4_K_8x8
repack: repack tensor blk.14.ffn_down.weight with q4_K_8x8
.repack: repack tensor blk.14.ffn_up.weight with q4_K_8x8
.repack: repack tensor blk.15.attn_q.weight with q4_K_8x8
repack: repack tensor blk.15.attn_k.weight with q4_K_8x8
repack: repack tensor blk.15.attn_output.weight with q4_K_8x8
repack: repack tensor blk.15.ffn_gate.weight with q4_K_8x8
.repack: repack tensor blk.15.ffn_up.weight with q4_K_8x8
.repack: repack tensor blk.16.attn_q.weight with q4_K_8x8
repack: repack tensor blk.16.attn_k.weight with q4_K_8x8
repack: repack tensor blk.16.attn_v.weight with q4_K_8x8
repack: repack tensor blk.16.attn_output.weight with q4_K_8x8
.repack: repack tensor blk.16.ffn_gate.weight with q4_K_8x8
repack: repack tensor blk.16.ffn_down.weight with q4_K_8x8
.repack: repack tensor blk.16.ffn_up.weight with q4_K_8x8
.repack: repack tensor blk.17.attn_q.weight with q4_K_8x8
repack: repack tensor blk.17.attn_k.weight with q4_K_8x8
repack: repack tensor blk.17.attn_v.weight with q4_K_8x8
repack: repack tensor blk.17.attn_output.weight with q4_K_8x8
repack: repack tensor blk.17.ffn_gate.weight with q4_K_8x8
.repack: repack tensor blk.17.ffn_down.weight with q4_K_8x8
.repack: repack tensor blk.17.ffn_up.weight with q4_K_8x8
.repack: repack tensor blk.18.attn_q.weight with q4_K_8x8
repack: repack tensor blk.18.attn_k.weight with q4_K_8x8
repack: repack tensor blk.18.attn_output.weight with q4_K_8x8
repack: repack tensor blk.18.ffn_gate.weight with q4_K_8x8
.repack: repack tensor blk.18.ffn_up.weight with q4_K_8x8
.repack: repack tensor blk.19.attn_q.weight with q4_K_8x8
repack: repack tensor blk.19.attn_k.weight with q4_K_8x8
repack: repack tensor blk.19.attn_v.weight with q4_K_8x8
repack: repack tensor blk.19.attn_output.weight with q4_K_8x8
repack: repack tensor blk.19.ffn_gate.weight with q4_K_8x8
.repack: repack tensor blk.19.ffn_down.weight with q4_K_8x8
.repack: repack tensor blk.19.ffn_up.weight with q4_K_8x8
repack: repack tensor blk.20.attn_q.weight with q4_K_8x8
.repack: repack tensor blk.20.attn_k.weight with q4_K_8x8
repack: repack tensor blk.20.attn_v.weight with q4_K_8x8
repack: repack tensor blk.20.attn_output.weight with q4_K_8x8
repack: repack tensor blk.20.ffn_gate.weight with q4_K_8x8
.repack: repack tensor blk.20.ffn_down.weight with q4_K_8x8
repack: repack tensor blk.20.ffn_up.weight with q4_K_8x8
.repack: repack tensor blk.21.attn_q.weight with q4_K_8x8
repack: repack tensor blk.21.attn_k.weight with q4_K_8x8
repack: repack tensor blk.21.attn_output.weight with q4_K_8x8
.repack: repack tensor blk.21.ffn_gate.weight with q4_K_8x8
repack: repack tensor blk.21.ffn_up.weight with q4_K_8x8
.repack: repack tensor blk.22.attn_q.weight with q4_K_8x8
repack: repack tensor blk.22.attn_k.weight with q4_K_8x8
repack: repack tensor blk.22.attn_v.weight with q4_K_8x8
.repack: repack tensor blk.22.attn_output.weight with q4_K_8x8
repack: repack tensor blk.22.ffn_gate.weight with q4_K_8x8
repack: repack tensor blk.22.ffn_down.weight with q4_K_8x8
.repack: repack tensor blk.22.ffn_up.weight with q4_K_8x8
.repack: repack tensor blk.23.attn_q.weight with q4_K_8x8
repack: repack tensor blk.23.attn_k.weight with q4_K_8x8
repack: repack tensor blk.23.attn_v.weight with q4_K_8x8
repack: repack tensor blk.23.attn_output.weight with q4_K_8x8
.repack: repack tensor blk.23.ffn_gate.weight with q4_K_8x8
repack: repack tensor blk.23.ffn_down.weight with q4_K_8x8
.repack: repack tensor blk.23.ffn_up.weight with q4_K_8x8
.repack: repack tensor blk.24.attn_q.weight with q4_K_8x8
repack: repack tensor blk.24.attn_k.weight with q4_K_8x8
repack: repack tensor blk.24.attn_output.weight with q4_K_8x8
repack: repack tensor blk.24.ffn_gate.weight with q4_K_8x8
.repack: repack tensor blk.24.ffn_up.weight with q4_K_8x8
.repack: repack tensor blk.25.attn_q.weight with q4_K_8x8
repack: repack tensor blk.25.attn_k.weight with q4_K_8x8
repack: repack tensor blk.25.attn_v.weight with q4_K_8x8
repack: repack tensor blk.25.attn_output.weight with q4_K_8x8
repack: repack tensor blk.25.ffn_gate.weight with q4_K_8x8
.repack: repack tensor blk.25.ffn_down.weight with q4_K_8x8
.repack: repack tensor blk.25.ffn_up.weight with q4_K_8x8
.repack: repack tensor blk.26.attn_q.weight with q4_K_8x8
repack: repack tensor blk.26.attn_k.weight with q4_K_8x8
repack: repack tensor blk.26.attn_v.weight with q4_K_8x8
repack: repack tensor blk.26.attn_output.weight with q4_K_8x8
repack: repack tensor blk.26.ffn_gate.weight with q4_K_8x8
.repack: repack tensor blk.26.ffn_down.weight with q4_K_8x8
.repack: repack tensor blk.26.ffn_up.weight with q4_K_8x8
repack: repack tensor blk.27.attn_q.weight with q4_K_8x8
.repack: repack tensor blk.27.attn_k.weight with q4_K_8x8
repack: repack tensor blk.27.attn_output.weight with q4_K_8x8
repack: repack tensor blk.27.ffn_gate.weight with q4_K_8x8
.repack: repack tensor blk.27.ffn_up.weight with q4_K_8x8
repack: repack tensor blk.28.attn_q.weight with q4_K_8x8
.repack: repack tensor blk.28.attn_k.weight with q4_K_8x8
repack: repack tensor blk.28.attn_output.weight with q4_K_8x8
repack: repack tensor blk.28.ffn_gate.weight with q4_K_8x8
.repack: repack tensor blk.28.ffn_up.weight with q4_K_8x8
repack: repack tensor blk.29.attn_q.weight with q4_K_8x8
.repack: repack tensor blk.29.attn_k.weight with q4_K_8x8
repack: repack tensor blk.29.attn_output.weight with q4_K_8x8
repack: repack tensor blk.29.ffn_gate.weight with q4_K_8x8
.repack: repack tensor blk.29.ffn_up.weight with q4_K_8x8
repack: repack tensor blk.30.attn_q.weight with q4_K_8x8
.repack: repack tensor blk.30.attn_k.weight with q4_K_8x8
repack: repack tensor blk.30.attn_output.weight with q4_K_8x8
repack: repack tensor blk.30.ffn_gate.weight with q4_K_8x8
.repack: repack tensor blk.30.ffn_up.weight with q4_K_8x8
repack: repack tensor blk.31.attn_q.weight with q4_K_8x8
.repack: repack tensor blk.31.attn_k.weight with q4_K_8x8
repack: repack tensor blk.31.attn_output.weight with q4_K_8x8
repack: repack tensor blk.31.ffn_gate.weight with q4_K_8x8
.repack: repack tensor blk.31.ffn_up.weight with q4_K_8x8
...................
llama_context: constructing llama_context
llama_context: n_batch is less than GGML_KQ_MASK_PAD - increasing to 64
llama_context: n_seq_max     = 1
llama_context: n_ctx         = 2048
llama_context: n_ctx_per_seq = 2048
llama_context: n_batch       = 64
llama_context: n_ubatch      = 8
llama_context: causal_attn   = 1
llama_context: flash_attn    = 0
llama_context: kv_unified    = false
llama_context: freq_base     = 1000000.0
llama_context: freq_scale    = 1
llama_context: n_ctx_per_seq (2048) < n_ctx_train (32768) -- the full capacity of the model will not be utilized
set_abort_callback: call
llama_context:        CPU  output buffer size =     0.12 MiB
create_memory: n_ctx = 2048 (padded)
llama_kv_cache_unified: layer   0: dev = CPU
llama_kv_cache_unified: layer   1: dev = CPU
llama_kv_cache_unified: layer   2: dev = CPU
llama_kv_cache_unified: layer   3: dev = CPU
llama_kv_cache_unified: layer   4: dev = CPU
llama_kv_cache_unified: layer   5: dev = CPU
llama_kv_cache_unified: layer   6: dev = CPU
llama_kv_cache_unified: layer   7: dev = CPU
llama_kv_cache_unified: layer   8: dev = CPU
llama_kv_cache_unified: layer   9: dev = CPU
llama_kv_cache_unified: layer  10: dev = CPU
llama_kv_cache_unified: layer  11: dev = CPU
llama_kv_cache_unified: layer  12: dev = CPU
llama_kv_cache_unified: layer  13: dev = CPU
llama_kv_cache_unified: layer  14: dev = CPU
llama_kv_cache_unified: layer  15: dev = CPU
llama_kv_cache_unified: layer  16: dev = CPU
llama_kv_cache_unified: layer  17: dev = CPU
llama_kv_cache_unified: layer  18: dev = CPU
llama_kv_cache_unified: layer  19: dev = CPU
llama_kv_cache_unified: layer  20: dev = CPU
llama_kv_cache_unified: layer  21: dev = CPU
llama_kv_cache_unified: layer  22: dev = CPU
llama_kv_cache_unified: layer  23: dev = CPU
llama_kv_cache_unified: layer  24: dev = CPU
llama_kv_cache_unified: layer  25: dev = CPU
llama_kv_cache_unified: layer  26: dev = CPU
llama_kv_cache_unified: layer  27: dev = CPU
llama_kv_cache_unified: layer  28: dev = CPU
llama_kv_cache_unified: layer  29: dev = CPU
llama_kv_cache_unified: layer  30: dev = CPU
llama_kv_cache_unified: layer  31: dev = CPU
llama_kv_cache_unified:        CPU KV buffer size =   256.00 MiB
llama_kv_cache_unified: size =  256.00 MiB (  2048 cells,  32 layers,  1/1 seqs), K (f16):  128.00 MiB, V (f16):  128.00 MiB
llama_context: enumerating backends
llama_context: backend_ptrs.size() = 1
llama_context: max_nodes = 2328
llama_context: worst-case: n_tokens = 8, n_seqs = 1, n_outputs = 0
graph_reserve: reserving a graph for ubatch with n_tokens =    8, n_seqs =  1, n_outputs =    8
graph_reserve: reserving a graph for ubatch with n_tokens =    1, n_seqs =  1, n_outputs =    1
graph_reserve: reserving a graph for ubatch with n_tokens =    8, n_seqs =  1, n_outputs =    8
llama_context:        CPU compute buffer size =     3.06 MiB
llama_context: graph nodes  = 1126
llama_context: graph splits = 1
CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | LLAMAFILE = 1 | OPENMP = 1 | REPACK = 1 | 
Model metadata: {'general.name': 'mistralai_mistral-7b-instruct-v0.2', 'general.architecture': 'llama', 'llama.context_length': '32768', 'llama.rope.dimension_count': '128', 'llama.embedding_length': '4096', 'llama.block_count': '32', 'llama.feed_forward_length': '14336', 'llama.attention.head_count': '32', 'tokenizer.ggml.eos_token_id': '2', 'general.file_type': '15', 'llama.attention.head_count_kv': '8', 'llama.attention.layer_norm_rms_epsilon': '0.000010', 'llama.rope.freq_base': '1000000.000000', 'tokenizer.ggml.model': 'llama', 'general.quantization_version': '2', 'tokenizer.ggml.bos_token_id': '1', 'tokenizer.ggml.unknown_token_id': '0', 'tokenizer.ggml.padding_token_id': '0', 'tokenizer.ggml.add_bos_token': 'true', 'tokenizer.ggml.add_eos_token': 'false', 'tokenizer.chat_template': "{{ bos_token }}{% for message in messages %}{% if (message['role'] == 'user') != (loop.index0 % 2 == 0) %}{{ raise_exception('Conversation roles must alternate user/assistant/user/assistant/...') }}{% endif %}{% if message['role'] == 'user' %}{{ '[INST] ' + message['content'] + ' [/INST]' }}{% elif message['role'] == 'assistant' %}{{ message['content'] + eos_token}}{% else %}{{ raise_exception('Only user and assistant roles are supported!') }}{% endif %}{% endfor %}"}
Available chat formats from metadata: chat_template.default
Guessed chat format: mistral-instruct
Building index from SQLite database...
Loading embedding model: intfloat/e5-small-v2 on CPU
Index saved to faiss_index
Llama.generate: 86 prefix-match hit, remaining 354 prompt tokens to eval
llama_perf_context_print:        load time =  189515.86 ms
llama_perf_context_print: prompt eval time =  134754.38 ms /   354 tokens (  380.66 ms per token,     2.63 tokens per second)
llama_perf_context_print:        eval time =   85018.15 ms /    90 runs   (  944.65 ms per token,     1.06 tokens per second)
llama_perf_context_print:       total time =  219976.46 ms /   444 tokens
llama_perf_context_print:    graphs reused =        118
llama_perf_context_print:        load time =  361664.62 ms
llama_perf_context_print: prompt eval time =  361645.88 ms /   440 tokens (  821.92 ms per token,     1.22 tokens per second)
llama_perf_context_print:        eval time =  123442.23 ms /    45 runs   ( 2743.16 ms per token,     0.36 tokens per second)
llama_perf_context_print:       total time =  485322.25 ms /   485 tokens
llama_perf_context_print:    graphs reused =         83
Llama.generate: 91 prefix-match hit, remaining 345 prompt tokens to eval
llama_perf_context_print:        load time =  361664.62 ms
llama_perf_context_print: prompt eval time =  185294.24 ms /   345 tokens (  537.08 ms per token,     1.86 tokens per second)
llama_perf_context_print:        eval time =   85586.19 ms /    36 runs   ( 2377.39 ms per token,     0.42 tokens per second)
llama_perf_context_print:       total time =  270965.58 ms /   381 tokens
llama_perf_context_print:    graphs reused =         67
LLM is explicitly disabled. Using MockLLM.
llama_model_loader: loaded meta data with 24 key-value pairs and 291 tensors from C:/Users/Prakhar Srivastava/Desktop/AskQuery/models/Mistral/mistral-7b-instruct-v0.2.Q4_K_M.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = llama
llama_model_loader: - kv   1:                               general.name str              = mistralai_mistral-7b-instruct-v0.2
llama_model_loader: - kv   2:                       llama.context_length u32              = 32768
llama_model_loader: - kv   3:                     llama.embedding_length u32              = 4096
llama_model_loader: - kv   4:                          llama.block_count u32              = 32
llama_model_loader: - kv   5:                  llama.feed_forward_length u32              = 14336
llama_model_loader: - kv   6:                 llama.rope.dimension_count u32              = 128
llama_model_loader: - kv   7:                 llama.attention.head_count u32              = 32
llama_model_loader: - kv   8:              llama.attention.head_count_kv u32              = 8
llama_model_loader: - kv   9:     llama.attention.layer_norm_rms_epsilon f32              = 0.000010
llama_model_loader: - kv  10:                       llama.rope.freq_base f32              = 1000000.000000
llama_model_loader: - kv  11:                          general.file_type u32              = 15
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,32000]   = ["<unk>", "<s>", "</s>", "<0x00>", "<...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,32000]   = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,32000]   = [2, 3, 3, 6, 6, 6, 6, 6, 6, 6, 6, 6, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 1
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 2
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 0
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% for message in mess...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - type  f32:   65 tensors
llama_model_loader: - type q4_K:  193 tensors
llama_model_loader: - type q6_K:   33 tensors
print_info: file format = GGUF V3 (latest)
print_info: file type   = Q4_K - Medium
print_info: file size   = 4.07 GiB (4.83 BPW) 
init_tokenizer: initializing tokenizer for type 1
load: control token:      2 '</s>' is not marked as EOG
load: control token:      1 '<s>' is not marked as EOG
load: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
load: printing all EOG tokens:
load:   - 2 ('</s>')
load: special tokens cache size = 3
load: token to piece cache size = 0.1637 MB
print_info: arch             = llama
print_info: vocab_only       = 0
print_info: n_ctx_train      = 32768
print_info: n_embd           = 4096
print_info: n_layer          = 32
print_info: n_head           = 32
print_info: n_head_kv        = 8
print_info: n_rot            = 128
print_info: n_swa            = 0
print_info: is_swa_any       = 0
print_info: n_embd_head_k    = 128
print_info: n_embd_head_v    = 128
print_info: n_gqa            = 4
print_info: n_embd_k_gqa     = 1024
print_info: n_embd_v_gqa     = 1024
print_info: f_norm_eps       = 0.0e+00
print_info: f_norm_rms_eps   = 1.0e-05
print_info: f_clamp_kqv      = 0.0e+00
print_info: f_max_alibi_bias = 0.0e+00
print_info: f_logit_scale    = 0.0e+00
print_info: f_attn_scale     = 0.0e+00
print_info: n_ff             = 14336
print_info: n_expert         = 0
print_info: n_expert_used    = 0
print_info: causal attn      = 1
print_info: pooling type     = 0
print_info: rope type        = 0
print_info: rope scaling     = linear
print_info: freq_base_train  = 1000000.0
print_info: freq_scale_train = 1
print_info: n_ctx_orig_yarn  = 32768
print_info: rope_finetuned   = unknown
print_info: model type       = 7B
print_info: model params     = 7.24 B
print_info: general.name     = mistralai_mistral-7b-instruct-v0.2
print_info: vocab type       = SPM
print_info: n_vocab          = 32000
print_info: n_merges         = 0
print_info: BOS token        = 1 '<s>'
print_info: EOS token        = 2 '</s>'
print_info: UNK token        = 0 '<unk>'
print_info: PAD token        = 0 '<unk>'
print_info: LF token         = 13 '<0x0A>'
print_info: EOG token        = 2 '</s>'
print_info: max token length = 48
load_tensors: loading model tensors, this can take a while... (mmap = true)
load_tensors: layer   0 assigned to device CPU, is_swa = 0
load_tensors: layer   1 assigned to device CPU, is_swa = 0
load_tensors: layer   2 assigned to device CPU, is_swa = 0
load_tensors: layer   3 assigned to device CPU, is_swa = 0
load_tensors: layer   4 assigned to device CPU, is_swa = 0
load_tensors: layer   5 assigned to device CPU, is_swa = 0
load_tensors: layer   6 assigned to device CPU, is_swa = 0
load_tensors: layer   7 assigned to device CPU, is_swa = 0
load_tensors: layer   8 assigned to device CPU, is_swa = 0
load_tensors: layer   9 assigned to device CPU, is_swa = 0
load_tensors: layer  10 assigned to device CPU, is_swa = 0
load_tensors: layer  11 assigned to device CPU, is_swa = 0
load_tensors: layer  12 assigned to device CPU, is_swa = 0
load_tensors: layer  13 assigned to device CPU, is_swa = 0
load_tensors: layer  14 assigned to device CPU, is_swa = 0
load_tensors: layer  15 assigned to device CPU, is_swa = 0
load_tensors: layer  16 assigned to device CPU, is_swa = 0
load_tensors: layer  17 assigned to device CPU, is_swa = 0
load_tensors: layer  18 assigned to device CPU, is_swa = 0
load_tensors: layer  19 assigned to device CPU, is_swa = 0
load_tensors: layer  20 assigned to device CPU, is_swa = 0
load_tensors: layer  21 assigned to device CPU, is_swa = 0
load_tensors: layer  22 assigned to device CPU, is_swa = 0
load_tensors: layer  23 assigned to device CPU, is_swa = 0
load_tensors: layer  24 assigned to device CPU, is_swa = 0
load_tensors: layer  25 assigned to device CPU, is_swa = 0
load_tensors: layer  26 assigned to device CPU, is_swa = 0
load_tensors: layer  27 assigned to device CPU, is_swa = 0
load_tensors: layer  28 assigned to device CPU, is_swa = 0
load_tensors: layer  29 assigned to device CPU, is_swa = 0
load_tensors: layer  30 assigned to device CPU, is_swa = 0
load_tensors: layer  31 assigned to device CPU, is_swa = 0
load_tensors: layer  32 assigned to device CPU, is_swa = 0
load_tensors: tensor 'token_embd.weight' (q4_K) (and 98 others) cannot be used with preferred buffer type CPU_REPACK, using CPU instead
load_tensors:   CPU_REPACK model buffer size =  3204.00 MiB
load_tensors:   CPU_Mapped model buffer size =  4165.37 MiB
repack: repack tensor blk.0.attn_q.weight with q4_K_8x8
repack: repack tensor blk.0.attn_k.weight with q4_K_8x8
repack: repack tensor blk.0.attn_output.weight with q4_K_8x8
repack: repack tensor blk.0.ffn_gate.weight with q4_K_8x8
.repack: repack tensor blk.0.ffn_up.weight with q4_K_8x8
repack: repack tensor blk.1.attn_q.weight with q4_K_8x8
.repack: repack tensor blk.1.attn_k.weight with q4_K_8x8
repack: repack tensor blk.1.attn_output.weight with q4_K_8x8
repack: repack tensor blk.1.ffn_gate.weight with q4_K_8x8
.repack: repack tensor blk.1.ffn_up.weight with q4_K_8x8
repack: repack tensor blk.2.attn_q.weight with q4_K_8x8
.repack: repack tensor blk.2.attn_k.weight with q4_K_8x8
repack: repack tensor blk.2.attn_output.weight with q4_K_8x8
repack: repack tensor blk.2.ffn_gate.weight with q4_K_8x8
.repack: repack tensor blk.2.ffn_up.weight with q4_K_8x8
repack: repack tensor blk.3.attn_q.weight with q4_K_8x8
.repack: repack tensor blk.3.attn_k.weight with q4_K_8x8
repack: repack tensor blk.3.attn_output.weight with q4_K_8x8
repack: repack tensor blk.3.ffn_gate.weight with q4_K_8x8
.repack: repack tensor blk.3.ffn_up.weight with q4_K_8x8
repack: repack tensor blk.4.attn_q.weight with q4_K_8x8
.repack: repack tensor blk.4.attn_k.weight with q4_K_8x8
repack: repack tensor blk.4.attn_v.weight with q4_K_8x8
repack: repack tensor blk.4.attn_output.weight with q4_K_8x8
repack: repack tensor blk.4.ffn_gate.weight with q4_K_8x8
.repack: repack tensor blk.4.ffn_down.weight with q4_K_8x8
.repack: repack tensor blk.4.ffn_up.weight with q4_K_8x8
repack: repack tensor blk.5.attn_q.weight with q4_K_8x8
.repack: repack tensor blk.5.attn_k.weight with q4_K_8x8
repack: repack tensor blk.5.attn_v.weight with q4_K_8x8
repack: repack tensor blk.5.attn_output.weight with q4_K_8x8
repack: repack tensor blk.5.ffn_gate.weight with q4_K_8x8
.repack: repack tensor blk.5.ffn_down.weight with q4_K_8x8
repack: repack tensor blk.5.ffn_up.weight with q4_K_8x8
.repack: repack tensor blk.6.attn_q.weight with q4_K_8x8
repack: repack tensor blk.6.attn_k.weight with q4_K_8x8
repack: repack tensor blk.6.attn_output.weight with q4_K_8x8
.repack: repack tensor blk.6.ffn_gate.weight with q4_K_8x8
repack: repack tensor blk.6.ffn_up.weight with q4_K_8x8
.repack: repack tensor blk.7.attn_q.weight with q4_K_8x8
repack: repack tensor blk.7.attn_k.weight with q4_K_8x8
repack: repack tensor blk.7.attn_v.weight with q4_K_8x8
repack: repack tensor blk.7.attn_output.weight with q4_K_8x8
.repack: repack tensor blk.7.ffn_gate.weight with q4_K_8x8
repack: repack tensor blk.7.ffn_down.weight with q4_K_8x8
.repack: repack tensor blk.7.ffn_up.weight with q4_K_8x8
.repack: repack tensor blk.8.attn_q.weight with q4_K_8x8
repack: repack tensor blk.8.attn_k.weight with q4_K_8x8
repack: repack tensor blk.8.attn_v.weight with q4_K_8x8
repack: repack tensor blk.8.attn_output.weight with q4_K_8x8
repack: repack tensor blk.8.ffn_gate.weight with q4_K_8x8
.repack: repack tensor blk.8.ffn_down.weight with q4_K_8x8
.repack: repack tensor blk.8.ffn_up.weight with q4_K_8x8
.repack: repack tensor blk.9.attn_q.weight with q4_K_8x8
repack: repack tensor blk.9.attn_k.weight with q4_K_8x8
repack: repack tensor blk.9.attn_output.weight with q4_K_8x8
repack: repack tensor blk.9.ffn_gate.weight with q4_K_8x8
.repack: repack tensor blk.9.ffn_up.weight with q4_K_8x8
.repack: repack tensor blk.10.attn_q.weight with q4_K_8x8
repack: repack tensor blk.10.attn_k.weight with q4_K_8x8
repack: repack tensor blk.10.attn_v.weight with q4_K_8x8
repack: repack tensor blk.10.attn_output.weight with q4_K_8x8
repack: repack tensor blk.10.ffn_gate.weight with q4_K_8x8
.repack: repack tensor blk.10.ffn_down.weight with q4_K_8x8
.repack: repack tensor blk.10.ffn_up.weight with q4_K_8x8
.repack: repack tensor blk.11.attn_q.weight with q4_K_8x8
repack: repack tensor blk.11.attn_k.weight with q4_K_8x8
repack: repack tensor blk.11.attn_v.weight with q4_K_8x8
repack: repack tensor blk.11.attn_output.weight with q4_K_8x8
repack: repack tensor blk.11.ffn_gate.weight with q4_K_8x8
.repack: repack tensor blk.11.ffn_down.weight with q4_K_8x8
.repack: repack tensor blk.11.ffn_up.weight with q4_K_8x8
repack: repack tensor blk.12.attn_q.weight with q4_K_8x8
.repack: repack tensor blk.12.attn_k.weight with q4_K_8x8
repack: repack tensor blk.12.attn_output.weight with q4_K_8x8
repack: repack tensor blk.12.ffn_gate.weight with q4_K_8x8
.repack: repack tensor blk.12.ffn_up.weight with q4_K_8x8
repack: repack tensor blk.13.attn_q.weight with q4_K_8x8
.repack: repack tensor blk.13.attn_k.weight with q4_K_8x8
repack: repack tensor blk.13.attn_v.weight with q4_K_8x8
repack: repack tensor blk.13.attn_output.weight with q4_K_8x8
repack: repack tensor blk.13.ffn_gate.weight with q4_K_8x8
.repack: repack tensor blk.13.ffn_down.weight with q4_K_8x8
repack: repack tensor blk.13.ffn_up.weight with q4_K_8x8
.repack: repack tensor blk.14.attn_q.weight with q4_K_8x8
repack: repack tensor blk.14.attn_k.weight with q4_K_8x8
repack: repack tensor blk.14.attn_v.weight with q4_K_8x8
repack: repack tensor blk.14.attn_output.weight with q4_K_8x8
.repack: repack tensor blk.14.ffn_gate.weight with q4_K_8x8
repack: repack tensor blk.14.ffn_down.weight with q4_K_8x8
.repack: repack tensor blk.14.ffn_up.weight with q4_K_8x8
.repack: repack tensor blk.15.attn_q.weight with q4_K_8x8
repack: repack tensor blk.15.attn_k.weight with q4_K_8x8
repack: repack tensor blk.15.attn_output.weight with q4_K_8x8
repack: repack tensor blk.15.ffn_gate.weight with q4_K_8x8
.repack: repack tensor blk.15.ffn_up.weight with q4_K_8x8
.repack: repack tensor blk.16.attn_q.weight with q4_K_8x8
repack: repack tensor blk.16.attn_k.weight with q4_K_8x8
repack: repack tensor blk.16.attn_v.weight with q4_K_8x8
repack: repack tensor blk.16.attn_output.weight with q4_K_8x8
.repack: repack tensor blk.16.ffn_gate.weight with q4_K_8x8
repack: repack tensor blk.16.ffn_down.weight with q4_K_8x8
.repack: repack tensor blk.16.ffn_up.weight with q4_K_8x8
.repack: repack tensor blk.17.attn_q.weight with q4_K_8x8
repack: repack tensor blk.17.attn_k.weight with q4_K_8x8
repack: repack tensor blk.17.attn_v.weight with q4_K_8x8
repack: repack tensor blk.17.attn_output.weight with q4_K_8x8
repack: repack tensor blk.17.ffn_gate.weight with q4_K_8x8
.repack: repack tensor blk.17.ffn_down.weight with q4_K_8x8
.repack: repack tensor blk.17.ffn_up.weight with q4_K_8x8
.repack: repack tensor blk.18.attn_q.weight with q4_K_8x8
repack: repack tensor blk.18.attn_k.weight with q4_K_8x8
repack: repack tensor blk.18.attn_output.weight with q4_K_8x8
repack: repack tensor blk.18.ffn_gate.weight with q4_K_8x8
.repack: repack tensor blk.18.ffn_up.weight with q4_K_8x8
.repack: repack tensor blk.19.attn_q.weight with q4_K_8x8
repack: repack tensor blk.19.attn_k.weight with q4_K_8x8
repack: repack tensor blk.19.attn_v.weight with q4_K_8x8
repack: repack tensor blk.19.attn_output.weight with q4_K_8x8
repack: repack tensor blk.19.ffn_gate.weight with q4_K_8x8
.repack: repack tensor blk.19.ffn_down.weight with q4_K_8x8
.repack: repack tensor blk.19.ffn_up.weight with q4_K_8x8
repack: repack tensor blk.20.attn_q.weight with q4_K_8x8
.repack: repack tensor blk.20.attn_k.weight with q4_K_8x8
repack: repack tensor blk.20.attn_v.weight with q4_K_8x8
repack: repack tensor blk.20.attn_output.weight with q4_K_8x8
repack: repack tensor blk.20.ffn_gate.weight with q4_K_8x8
.repack: repack tensor blk.20.ffn_down.weight with q4_K_8x8
repack: repack tensor blk.20.ffn_up.weight with q4_K_8x8
.repack: repack tensor blk.21.attn_q.weight with q4_K_8x8
repack: repack tensor blk.21.attn_k.weight with q4_K_8x8
repack: repack tensor blk.21.attn_output.weight with q4_K_8x8
.repack: repack tensor blk.21.ffn_gate.weight with q4_K_8x8
repack: repack tensor blk.21.ffn_up.weight with q4_K_8x8
.repack: repack tensor blk.22.attn_q.weight with q4_K_8x8
repack: repack tensor blk.22.attn_k.weight with q4_K_8x8
repack: repack tensor blk.22.attn_v.weight with q4_K_8x8
.repack: repack tensor blk.22.attn_output.weight with q4_K_8x8
repack: repack tensor blk.22.ffn_gate.weight with q4_K_8x8
repack: repack tensor blk.22.ffn_down.weight with q4_K_8x8
.repack: repack tensor blk.22.ffn_up.weight with q4_K_8x8
.repack: repack tensor blk.23.attn_q.weight with q4_K_8x8
repack: repack tensor blk.23.attn_k.weight with q4_K_8x8
repack: repack tensor blk.23.attn_v.weight with q4_K_8x8
repack: repack tensor blk.23.attn_output.weight with q4_K_8x8
.repack: repack tensor blk.23.ffn_gate.weight with q4_K_8x8
repack: repack tensor blk.23.ffn_down.weight with q4_K_8x8
.repack: repack tensor blk.23.ffn_up.weight with q4_K_8x8
.repack: repack tensor blk.24.attn_q.weight with q4_K_8x8
repack: repack tensor blk.24.attn_k.weight with q4_K_8x8
repack: repack tensor blk.24.attn_output.weight with q4_K_8x8
repack: repack tensor blk.24.ffn_gate.weight with q4_K_8x8
.repack: repack tensor blk.24.ffn_up.weight with q4_K_8x8
.repack: repack tensor blk.25.attn_q.weight with q4_K_8x8
repack: repack tensor blk.25.attn_k.weight with q4_K_8x8
repack: repack tensor blk.25.attn_v.weight with q4_K_8x8
repack: repack tensor blk.25.attn_output.weight with q4_K_8x8
repack: repack tensor blk.25.ffn_gate.weight with q4_K_8x8
.repack: repack tensor blk.25.ffn_down.weight with q4_K_8x8
.repack: repack tensor blk.25.ffn_up.weight with q4_K_8x8
.repack: repack tensor blk.26.attn_q.weight with q4_K_8x8
repack: repack tensor blk.26.attn_k.weight with q4_K_8x8
repack: repack tensor blk.26.attn_v.weight with q4_K_8x8
repack: repack tensor blk.26.attn_output.weight with q4_K_8x8
repack: repack tensor blk.26.ffn_gate.weight with q4_K_8x8
.repack: repack tensor blk.26.ffn_down.weight with q4_K_8x8
.repack: repack tensor blk.26.ffn_up.weight with q4_K_8x8
repack: repack tensor blk.27.attn_q.weight with q4_K_8x8
.repack: repack tensor blk.27.attn_k.weight with q4_K_8x8
repack: repack tensor blk.27.attn_output.weight with q4_K_8x8
repack: repack tensor blk.27.ffn_gate.weight with q4_K_8x8
.repack: repack tensor blk.27.ffn_up.weight with q4_K_8x8
repack: repack tensor blk.28.attn_q.weight with q4_K_8x8
.repack: repack tensor blk.28.attn_k.weight with q4_K_8x8
repack: repack tensor blk.28.attn_output.weight with q4_K_8x8
repack: repack tensor blk.28.ffn_gate.weight with q4_K_8x8
.repack: repack tensor blk.28.ffn_up.weight with q4_K_8x8
repack: repack tensor blk.29.attn_q.weight with q4_K_8x8
.repack: repack tensor blk.29.attn_k.weight with q4_K_8x8
repack: repack tensor blk.29.attn_output.weight with q4_K_8x8
repack: repack tensor blk.29.ffn_gate.weight with q4_K_8x8
.repack: repack tensor blk.29.ffn_up.weight with q4_K_8x8
repack: repack tensor blk.30.attn_q.weight with q4_K_8x8
.repack: repack tensor blk.30.attn_k.weight with q4_K_8x8
repack: repack tensor blk.30.attn_output.weight with q4_K_8x8
repack: repack tensor blk.30.ffn_gate.weight with q4_K_8x8
.repack: repack tensor blk.30.ffn_up.weight with q4_K_8x8
repack: repack tensor blk.31.attn_q.weight with q4_K_8x8
.repack: repack tensor blk.31.attn_k.weight with q4_K_8x8
repack: repack tensor blk.31.attn_output.weight with q4_K_8x8
repack: repack tensor blk.31.ffn_gate.weight with q4_K_8x8
.repack: repack tensor blk.31.ffn_up.weight with q4_K_8x8
...................
llama_context: constructing llama_context
llama_context: n_batch is less than GGML_KQ_MASK_PAD - increasing to 64
llama_context: n_seq_max     = 1
llama_context: n_ctx         = 2048
llama_context: n_ctx_per_seq = 2048
llama_context: n_batch       = 64
llama_context: n_ubatch      = 8
llama_context: causal_attn   = 1
llama_context: flash_attn    = 0
llama_context: kv_unified    = false
llama_context: freq_base     = 1000000.0
llama_context: freq_scale    = 1
llama_context: n_ctx_per_seq (2048) < n_ctx_train (32768) -- the full capacity of the model will not be utilized
set_abort_callback: call
llama_context:        CPU  output buffer size =     0.12 MiB
create_memory: n_ctx = 2048 (padded)
llama_kv_cache_unified: layer   0: dev = CPU
llama_kv_cache_unified: layer   1: dev = CPU
llama_kv_cache_unified: layer   2: dev = CPU
llama_kv_cache_unified: layer   3: dev = CPU
llama_kv_cache_unified: layer   4: dev = CPU
llama_kv_cache_unified: layer   5: dev = CPU
llama_kv_cache_unified: layer   6: dev = CPU
llama_kv_cache_unified: layer   7: dev = CPU
llama_kv_cache_unified: layer   8: dev = CPU
llama_kv_cache_unified: layer   9: dev = CPU
llama_kv_cache_unified: layer  10: dev = CPU
llama_kv_cache_unified: layer  11: dev = CPU
llama_kv_cache_unified: layer  12: dev = CPU
llama_kv_cache_unified: layer  13: dev = CPU
llama_kv_cache_unified: layer  14: dev = CPU
llama_kv_cache_unified: layer  15: dev = CPU
llama_kv_cache_unified: layer  16: dev = CPU
llama_kv_cache_unified: layer  17: dev = CPU
llama_kv_cache_unified: layer  18: dev = CPU
llama_kv_cache_unified: layer  19: dev = CPU
llama_kv_cache_unified: layer  20: dev = CPU
llama_kv_cache_unified: layer  21: dev = CPU
llama_kv_cache_unified: layer  22: dev = CPU
llama_kv_cache_unified: layer  23: dev = CPU
llama_kv_cache_unified: layer  24: dev = CPU
llama_kv_cache_unified: layer  25: dev = CPU
llama_kv_cache_unified: layer  26: dev = CPU
llama_kv_cache_unified: layer  27: dev = CPU
llama_kv_cache_unified: layer  28: dev = CPU
llama_kv_cache_unified: layer  29: dev = CPU
llama_kv_cache_unified: layer  30: dev = CPU
llama_kv_cache_unified: layer  31: dev = CPU
llama_kv_cache_unified:        CPU KV buffer size =   256.00 MiB
llama_kv_cache_unified: size =  256.00 MiB (  2048 cells,  32 layers,  1/1 seqs), K (f16):  128.00 MiB, V (f16):  128.00 MiB
llama_context: enumerating backends
llama_context: backend_ptrs.size() = 1
llama_context: max_nodes = 2328
llama_context: worst-case: n_tokens = 8, n_seqs = 1, n_outputs = 0
graph_reserve: reserving a graph for ubatch with n_tokens =    8, n_seqs =  1, n_outputs =    8
graph_reserve: reserving a graph for ubatch with n_tokens =    1, n_seqs =  1, n_outputs =    1
graph_reserve: reserving a graph for ubatch with n_tokens =    8, n_seqs =  1, n_outputs =    8
llama_context:        CPU compute buffer size =     3.06 MiB
llama_context: graph nodes  = 1126
llama_context: graph splits = 1
CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | LLAMAFILE = 1 | OPENMP = 1 | REPACK = 1 | 
Model metadata: {'general.name': 'mistralai_mistral-7b-instruct-v0.2', 'general.architecture': 'llama', 'llama.context_length': '32768', 'llama.rope.dimension_count': '128', 'llama.embedding_length': '4096', 'llama.block_count': '32', 'llama.feed_forward_length': '14336', 'llama.attention.head_count': '32', 'tokenizer.ggml.eos_token_id': '2', 'general.file_type': '15', 'llama.attention.head_count_kv': '8', 'llama.attention.layer_norm_rms_epsilon': '0.000010', 'llama.rope.freq_base': '1000000.000000', 'tokenizer.ggml.model': 'llama', 'general.quantization_version': '2', 'tokenizer.ggml.bos_token_id': '1', 'tokenizer.ggml.unknown_token_id': '0', 'tokenizer.ggml.padding_token_id': '0', 'tokenizer.ggml.add_bos_token': 'true', 'tokenizer.ggml.add_eos_token': 'false', 'tokenizer.chat_template': "{{ bos_token }}{% for message in messages %}{% if (message['role'] == 'user') != (loop.index0 % 2 == 0) %}{{ raise_exception('Conversation roles must alternate user/assistant/user/assistant/...') }}{% endif %}{% if message['role'] == 'user' %}{{ '[INST] ' + message['content'] + ' [/INST]' }}{% elif message['role'] == 'assistant' %}{{ message['content'] + eos_token}}{% else %}{{ raise_exception('Only user and assistant roles are supported!') }}{% endif %}{% endfor %}"}
Available chat formats from metadata: chat_template.default
Guessed chat format: mistral-instruct
Building index from SQLite database...
Loading embedding model: intfloat/e5-small-v2 on CPU
Index saved to faiss_index
llama_model_loader: loaded meta data with 24 key-value pairs and 291 tensors from C:/Users/Prakhar Srivastava/Desktop/AskQuery/models/Mistral/mistral-7b-instruct-v0.2.Q4_K_M.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = llama
llama_model_loader: - kv   1:                               general.name str              = mistralai_mistral-7b-instruct-v0.2
llama_model_loader: - kv   2:                       llama.context_length u32              = 32768
llama_model_loader: - kv   3:                     llama.embedding_length u32              = 4096
llama_model_loader: - kv   4:                          llama.block_count u32              = 32
llama_model_loader: - kv   5:                  llama.feed_forward_length u32              = 14336
llama_model_loader: - kv   6:                 llama.rope.dimension_count u32              = 128
llama_model_loader: - kv   7:                 llama.attention.head_count u32              = 32
llama_model_loader: - kv   8:              llama.attention.head_count_kv u32              = 8
llama_model_loader: - kv   9:     llama.attention.layer_norm_rms_epsilon f32              = 0.000010
llama_model_loader: - kv  10:                       llama.rope.freq_base f32              = 1000000.000000
llama_model_loader: - kv  11:                          general.file_type u32              = 15
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,32000]   = ["<unk>", "<s>", "</s>", "<0x00>", "<...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,32000]   = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,32000]   = [2, 3, 3, 6, 6, 6, 6, 6, 6, 6, 6, 6, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 1
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 2
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 0
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% for message in mess...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - type  f32:   65 tensors
llama_model_loader: - type q4_K:  193 tensors
llama_model_loader: - type q6_K:   33 tensors
print_info: file format = GGUF V3 (latest)
print_info: file type   = Q4_K - Medium
print_info: file size   = 4.07 GiB (4.83 BPW) 
init_tokenizer: initializing tokenizer for type 1
load: control token:      2 '</s>' is not marked as EOG
load: control token:      1 '<s>' is not marked as EOG
load: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
load: printing all EOG tokens:
load:   - 2 ('</s>')
load: special tokens cache size = 3
load: token to piece cache size = 0.1637 MB
print_info: arch             = llama
print_info: vocab_only       = 0
print_info: n_ctx_train      = 32768
print_info: n_embd           = 4096
print_info: n_layer          = 32
print_info: n_head           = 32
print_info: n_head_kv        = 8
print_info: n_rot            = 128
print_info: n_swa            = 0
print_info: is_swa_any       = 0
print_info: n_embd_head_k    = 128
print_info: n_embd_head_v    = 128
print_info: n_gqa            = 4
print_info: n_embd_k_gqa     = 1024
print_info: n_embd_v_gqa     = 1024
print_info: f_norm_eps       = 0.0e+00
print_info: f_norm_rms_eps   = 1.0e-05
print_info: f_clamp_kqv      = 0.0e+00
print_info: f_max_alibi_bias = 0.0e+00
print_info: f_logit_scale    = 0.0e+00
print_info: f_attn_scale     = 0.0e+00
print_info: n_ff             = 14336
print_info: n_expert         = 0
print_info: n_expert_used    = 0
print_info: causal attn      = 1
print_info: pooling type     = 0
print_info: rope type        = 0
print_info: rope scaling     = linear
print_info: freq_base_train  = 1000000.0
print_info: freq_scale_train = 1
print_info: n_ctx_orig_yarn  = 32768
print_info: rope_finetuned   = unknown
print_info: model type       = 7B
print_info: model params     = 7.24 B
print_info: general.name     = mistralai_mistral-7b-instruct-v0.2
print_info: vocab type       = SPM
print_info: n_vocab          = 32000
print_info: n_merges         = 0
print_info: BOS token        = 1 '<s>'
print_info: EOS token        = 2 '</s>'
print_info: UNK token        = 0 '<unk>'
print_info: PAD token        = 0 '<unk>'
print_info: LF token         = 13 '<0x0A>'
print_info: EOG token        = 2 '</s>'
print_info: max token length = 48
load_tensors: loading model tensors, this can take a while... (mmap = true)
load_tensors: layer   0 assigned to device CPU, is_swa = 0
load_tensors: layer   1 assigned to device CPU, is_swa = 0
load_tensors: layer   2 assigned to device CPU, is_swa = 0
load_tensors: layer   3 assigned to device CPU, is_swa = 0
load_tensors: layer   4 assigned to device CPU, is_swa = 0
load_tensors: layer   5 assigned to device CPU, is_swa = 0
load_tensors: layer   6 assigned to device CPU, is_swa = 0
load_tensors: layer   7 assigned to device CPU, is_swa = 0
load_tensors: layer   8 assigned to device CPU, is_swa = 0
load_tensors: layer   9 assigned to device CPU, is_swa = 0
load_tensors: layer  10 assigned to device CPU, is_swa = 0
load_tensors: layer  11 assigned to device CPU, is_swa = 0
load_tensors: layer  12 assigned to device CPU, is_swa = 0
load_tensors: layer  13 assigned to device CPU, is_swa = 0
load_tensors: layer  14 assigned to device CPU, is_swa = 0
load_tensors: layer  15 assigned to device CPU, is_swa = 0
load_tensors: layer  16 assigned to device CPU, is_swa = 0
load_tensors: layer  17 assigned to device CPU, is_swa = 0
load_tensors: layer  18 assigned to device CPU, is_swa = 0
load_tensors: layer  19 assigned to device CPU, is_swa = 0
load_tensors: layer  20 assigned to device CPU, is_swa = 0
load_tensors: layer  21 assigned to device CPU, is_swa = 0
load_tensors: layer  22 assigned to device CPU, is_swa = 0
load_tensors: layer  23 assigned to device CPU, is_swa = 0
load_tensors: layer  24 assigned to device CPU, is_swa = 0
load_tensors: layer  25 assigned to device CPU, is_swa = 0
load_tensors: layer  26 assigned to device CPU, is_swa = 0
load_tensors: layer  27 assigned to device CPU, is_swa = 0
load_tensors: layer  28 assigned to device CPU, is_swa = 0
load_tensors: layer  29 assigned to device CPU, is_swa = 0
load_tensors: layer  30 assigned to device CPU, is_swa = 0
load_tensors: layer  31 assigned to device CPU, is_swa = 0
load_tensors: layer  32 assigned to device CPU, is_swa = 0
load_tensors: tensor 'token_embd.weight' (q4_K) (and 98 others) cannot be used with preferred buffer type CPU_REPACK, using CPU instead
load_tensors:   CPU_REPACK model buffer size =  3204.00 MiB
load_tensors:   CPU_Mapped model buffer size =  4165.37 MiB
repack: repack tensor blk.0.attn_q.weight with q4_K_8x8
repack: repack tensor blk.0.attn_k.weight with q4_K_8x8
repack: repack tensor blk.0.attn_output.weight with q4_K_8x8
repack: repack tensor blk.0.ffn_gate.weight with q4_K_8x8
.repack: repack tensor blk.0.ffn_up.weight with q4_K_8x8
repack: repack tensor blk.1.attn_q.weight with q4_K_8x8
.repack: repack tensor blk.1.attn_k.weight with q4_K_8x8
repack: repack tensor blk.1.attn_output.weight with q4_K_8x8
repack: repack tensor blk.1.ffn_gate.weight with q4_K_8x8
.repack: repack tensor blk.1.ffn_up.weight with q4_K_8x8
repack: repack tensor blk.2.attn_q.weight with q4_K_8x8
.repack: repack tensor blk.2.attn_k.weight with q4_K_8x8
repack: repack tensor blk.2.attn_output.weight with q4_K_8x8
repack: repack tensor blk.2.ffn_gate.weight with q4_K_8x8
.repack: repack tensor blk.2.ffn_up.weight with q4_K_8x8
repack: repack tensor blk.3.attn_q.weight with q4_K_8x8
.repack: repack tensor blk.3.attn_k.weight with q4_K_8x8
repack: repack tensor blk.3.attn_output.weight with q4_K_8x8
repack: repack tensor blk.3.ffn_gate.weight with q4_K_8x8
.repack: repack tensor blk.3.ffn_up.weight with q4_K_8x8
repack: repack tensor blk.4.attn_q.weight with q4_K_8x8
.repack: repack tensor blk.4.attn_k.weight with q4_K_8x8
repack: repack tensor blk.4.attn_v.weight with q4_K_8x8
repack: repack tensor blk.4.attn_output.weight with q4_K_8x8
repack: repack tensor blk.4.ffn_gate.weight with q4_K_8x8
.repack: repack tensor blk.4.ffn_down.weight with q4_K_8x8
.repack: repack tensor blk.4.ffn_up.weight with q4_K_8x8
repack: repack tensor blk.5.attn_q.weight with q4_K_8x8
.repack: repack tensor blk.5.attn_k.weight with q4_K_8x8
repack: repack tensor blk.5.attn_v.weight with q4_K_8x8
repack: repack tensor blk.5.attn_output.weight with q4_K_8x8
repack: repack tensor blk.5.ffn_gate.weight with q4_K_8x8
.repack: repack tensor blk.5.ffn_down.weight with q4_K_8x8
repack: repack tensor blk.5.ffn_up.weight with q4_K_8x8
.repack: repack tensor blk.6.attn_q.weight with q4_K_8x8
repack: repack tensor blk.6.attn_k.weight with q4_K_8x8
repack: repack tensor blk.6.attn_output.weight with q4_K_8x8
.repack: repack tensor blk.6.ffn_gate.weight with q4_K_8x8
repack: repack tensor blk.6.ffn_up.weight with q4_K_8x8
.repack: repack tensor blk.7.attn_q.weight with q4_K_8x8
repack: repack tensor blk.7.attn_k.weight with q4_K_8x8
repack: repack tensor blk.7.attn_v.weight with q4_K_8x8
repack: repack tensor blk.7.attn_output.weight with q4_K_8x8
.repack: repack tensor blk.7.ffn_gate.weight with q4_K_8x8
repack: repack tensor blk.7.ffn_down.weight with q4_K_8x8
.repack: repack tensor blk.7.ffn_up.weight with q4_K_8x8
.repack: repack tensor blk.8.attn_q.weight with q4_K_8x8
repack: repack tensor blk.8.attn_k.weight with q4_K_8x8
repack: repack tensor blk.8.attn_v.weight with q4_K_8x8
repack: repack tensor blk.8.attn_output.weight with q4_K_8x8
repack: repack tensor blk.8.ffn_gate.weight with q4_K_8x8
.repack: repack tensor blk.8.ffn_down.weight with q4_K_8x8
.repack: repack tensor blk.8.ffn_up.weight with q4_K_8x8
.repack: repack tensor blk.9.attn_q.weight with q4_K_8x8
repack: repack tensor blk.9.attn_k.weight with q4_K_8x8
repack: repack tensor blk.9.attn_output.weight with q4_K_8x8
repack: repack tensor blk.9.ffn_gate.weight with q4_K_8x8
.repack: repack tensor blk.9.ffn_up.weight with q4_K_8x8
.repack: repack tensor blk.10.attn_q.weight with q4_K_8x8
repack: repack tensor blk.10.attn_k.weight with q4_K_8x8
repack: repack tensor blk.10.attn_v.weight with q4_K_8x8
repack: repack tensor blk.10.attn_output.weight with q4_K_8x8
repack: repack tensor blk.10.ffn_gate.weight with q4_K_8x8
.repack: repack tensor blk.10.ffn_down.weight with q4_K_8x8
.repack: repack tensor blk.10.ffn_up.weight with q4_K_8x8
.repack: repack tensor blk.11.attn_q.weight with q4_K_8x8
repack: repack tensor blk.11.attn_k.weight with q4_K_8x8
repack: repack tensor blk.11.attn_v.weight with q4_K_8x8
repack: repack tensor blk.11.attn_output.weight with q4_K_8x8
repack: repack tensor blk.11.ffn_gate.weight with q4_K_8x8
.repack: repack tensor blk.11.ffn_down.weight with q4_K_8x8
.repack: repack tensor blk.11.ffn_up.weight with q4_K_8x8
repack: repack tensor blk.12.attn_q.weight with q4_K_8x8
.repack: repack tensor blk.12.attn_k.weight with q4_K_8x8
repack: repack tensor blk.12.attn_output.weight with q4_K_8x8
repack: repack tensor blk.12.ffn_gate.weight with q4_K_8x8
.repack: repack tensor blk.12.ffn_up.weight with q4_K_8x8
repack: repack tensor blk.13.attn_q.weight with q4_K_8x8
.repack: repack tensor blk.13.attn_k.weight with q4_K_8x8
repack: repack tensor blk.13.attn_v.weight with q4_K_8x8
repack: repack tensor blk.13.attn_output.weight with q4_K_8x8
repack: repack tensor blk.13.ffn_gate.weight with q4_K_8x8
.repack: repack tensor blk.13.ffn_down.weight with q4_K_8x8
repack: repack tensor blk.13.ffn_up.weight with q4_K_8x8
.repack: repack tensor blk.14.attn_q.weight with q4_K_8x8
repack: repack tensor blk.14.attn_k.weight with q4_K_8x8
repack: repack tensor blk.14.attn_v.weight with q4_K_8x8
repack: repack tensor blk.14.attn_output.weight with q4_K_8x8
.repack: repack tensor blk.14.ffn_gate.weight with q4_K_8x8
repack: repack tensor blk.14.ffn_down.weight with q4_K_8x8
.repack: repack tensor blk.14.ffn_up.weight with q4_K_8x8
.repack: repack tensor blk.15.attn_q.weight with q4_K_8x8
repack: repack tensor blk.15.attn_k.weight with q4_K_8x8
repack: repack tensor blk.15.attn_output.weight with q4_K_8x8
repack: repack tensor blk.15.ffn_gate.weight with q4_K_8x8
.repack: repack tensor blk.15.ffn_up.weight with q4_K_8x8
.repack: repack tensor blk.16.attn_q.weight with q4_K_8x8
repack: repack tensor blk.16.attn_k.weight with q4_K_8x8
repack: repack tensor blk.16.attn_v.weight with q4_K_8x8
repack: repack tensor blk.16.attn_output.weight with q4_K_8x8
.repack: repack tensor blk.16.ffn_gate.weight with q4_K_8x8
repack: repack tensor blk.16.ffn_down.weight with q4_K_8x8
.repack: repack tensor blk.16.ffn_up.weight with q4_K_8x8
.repack: repack tensor blk.17.attn_q.weight with q4_K_8x8
repack: repack tensor blk.17.attn_k.weight with q4_K_8x8
repack: repack tensor blk.17.attn_v.weight with q4_K_8x8
repack: repack tensor blk.17.attn_output.weight with q4_K_8x8
repack: repack tensor blk.17.ffn_gate.weight with q4_K_8x8
.repack: repack tensor blk.17.ffn_down.weight with q4_K_8x8
.repack: repack tensor blk.17.ffn_up.weight with q4_K_8x8
.repack: repack tensor blk.18.attn_q.weight with q4_K_8x8
repack: repack tensor blk.18.attn_k.weight with q4_K_8x8
repack: repack tensor blk.18.attn_output.weight with q4_K_8x8
repack: repack tensor blk.18.ffn_gate.weight with q4_K_8x8
.repack: repack tensor blk.18.ffn_up.weight with q4_K_8x8
.repack: repack tensor blk.19.attn_q.weight with q4_K_8x8
repack: repack tensor blk.19.attn_k.weight with q4_K_8x8
repack: repack tensor blk.19.attn_v.weight with q4_K_8x8
repack: repack tensor blk.19.attn_output.weight with q4_K_8x8
repack: repack tensor blk.19.ffn_gate.weight with q4_K_8x8
.repack: repack tensor blk.19.ffn_down.weight with q4_K_8x8
.repack: repack tensor blk.19.ffn_up.weight with q4_K_8x8
repack: repack tensor blk.20.attn_q.weight with q4_K_8x8
.repack: repack tensor blk.20.attn_k.weight with q4_K_8x8
repack: repack tensor blk.20.attn_v.weight with q4_K_8x8
repack: repack tensor blk.20.attn_output.weight with q4_K_8x8
repack: repack tensor blk.20.ffn_gate.weight with q4_K_8x8
.repack: repack tensor blk.20.ffn_down.weight with q4_K_8x8
repack: repack tensor blk.20.ffn_up.weight with q4_K_8x8
.repack: repack tensor blk.21.attn_q.weight with q4_K_8x8
repack: repack tensor blk.21.attn_k.weight with q4_K_8x8
repack: repack tensor blk.21.attn_output.weight with q4_K_8x8
.repack: repack tensor blk.21.ffn_gate.weight with q4_K_8x8
repack: repack tensor blk.21.ffn_up.weight with q4_K_8x8
.repack: repack tensor blk.22.attn_q.weight with q4_K_8x8
repack: repack tensor blk.22.attn_k.weight with q4_K_8x8
repack: repack tensor blk.22.attn_v.weight with q4_K_8x8
.repack: repack tensor blk.22.attn_output.weight with q4_K_8x8
repack: repack tensor blk.22.ffn_gate.weight with q4_K_8x8
repack: repack tensor blk.22.ffn_down.weight with q4_K_8x8
.repack: repack tensor blk.22.ffn_up.weight with q4_K_8x8
.repack: repack tensor blk.23.attn_q.weight with q4_K_8x8
repack: repack tensor blk.23.attn_k.weight with q4_K_8x8
repack: repack tensor blk.23.attn_v.weight with q4_K_8x8
repack: repack tensor blk.23.attn_output.weight with q4_K_8x8
.repack: repack tensor blk.23.ffn_gate.weight with q4_K_8x8
repack: repack tensor blk.23.ffn_down.weight with q4_K_8x8
.repack: repack tensor blk.23.ffn_up.weight with q4_K_8x8
.repack: repack tensor blk.24.attn_q.weight with q4_K_8x8
repack: repack tensor blk.24.attn_k.weight with q4_K_8x8
repack: repack tensor blk.24.attn_output.weight with q4_K_8x8
repack: repack tensor blk.24.ffn_gate.weight with q4_K_8x8
.repack: repack tensor blk.24.ffn_up.weight with q4_K_8x8
.repack: repack tensor blk.25.attn_q.weight with q4_K_8x8
repack: repack tensor blk.25.attn_k.weight with q4_K_8x8
repack: repack tensor blk.25.attn_v.weight with q4_K_8x8
repack: repack tensor blk.25.attn_output.weight with q4_K_8x8
repack: repack tensor blk.25.ffn_gate.weight with q4_K_8x8
.repack: repack tensor blk.25.ffn_down.weight with q4_K_8x8
.repack: repack tensor blk.25.ffn_up.weight with q4_K_8x8
.repack: repack tensor blk.26.attn_q.weight with q4_K_8x8
repack: repack tensor blk.26.attn_k.weight with q4_K_8x8
repack: repack tensor blk.26.attn_v.weight with q4_K_8x8
repack: repack tensor blk.26.attn_output.weight with q4_K_8x8
repack: repack tensor blk.26.ffn_gate.weight with q4_K_8x8
.repack: repack tensor blk.26.ffn_down.weight with q4_K_8x8
.repack: repack tensor blk.26.ffn_up.weight with q4_K_8x8
repack: repack tensor blk.27.attn_q.weight with q4_K_8x8
.repack: repack tensor blk.27.attn_k.weight with q4_K_8x8
repack: repack tensor blk.27.attn_output.weight with q4_K_8x8
repack: repack tensor blk.27.ffn_gate.weight with q4_K_8x8
.repack: repack tensor blk.27.ffn_up.weight with q4_K_8x8
repack: repack tensor blk.28.attn_q.weight with q4_K_8x8
.repack: repack tensor blk.28.attn_k.weight with q4_K_8x8
repack: repack tensor blk.28.attn_output.weight with q4_K_8x8
repack: repack tensor blk.28.ffn_gate.weight with q4_K_8x8
.repack: repack tensor blk.28.ffn_up.weight with q4_K_8x8
repack: repack tensor blk.29.attn_q.weight with q4_K_8x8
.repack: repack tensor blk.29.attn_k.weight with q4_K_8x8
repack: repack tensor blk.29.attn_output.weight with q4_K_8x8
repack: repack tensor blk.29.ffn_gate.weight with q4_K_8x8
.repack: repack tensor blk.29.ffn_up.weight with q4_K_8x8
repack: repack tensor blk.30.attn_q.weight with q4_K_8x8
.repack: repack tensor blk.30.attn_k.weight with q4_K_8x8
repack: repack tensor blk.30.attn_output.weight with q4_K_8x8
repack: repack tensor blk.30.ffn_gate.weight with q4_K_8x8
.repack: repack tensor blk.30.ffn_up.weight with q4_K_8x8
repack: repack tensor blk.31.attn_q.weight with q4_K_8x8
.repack: repack tensor blk.31.attn_k.weight with q4_K_8x8
repack: repack tensor blk.31.attn_output.weight with q4_K_8x8
repack: repack tensor blk.31.ffn_gate.weight with q4_K_8x8
.repack: repack tensor blk.31.ffn_up.weight with q4_K_8x8
...................
llama_context: constructing llama_context
llama_context: n_batch is less than GGML_KQ_MASK_PAD - increasing to 64
llama_context: n_seq_max     = 1
llama_context: n_ctx         = 2048
llama_context: n_ctx_per_seq = 2048
llama_context: n_batch       = 64
llama_context: n_ubatch      = 8
llama_context: causal_attn   = 1
llama_context: flash_attn    = 0
llama_context: kv_unified    = false
llama_context: freq_base     = 1000000.0
llama_context: freq_scale    = 1
llama_context: n_ctx_per_seq (2048) < n_ctx_train (32768) -- the full capacity of the model will not be utilized
set_abort_callback: call
llama_context:        CPU  output buffer size =     0.12 MiB
create_memory: n_ctx = 2048 (padded)
llama_kv_cache_unified: layer   0: dev = CPU
llama_kv_cache_unified: layer   1: dev = CPU
llama_kv_cache_unified: layer   2: dev = CPU
llama_kv_cache_unified: layer   3: dev = CPU
llama_kv_cache_unified: layer   4: dev = CPU
llama_kv_cache_unified: layer   5: dev = CPU
llama_kv_cache_unified: layer   6: dev = CPU
llama_kv_cache_unified: layer   7: dev = CPU
llama_kv_cache_unified: layer   8: dev = CPU
llama_kv_cache_unified: layer   9: dev = CPU
llama_kv_cache_unified: layer  10: dev = CPU
llama_kv_cache_unified: layer  11: dev = CPU
llama_kv_cache_unified: layer  12: dev = CPU
llama_kv_cache_unified: layer  13: dev = CPU
llama_kv_cache_unified: layer  14: dev = CPU
llama_kv_cache_unified: layer  15: dev = CPU
llama_kv_cache_unified: layer  16: dev = CPU
llama_kv_cache_unified: layer  17: dev = CPU
llama_kv_cache_unified: layer  18: dev = CPU
llama_kv_cache_unified: layer  19: dev = CPU
llama_kv_cache_unified: layer  20: dev = CPU
llama_kv_cache_unified: layer  21: dev = CPU
llama_kv_cache_unified: layer  22: dev = CPU
llama_kv_cache_unified: layer  23: dev = CPU
llama_kv_cache_unified: layer  24: dev = CPU
llama_kv_cache_unified: layer  25: dev = CPU
llama_kv_cache_unified: layer  26: dev = CPU
llama_kv_cache_unified: layer  27: dev = CPU
llama_kv_cache_unified: layer  28: dev = CPU
llama_kv_cache_unified: layer  29: dev = CPU
llama_kv_cache_unified: layer  30: dev = CPU
llama_kv_cache_unified: layer  31: dev = CPU
llama_kv_cache_unified:        CPU KV buffer size =   256.00 MiB
llama_kv_cache_unified: size =  256.00 MiB (  2048 cells,  32 layers,  1/1 seqs), K (f16):  128.00 MiB, V (f16):  128.00 MiB
llama_context: enumerating backends
llama_context: backend_ptrs.size() = 1
llama_context: max_nodes = 2328
llama_context: worst-case: n_tokens = 8, n_seqs = 1, n_outputs = 0
graph_reserve: reserving a graph for ubatch with n_tokens =    8, n_seqs =  1, n_outputs =    8
graph_reserve: reserving a graph for ubatch with n_tokens =    1, n_seqs =  1, n_outputs =    1
graph_reserve: reserving a graph for ubatch with n_tokens =    8, n_seqs =  1, n_outputs =    8
llama_context:        CPU compute buffer size =     3.06 MiB
llama_context: graph nodes  = 1126
llama_context: graph splits = 1
CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | LLAMAFILE = 1 | OPENMP = 1 | REPACK = 1 | 
Model metadata: {'general.name': 'mistralai_mistral-7b-instruct-v0.2', 'general.architecture': 'llama', 'llama.context_length': '32768', 'llama.rope.dimension_count': '128', 'llama.embedding_length': '4096', 'llama.block_count': '32', 'llama.feed_forward_length': '14336', 'llama.attention.head_count': '32', 'tokenizer.ggml.eos_token_id': '2', 'general.file_type': '15', 'llama.attention.head_count_kv': '8', 'llama.attention.layer_norm_rms_epsilon': '0.000010', 'llama.rope.freq_base': '1000000.000000', 'tokenizer.ggml.model': 'llama', 'general.quantization_version': '2', 'tokenizer.ggml.bos_token_id': '1', 'tokenizer.ggml.unknown_token_id': '0', 'tokenizer.ggml.padding_token_id': '0', 'tokenizer.ggml.add_bos_token': 'true', 'tokenizer.ggml.add_eos_token': 'false', 'tokenizer.chat_template': "{{ bos_token }}{% for message in messages %}{% if (message['role'] == 'user') != (loop.index0 % 2 == 0) %}{{ raise_exception('Conversation roles must alternate user/assistant/user/assistant/...') }}{% endif %}{% if message['role'] == 'user' %}{{ '[INST] ' + message['content'] + ' [/INST]' }}{% elif message['role'] == 'assistant' %}{{ message['content'] + eos_token}}{% else %}{{ raise_exception('Only user and assistant roles are supported!') }}{% endif %}{% endfor %}"}
Available chat formats from metadata: chat_template.default
Guessed chat format: mistral-instruct
Building index from SQLite database...
Loading embedding model: intfloat/e5-small-v2 on CPU
Index saved to faiss_index
llama_perf_context_print:        load time =  165554.84 ms
llama_perf_context_print: prompt eval time =  165552.36 ms /   417 tokens (  397.01 ms per token,     2.52 tokens per second)
llama_perf_context_print:        eval time =   23462.31 ms /    37 runs   (  634.12 ms per token,     1.58 tokens per second)
llama_perf_context_print:       total time =  189064.95 ms /   454 tokens
llama_perf_context_print:    graphs reused =         75
LLM is explicitly disabled. Using MockLLM.
llama_model_loader: loaded meta data with 24 key-value pairs and 291 tensors from C:/Users/Prakhar Srivastava/Desktop/AskQuery/models/Mistral/mistral-7b-instruct-v0.2.Q4_K_M.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = llama
llama_model_loader: - kv   1:                               general.name str              = mistralai_mistral-7b-instruct-v0.2
llama_model_loader: - kv   2:                       llama.context_length u32              = 32768
llama_model_loader: - kv   3:                     llama.embedding_length u32              = 4096
llama_model_loader: - kv   4:                          llama.block_count u32              = 32
llama_model_loader: - kv   5:                  llama.feed_forward_length u32              = 14336
llama_model_loader: - kv   6:                 llama.rope.dimension_count u32              = 128
llama_model_loader: - kv   7:                 llama.attention.head_count u32              = 32
llama_model_loader: - kv   8:              llama.attention.head_count_kv u32              = 8
llama_model_loader: - kv   9:     llama.attention.layer_norm_rms_epsilon f32              = 0.000010
llama_model_loader: - kv  10:                       llama.rope.freq_base f32              = 1000000.000000
llama_model_loader: - kv  11:                          general.file_type u32              = 15
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,32000]   = ["<unk>", "<s>", "</s>", "<0x00>", "<...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,32000]   = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,32000]   = [2, 3, 3, 6, 6, 6, 6, 6, 6, 6, 6, 6, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 1
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 2
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 0
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% for message in mess...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - type  f32:   65 tensors
llama_model_loader: - type q4_K:  193 tensors
llama_model_loader: - type q6_K:   33 tensors
print_info: file format = GGUF V3 (latest)
print_info: file type   = Q4_K - Medium
print_info: file size   = 4.07 GiB (4.83 BPW) 
init_tokenizer: initializing tokenizer for type 1
load: control token:      2 '</s>' is not marked as EOG
load: control token:      1 '<s>' is not marked as EOG
load: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
load: printing all EOG tokens:
load:   - 2 ('</s>')
load: special tokens cache size = 3
load: token to piece cache size = 0.1637 MB
print_info: arch             = llama
print_info: vocab_only       = 0
print_info: n_ctx_train      = 32768
print_info: n_embd           = 4096
print_info: n_layer          = 32
print_info: n_head           = 32
print_info: n_head_kv        = 8
print_info: n_rot            = 128
print_info: n_swa            = 0
print_info: is_swa_any       = 0
print_info: n_embd_head_k    = 128
print_info: n_embd_head_v    = 128
print_info: n_gqa            = 4
print_info: n_embd_k_gqa     = 1024
print_info: n_embd_v_gqa     = 1024
print_info: f_norm_eps       = 0.0e+00
print_info: f_norm_rms_eps   = 1.0e-05
print_info: f_clamp_kqv      = 0.0e+00
print_info: f_max_alibi_bias = 0.0e+00
print_info: f_logit_scale    = 0.0e+00
print_info: f_attn_scale     = 0.0e+00
print_info: n_ff             = 14336
print_info: n_expert         = 0
print_info: n_expert_used    = 0
print_info: causal attn      = 1
print_info: pooling type     = 0
print_info: rope type        = 0
print_info: rope scaling     = linear
print_info: freq_base_train  = 1000000.0
print_info: freq_scale_train = 1
print_info: n_ctx_orig_yarn  = 32768
print_info: rope_finetuned   = unknown
print_info: model type       = 7B
print_info: model params     = 7.24 B
print_info: general.name     = mistralai_mistral-7b-instruct-v0.2
print_info: vocab type       = SPM
print_info: n_vocab          = 32000
print_info: n_merges         = 0
print_info: BOS token        = 1 '<s>'
print_info: EOS token        = 2 '</s>'
print_info: UNK token        = 0 '<unk>'
print_info: PAD token        = 0 '<unk>'
print_info: LF token         = 13 '<0x0A>'
print_info: EOG token        = 2 '</s>'
print_info: max token length = 48
load_tensors: loading model tensors, this can take a while... (mmap = true)
load_tensors: layer   0 assigned to device CPU, is_swa = 0
load_tensors: layer   1 assigned to device CPU, is_swa = 0
load_tensors: layer   2 assigned to device CPU, is_swa = 0
load_tensors: layer   3 assigned to device CPU, is_swa = 0
load_tensors: layer   4 assigned to device CPU, is_swa = 0
load_tensors: layer   5 assigned to device CPU, is_swa = 0
load_tensors: layer   6 assigned to device CPU, is_swa = 0
load_tensors: layer   7 assigned to device CPU, is_swa = 0
load_tensors: layer   8 assigned to device CPU, is_swa = 0
load_tensors: layer   9 assigned to device CPU, is_swa = 0
load_tensors: layer  10 assigned to device CPU, is_swa = 0
load_tensors: layer  11 assigned to device CPU, is_swa = 0
load_tensors: layer  12 assigned to device CPU, is_swa = 0
load_tensors: layer  13 assigned to device CPU, is_swa = 0
load_tensors: layer  14 assigned to device CPU, is_swa = 0
load_tensors: layer  15 assigned to device CPU, is_swa = 0
load_tensors: layer  16 assigned to device CPU, is_swa = 0
load_tensors: layer  17 assigned to device CPU, is_swa = 0
load_tensors: layer  18 assigned to device CPU, is_swa = 0
load_tensors: layer  19 assigned to device CPU, is_swa = 0
load_tensors: layer  20 assigned to device CPU, is_swa = 0
load_tensors: layer  21 assigned to device CPU, is_swa = 0
load_tensors: layer  22 assigned to device CPU, is_swa = 0
load_tensors: layer  23 assigned to device CPU, is_swa = 0
load_tensors: layer  24 assigned to device CPU, is_swa = 0
load_tensors: layer  25 assigned to device CPU, is_swa = 0
load_tensors: layer  26 assigned to device CPU, is_swa = 0
load_tensors: layer  27 assigned to device CPU, is_swa = 0
load_tensors: layer  28 assigned to device CPU, is_swa = 0
load_tensors: layer  29 assigned to device CPU, is_swa = 0
load_tensors: layer  30 assigned to device CPU, is_swa = 0
load_tensors: layer  31 assigned to device CPU, is_swa = 0
load_tensors: layer  32 assigned to device CPU, is_swa = 0
load_tensors: tensor 'token_embd.weight' (q4_K) (and 98 others) cannot be used with preferred buffer type CPU_REPACK, using CPU instead
load_tensors:   CPU_REPACK model buffer size =  3204.00 MiB
load_tensors:   CPU_Mapped model buffer size =  4165.37 MiB
repack: repack tensor blk.0.attn_q.weight with q4_K_8x8
repack: repack tensor blk.0.attn_k.weight with q4_K_8x8
repack: repack tensor blk.0.attn_output.weight with q4_K_8x8
repack: repack tensor blk.0.ffn_gate.weight with q4_K_8x8
.repack: repack tensor blk.0.ffn_up.weight with q4_K_8x8
repack: repack tensor blk.1.attn_q.weight with q4_K_8x8
.repack: repack tensor blk.1.attn_k.weight with q4_K_8x8
repack: repack tensor blk.1.attn_output.weight with q4_K_8x8
repack: repack tensor blk.1.ffn_gate.weight with q4_K_8x8
.repack: repack tensor blk.1.ffn_up.weight with q4_K_8x8
repack: repack tensor blk.2.attn_q.weight with q4_K_8x8
.repack: repack tensor blk.2.attn_k.weight with q4_K_8x8
repack: repack tensor blk.2.attn_output.weight with q4_K_8x8
repack: repack tensor blk.2.ffn_gate.weight with q4_K_8x8
.repack: repack tensor blk.2.ffn_up.weight with q4_K_8x8
repack: repack tensor blk.3.attn_q.weight with q4_K_8x8
.repack: repack tensor blk.3.attn_k.weight with q4_K_8x8
repack: repack tensor blk.3.attn_output.weight with q4_K_8x8
repack: repack tensor blk.3.ffn_gate.weight with q4_K_8x8
.repack: repack tensor blk.3.ffn_up.weight with q4_K_8x8
repack: repack tensor blk.4.attn_q.weight with q4_K_8x8
.repack: repack tensor blk.4.attn_k.weight with q4_K_8x8
repack: repack tensor blk.4.attn_v.weight with q4_K_8x8
repack: repack tensor blk.4.attn_output.weight with q4_K_8x8
repack: repack tensor blk.4.ffn_gate.weight with q4_K_8x8
.repack: repack tensor blk.4.ffn_down.weight with q4_K_8x8
.repack: repack tensor blk.4.ffn_up.weight with q4_K_8x8
repack: repack tensor blk.5.attn_q.weight with q4_K_8x8
.repack: repack tensor blk.5.attn_k.weight with q4_K_8x8
repack: repack tensor blk.5.attn_v.weight with q4_K_8x8
repack: repack tensor blk.5.attn_output.weight with q4_K_8x8
repack: repack tensor blk.5.ffn_gate.weight with q4_K_8x8
.repack: repack tensor blk.5.ffn_down.weight with q4_K_8x8
repack: repack tensor blk.5.ffn_up.weight with q4_K_8x8
.repack: repack tensor blk.6.attn_q.weight with q4_K_8x8
repack: repack tensor blk.6.attn_k.weight with q4_K_8x8
repack: repack tensor blk.6.attn_output.weight with q4_K_8x8
.repack: repack tensor blk.6.ffn_gate.weight with q4_K_8x8
repack: repack tensor blk.6.ffn_up.weight with q4_K_8x8
.repack: repack tensor blk.7.attn_q.weight with q4_K_8x8
repack: repack tensor blk.7.attn_k.weight with q4_K_8x8
repack: repack tensor blk.7.attn_v.weight with q4_K_8x8
repack: repack tensor blk.7.attn_output.weight with q4_K_8x8
.repack: repack tensor blk.7.ffn_gate.weight with q4_K_8x8
repack: repack tensor blk.7.ffn_down.weight with q4_K_8x8
.repack: repack tensor blk.7.ffn_up.weight with q4_K_8x8
.repack: repack tensor blk.8.attn_q.weight with q4_K_8x8
repack: repack tensor blk.8.attn_k.weight with q4_K_8x8
repack: repack tensor blk.8.attn_v.weight with q4_K_8x8
repack: repack tensor blk.8.attn_output.weight with q4_K_8x8
repack: repack tensor blk.8.ffn_gate.weight with q4_K_8x8
.repack: repack tensor blk.8.ffn_down.weight with q4_K_8x8
.repack: repack tensor blk.8.ffn_up.weight with q4_K_8x8
.repack: repack tensor blk.9.attn_q.weight with q4_K_8x8
repack: repack tensor blk.9.attn_k.weight with q4_K_8x8
repack: repack tensor blk.9.attn_output.weight with q4_K_8x8
repack: repack tensor blk.9.ffn_gate.weight with q4_K_8x8
.repack: repack tensor blk.9.ffn_up.weight with q4_K_8x8
.repack: repack tensor blk.10.attn_q.weight with q4_K_8x8
repack: repack tensor blk.10.attn_k.weight with q4_K_8x8
repack: repack tensor blk.10.attn_v.weight with q4_K_8x8
repack: repack tensor blk.10.attn_output.weight with q4_K_8x8
repack: repack tensor blk.10.ffn_gate.weight with q4_K_8x8
.repack: repack tensor blk.10.ffn_down.weight with q4_K_8x8
.repack: repack tensor blk.10.ffn_up.weight with q4_K_8x8
.repack: repack tensor blk.11.attn_q.weight with q4_K_8x8
repack: repack tensor blk.11.attn_k.weight with q4_K_8x8
repack: repack tensor blk.11.attn_v.weight with q4_K_8x8
repack: repack tensor blk.11.attn_output.weight with q4_K_8x8
repack: repack tensor blk.11.ffn_gate.weight with q4_K_8x8
.repack: repack tensor blk.11.ffn_down.weight with q4_K_8x8
.repack: repack tensor blk.11.ffn_up.weight with q4_K_8x8
repack: repack tensor blk.12.attn_q.weight with q4_K_8x8
.repack: repack tensor blk.12.attn_k.weight with q4_K_8x8
repack: repack tensor blk.12.attn_output.weight with q4_K_8x8
repack: repack tensor blk.12.ffn_gate.weight with q4_K_8x8
.repack: repack tensor blk.12.ffn_up.weight with q4_K_8x8
repack: repack tensor blk.13.attn_q.weight with q4_K_8x8
.repack: repack tensor blk.13.attn_k.weight with q4_K_8x8
repack: repack tensor blk.13.attn_v.weight with q4_K_8x8
repack: repack tensor blk.13.attn_output.weight with q4_K_8x8
repack: repack tensor blk.13.ffn_gate.weight with q4_K_8x8
.repack: repack tensor blk.13.ffn_down.weight with q4_K_8x8
repack: repack tensor blk.13.ffn_up.weight with q4_K_8x8
.repack: repack tensor blk.14.attn_q.weight with q4_K_8x8
repack: repack tensor blk.14.attn_k.weight with q4_K_8x8
repack: repack tensor blk.14.attn_v.weight with q4_K_8x8
repack: repack tensor blk.14.attn_output.weight with q4_K_8x8
.repack: repack tensor blk.14.ffn_gate.weight with q4_K_8x8
repack: repack tensor blk.14.ffn_down.weight with q4_K_8x8
.repack: repack tensor blk.14.ffn_up.weight with q4_K_8x8
.repack: repack tensor blk.15.attn_q.weight with q4_K_8x8
repack: repack tensor blk.15.attn_k.weight with q4_K_8x8
repack: repack tensor blk.15.attn_output.weight with q4_K_8x8
repack: repack tensor blk.15.ffn_gate.weight with q4_K_8x8
.repack: repack tensor blk.15.ffn_up.weight with q4_K_8x8
.repack: repack tensor blk.16.attn_q.weight with q4_K_8x8
repack: repack tensor blk.16.attn_k.weight with q4_K_8x8
repack: repack tensor blk.16.attn_v.weight with q4_K_8x8
repack: repack tensor blk.16.attn_output.weight with q4_K_8x8
.repack: repack tensor blk.16.ffn_gate.weight with q4_K_8x8
repack: repack tensor blk.16.ffn_down.weight with q4_K_8x8
.repack: repack tensor blk.16.ffn_up.weight with q4_K_8x8
.repack: repack tensor blk.17.attn_q.weight with q4_K_8x8
repack: repack tensor blk.17.attn_k.weight with q4_K_8x8
repack: repack tensor blk.17.attn_v.weight with q4_K_8x8
repack: repack tensor blk.17.attn_output.weight with q4_K_8x8
repack: repack tensor blk.17.ffn_gate.weight with q4_K_8x8
.repack: repack tensor blk.17.ffn_down.weight with q4_K_8x8
.repack: repack tensor blk.17.ffn_up.weight with q4_K_8x8
.repack: repack tensor blk.18.attn_q.weight with q4_K_8x8
repack: repack tensor blk.18.attn_k.weight with q4_K_8x8
repack: repack tensor blk.18.attn_output.weight with q4_K_8x8
repack: repack tensor blk.18.ffn_gate.weight with q4_K_8x8
.repack: repack tensor blk.18.ffn_up.weight with q4_K_8x8
.repack: repack tensor blk.19.attn_q.weight with q4_K_8x8
repack: repack tensor blk.19.attn_k.weight with q4_K_8x8
repack: repack tensor blk.19.attn_v.weight with q4_K_8x8
repack: repack tensor blk.19.attn_output.weight with q4_K_8x8
repack: repack tensor blk.19.ffn_gate.weight with q4_K_8x8
.repack: repack tensor blk.19.ffn_down.weight with q4_K_8x8
.repack: repack tensor blk.19.ffn_up.weight with q4_K_8x8
repack: repack tensor blk.20.attn_q.weight with q4_K_8x8
.repack: repack tensor blk.20.attn_k.weight with q4_K_8x8
repack: repack tensor blk.20.attn_v.weight with q4_K_8x8
repack: repack tensor blk.20.attn_output.weight with q4_K_8x8
repack: repack tensor blk.20.ffn_gate.weight with q4_K_8x8
.repack: repack tensor blk.20.ffn_down.weight with q4_K_8x8
repack: repack tensor blk.20.ffn_up.weight with q4_K_8x8
.repack: repack tensor blk.21.attn_q.weight with q4_K_8x8
repack: repack tensor blk.21.attn_k.weight with q4_K_8x8
repack: repack tensor blk.21.attn_output.weight with q4_K_8x8
.repack: repack tensor blk.21.ffn_gate.weight with q4_K_8x8
repack: repack tensor blk.21.ffn_up.weight with q4_K_8x8
.repack: repack tensor blk.22.attn_q.weight with q4_K_8x8
repack: repack tensor blk.22.attn_k.weight with q4_K_8x8
repack: repack tensor blk.22.attn_v.weight with q4_K_8x8
.repack: repack tensor blk.22.attn_output.weight with q4_K_8x8
repack: repack tensor blk.22.ffn_gate.weight with q4_K_8x8
repack: repack tensor blk.22.ffn_down.weight with q4_K_8x8
.repack: repack tensor blk.22.ffn_up.weight with q4_K_8x8
.repack: repack tensor blk.23.attn_q.weight with q4_K_8x8
repack: repack tensor blk.23.attn_k.weight with q4_K_8x8
repack: repack tensor blk.23.attn_v.weight with q4_K_8x8
repack: repack tensor blk.23.attn_output.weight with q4_K_8x8
.repack: repack tensor blk.23.ffn_gate.weight with q4_K_8x8
repack: repack tensor blk.23.ffn_down.weight with q4_K_8x8
.repack: repack tensor blk.23.ffn_up.weight with q4_K_8x8
.repack: repack tensor blk.24.attn_q.weight with q4_K_8x8
repack: repack tensor blk.24.attn_k.weight with q4_K_8x8
repack: repack tensor blk.24.attn_output.weight with q4_K_8x8
repack: repack tensor blk.24.ffn_gate.weight with q4_K_8x8
.repack: repack tensor blk.24.ffn_up.weight with q4_K_8x8
.repack: repack tensor blk.25.attn_q.weight with q4_K_8x8
repack: repack tensor blk.25.attn_k.weight with q4_K_8x8
repack: repack tensor blk.25.attn_v.weight with q4_K_8x8
repack: repack tensor blk.25.attn_output.weight with q4_K_8x8
repack: repack tensor blk.25.ffn_gate.weight with q4_K_8x8
.repack: repack tensor blk.25.ffn_down.weight with q4_K_8x8
.repack: repack tensor blk.25.ffn_up.weight with q4_K_8x8
.repack: repack tensor blk.26.attn_q.weight with q4_K_8x8
repack: repack tensor blk.26.attn_k.weight with q4_K_8x8
repack: repack tensor blk.26.attn_v.weight with q4_K_8x8
repack: repack tensor blk.26.attn_output.weight with q4_K_8x8
repack: repack tensor blk.26.ffn_gate.weight with q4_K_8x8
.repack: repack tensor blk.26.ffn_down.weight with q4_K_8x8
.repack: repack tensor blk.26.ffn_up.weight with q4_K_8x8
repack: repack tensor blk.27.attn_q.weight with q4_K_8x8
.repack: repack tensor blk.27.attn_k.weight with q4_K_8x8
repack: repack tensor blk.27.attn_output.weight with q4_K_8x8
repack: repack tensor blk.27.ffn_gate.weight with q4_K_8x8
.repack: repack tensor blk.27.ffn_up.weight with q4_K_8x8
repack: repack tensor blk.28.attn_q.weight with q4_K_8x8
.repack: repack tensor blk.28.attn_k.weight with q4_K_8x8
repack: repack tensor blk.28.attn_output.weight with q4_K_8x8
repack: repack tensor blk.28.ffn_gate.weight with q4_K_8x8
.repack: repack tensor blk.28.ffn_up.weight with q4_K_8x8
repack: repack tensor blk.29.attn_q.weight with q4_K_8x8
.repack: repack tensor blk.29.attn_k.weight with q4_K_8x8
repack: repack tensor blk.29.attn_output.weight with q4_K_8x8
repack: repack tensor blk.29.ffn_gate.weight with q4_K_8x8
.repack: repack tensor blk.29.ffn_up.weight with q4_K_8x8
repack: repack tensor blk.30.attn_q.weight with q4_K_8x8
.repack: repack tensor blk.30.attn_k.weight with q4_K_8x8
repack: repack tensor blk.30.attn_output.weight with q4_K_8x8
repack: repack tensor blk.30.ffn_gate.weight with q4_K_8x8
.repack: repack tensor blk.30.ffn_up.weight with q4_K_8x8
repack: repack tensor blk.31.attn_q.weight with q4_K_8x8
.repack: repack tensor blk.31.attn_k.weight with q4_K_8x8
repack: repack tensor blk.31.attn_output.weight with q4_K_8x8
repack: repack tensor blk.31.ffn_gate.weight with q4_K_8x8
.repack: repack tensor blk.31.ffn_up.weight with q4_K_8x8
...................
llama_context: constructing llama_context
llama_context: n_batch is less than GGML_KQ_MASK_PAD - increasing to 64
llama_context: n_seq_max     = 1
llama_context: n_ctx         = 2048
llama_context: n_ctx_per_seq = 2048
llama_context: n_batch       = 64
llama_context: n_ubatch      = 8
llama_context: causal_attn   = 1
llama_context: flash_attn    = 0
llama_context: kv_unified    = false
llama_context: freq_base     = 1000000.0
llama_context: freq_scale    = 1
llama_context: n_ctx_per_seq (2048) < n_ctx_train (32768) -- the full capacity of the model will not be utilized
set_abort_callback: call
llama_context:        CPU  output buffer size =     0.12 MiB
create_memory: n_ctx = 2048 (padded)
llama_kv_cache_unified: layer   0: dev = CPU
llama_kv_cache_unified: layer   1: dev = CPU
llama_kv_cache_unified: layer   2: dev = CPU
llama_kv_cache_unified: layer   3: dev = CPU
llama_kv_cache_unified: layer   4: dev = CPU
llama_kv_cache_unified: layer   5: dev = CPU
llama_kv_cache_unified: layer   6: dev = CPU
llama_kv_cache_unified: layer   7: dev = CPU
llama_kv_cache_unified: layer   8: dev = CPU
llama_kv_cache_unified: layer   9: dev = CPU
llama_kv_cache_unified: layer  10: dev = CPU
llama_kv_cache_unified: layer  11: dev = CPU
llama_kv_cache_unified: layer  12: dev = CPU
llama_kv_cache_unified: layer  13: dev = CPU
llama_kv_cache_unified: layer  14: dev = CPU
llama_kv_cache_unified: layer  15: dev = CPU
llama_kv_cache_unified: layer  16: dev = CPU
llama_kv_cache_unified: layer  17: dev = CPU
llama_kv_cache_unified: layer  18: dev = CPU
llama_kv_cache_unified: layer  19: dev = CPU
llama_kv_cache_unified: layer  20: dev = CPU
llama_kv_cache_unified: layer  21: dev = CPU
llama_kv_cache_unified: layer  22: dev = CPU
llama_kv_cache_unified: layer  23: dev = CPU
llama_kv_cache_unified: layer  24: dev = CPU
llama_kv_cache_unified: layer  25: dev = CPU
llama_kv_cache_unified: layer  26: dev = CPU
llama_kv_cache_unified: layer  27: dev = CPU
llama_kv_cache_unified: layer  28: dev = CPU
llama_kv_cache_unified: layer  29: dev = CPU
llama_kv_cache_unified: layer  30: dev = CPU
llama_kv_cache_unified: layer  31: dev = CPU
llama_kv_cache_unified:        CPU KV buffer size =   256.00 MiB
llama_kv_cache_unified: size =  256.00 MiB (  2048 cells,  32 layers,  1/1 seqs), K (f16):  128.00 MiB, V (f16):  128.00 MiB
llama_context: enumerating backends
llama_context: backend_ptrs.size() = 1
llama_context: max_nodes = 2328
llama_context: worst-case: n_tokens = 8, n_seqs = 1, n_outputs = 0
graph_reserve: reserving a graph for ubatch with n_tokens =    8, n_seqs =  1, n_outputs =    8
graph_reserve: reserving a graph for ubatch with n_tokens =    1, n_seqs =  1, n_outputs =    1
graph_reserve: reserving a graph for ubatch with n_tokens =    8, n_seqs =  1, n_outputs =    8
llama_context:        CPU compute buffer size =     3.06 MiB
llama_context: graph nodes  = 1126
llama_context: graph splits = 1
CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | LLAMAFILE = 1 | OPENMP = 1 | REPACK = 1 | 
Model metadata: {'general.name': 'mistralai_mistral-7b-instruct-v0.2', 'general.architecture': 'llama', 'llama.context_length': '32768', 'llama.rope.dimension_count': '128', 'llama.embedding_length': '4096', 'llama.block_count': '32', 'llama.feed_forward_length': '14336', 'llama.attention.head_count': '32', 'tokenizer.ggml.eos_token_id': '2', 'general.file_type': '15', 'llama.attention.head_count_kv': '8', 'llama.attention.layer_norm_rms_epsilon': '0.000010', 'llama.rope.freq_base': '1000000.000000', 'tokenizer.ggml.model': 'llama', 'general.quantization_version': '2', 'tokenizer.ggml.bos_token_id': '1', 'tokenizer.ggml.unknown_token_id': '0', 'tokenizer.ggml.padding_token_id': '0', 'tokenizer.ggml.add_bos_token': 'true', 'tokenizer.ggml.add_eos_token': 'false', 'tokenizer.chat_template': "{{ bos_token }}{% for message in messages %}{% if (message['role'] == 'user') != (loop.index0 % 2 == 0) %}{{ raise_exception('Conversation roles must alternate user/assistant/user/assistant/...') }}{% endif %}{% if message['role'] == 'user' %}{{ '[INST] ' + message['content'] + ' [/INST]' }}{% elif message['role'] == 'assistant' %}{{ message['content'] + eos_token}}{% else %}{{ raise_exception('Only user and assistant roles are supported!') }}{% endif %}{% endfor %}"}
Available chat formats from metadata: chat_template.default
Guessed chat format: mistral-instruct
Building index from SQLite database...
Loading embedding model: intfloat/e5-small-v2 on CPU
Index saved to faiss_index
llama_model_loader: loaded meta data with 24 key-value pairs and 291 tensors from C:/Users/Prakhar Srivastava/Desktop/AskQuery/models/Mistral/mistral-7b-instruct-v0.2.Q4_K_M.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = llama
llama_model_loader: - kv   1:                               general.name str              = mistralai_mistral-7b-instruct-v0.2
llama_model_loader: - kv   2:                       llama.context_length u32              = 32768
llama_model_loader: - kv   3:                     llama.embedding_length u32              = 4096
llama_model_loader: - kv   4:                          llama.block_count u32              = 32
llama_model_loader: - kv   5:                  llama.feed_forward_length u32              = 14336
llama_model_loader: - kv   6:                 llama.rope.dimension_count u32              = 128
llama_model_loader: - kv   7:                 llama.attention.head_count u32              = 32
llama_model_loader: - kv   8:              llama.attention.head_count_kv u32              = 8
llama_model_loader: - kv   9:     llama.attention.layer_norm_rms_epsilon f32              = 0.000010
llama_model_loader: - kv  10:                       llama.rope.freq_base f32              = 1000000.000000
llama_model_loader: - kv  11:                          general.file_type u32              = 15
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,32000]   = ["<unk>", "<s>", "</s>", "<0x00>", "<...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,32000]   = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,32000]   = [2, 3, 3, 6, 6, 6, 6, 6, 6, 6, 6, 6, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 1
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 2
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 0
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% for message in mess...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - type  f32:   65 tensors
llama_model_loader: - type q4_K:  193 tensors
llama_model_loader: - type q6_K:   33 tensors
print_info: file format = GGUF V3 (latest)
print_info: file type   = Q4_K - Medium
print_info: file size   = 4.07 GiB (4.83 BPW) 
init_tokenizer: initializing tokenizer for type 1
load: control token:      2 '</s>' is not marked as EOG
load: control token:      1 '<s>' is not marked as EOG
load: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
load: printing all EOG tokens:
load:   - 2 ('</s>')
load: special tokens cache size = 3
load: token to piece cache size = 0.1637 MB
print_info: arch             = llama
print_info: vocab_only       = 0
print_info: n_ctx_train      = 32768
print_info: n_embd           = 4096
print_info: n_layer          = 32
print_info: n_head           = 32
print_info: n_head_kv        = 8
print_info: n_rot            = 128
print_info: n_swa            = 0
print_info: is_swa_any       = 0
print_info: n_embd_head_k    = 128
print_info: n_embd_head_v    = 128
print_info: n_gqa            = 4
print_info: n_embd_k_gqa     = 1024
print_info: n_embd_v_gqa     = 1024
print_info: f_norm_eps       = 0.0e+00
print_info: f_norm_rms_eps   = 1.0e-05
print_info: f_clamp_kqv      = 0.0e+00
print_info: f_max_alibi_bias = 0.0e+00
print_info: f_logit_scale    = 0.0e+00
print_info: f_attn_scale     = 0.0e+00
print_info: n_ff             = 14336
print_info: n_expert         = 0
print_info: n_expert_used    = 0
print_info: causal attn      = 1
print_info: pooling type     = 0
print_info: rope type        = 0
print_info: rope scaling     = linear
print_info: freq_base_train  = 1000000.0
print_info: freq_scale_train = 1
print_info: n_ctx_orig_yarn  = 32768
print_info: rope_finetuned   = unknown
print_info: model type       = 7B
print_info: model params     = 7.24 B
print_info: general.name     = mistralai_mistral-7b-instruct-v0.2
print_info: vocab type       = SPM
print_info: n_vocab          = 32000
print_info: n_merges         = 0
print_info: BOS token        = 1 '<s>'
print_info: EOS token        = 2 '</s>'
print_info: UNK token        = 0 '<unk>'
print_info: PAD token        = 0 '<unk>'
print_info: LF token         = 13 '<0x0A>'
print_info: EOG token        = 2 '</s>'
print_info: max token length = 48
load_tensors: loading model tensors, this can take a while... (mmap = true)
load_tensors: layer   0 assigned to device CPU, is_swa = 0
load_tensors: layer   1 assigned to device CPU, is_swa = 0
load_tensors: layer   2 assigned to device CPU, is_swa = 0
load_tensors: layer   3 assigned to device CPU, is_swa = 0
load_tensors: layer   4 assigned to device CPU, is_swa = 0
load_tensors: layer   5 assigned to device CPU, is_swa = 0
load_tensors: layer   6 assigned to device CPU, is_swa = 0
load_tensors: layer   7 assigned to device CPU, is_swa = 0
load_tensors: layer   8 assigned to device CPU, is_swa = 0
load_tensors: layer   9 assigned to device CPU, is_swa = 0
load_tensors: layer  10 assigned to device CPU, is_swa = 0
load_tensors: layer  11 assigned to device CPU, is_swa = 0
load_tensors: layer  12 assigned to device CPU, is_swa = 0
load_tensors: layer  13 assigned to device CPU, is_swa = 0
load_tensors: layer  14 assigned to device CPU, is_swa = 0
load_tensors: layer  15 assigned to device CPU, is_swa = 0
load_tensors: layer  16 assigned to device CPU, is_swa = 0
load_tensors: layer  17 assigned to device CPU, is_swa = 0
load_tensors: layer  18 assigned to device CPU, is_swa = 0
load_tensors: layer  19 assigned to device CPU, is_swa = 0
load_tensors: layer  20 assigned to device CPU, is_swa = 0
load_tensors: layer  21 assigned to device CPU, is_swa = 0
load_tensors: layer  22 assigned to device CPU, is_swa = 0
load_tensors: layer  23 assigned to device CPU, is_swa = 0
load_tensors: layer  24 assigned to device CPU, is_swa = 0
load_tensors: layer  25 assigned to device CPU, is_swa = 0
load_tensors: layer  26 assigned to device CPU, is_swa = 0
load_tensors: layer  27 assigned to device CPU, is_swa = 0
load_tensors: layer  28 assigned to device CPU, is_swa = 0
load_tensors: layer  29 assigned to device CPU, is_swa = 0
load_tensors: layer  30 assigned to device CPU, is_swa = 0
load_tensors: layer  31 assigned to device CPU, is_swa = 0
load_tensors: layer  32 assigned to device CPU, is_swa = 0
load_tensors: tensor 'token_embd.weight' (q4_K) (and 98 others) cannot be used with preferred buffer type CPU_REPACK, using CPU instead
load_tensors:   CPU_REPACK model buffer size =  3204.00 MiB
load_tensors:   CPU_Mapped model buffer size =  4165.37 MiB
repack: repack tensor blk.0.attn_q.weight with q4_K_8x8
repack: repack tensor blk.0.attn_k.weight with q4_K_8x8
repack: repack tensor blk.0.attn_output.weight with q4_K_8x8
repack: repack tensor blk.0.ffn_gate.weight with q4_K_8x8
.repack: repack tensor blk.0.ffn_up.weight with q4_K_8x8
repack: repack tensor blk.1.attn_q.weight with q4_K_8x8
.repack: repack tensor blk.1.attn_k.weight with q4_K_8x8
repack: repack tensor blk.1.attn_output.weight with q4_K_8x8
repack: repack tensor blk.1.ffn_gate.weight with q4_K_8x8
.repack: repack tensor blk.1.ffn_up.weight with q4_K_8x8
repack: repack tensor blk.2.attn_q.weight with q4_K_8x8
.repack: repack tensor blk.2.attn_k.weight with q4_K_8x8
repack: repack tensor blk.2.attn_output.weight with q4_K_8x8
repack: repack tensor blk.2.ffn_gate.weight with q4_K_8x8
.repack: repack tensor blk.2.ffn_up.weight with q4_K_8x8
repack: repack tensor blk.3.attn_q.weight with q4_K_8x8
.repack: repack tensor blk.3.attn_k.weight with q4_K_8x8
repack: repack tensor blk.3.attn_output.weight with q4_K_8x8
repack: repack tensor blk.3.ffn_gate.weight with q4_K_8x8
.repack: repack tensor blk.3.ffn_up.weight with q4_K_8x8
repack: repack tensor blk.4.attn_q.weight with q4_K_8x8
.repack: repack tensor blk.4.attn_k.weight with q4_K_8x8
repack: repack tensor blk.4.attn_v.weight with q4_K_8x8
repack: repack tensor blk.4.attn_output.weight with q4_K_8x8
repack: repack tensor blk.4.ffn_gate.weight with q4_K_8x8
.repack: repack tensor blk.4.ffn_down.weight with q4_K_8x8
.repack: repack tensor blk.4.ffn_up.weight with q4_K_8x8
repack: repack tensor blk.5.attn_q.weight with q4_K_8x8
.repack: repack tensor blk.5.attn_k.weight with q4_K_8x8
repack: repack tensor blk.5.attn_v.weight with q4_K_8x8
repack: repack tensor blk.5.attn_output.weight with q4_K_8x8
repack: repack tensor blk.5.ffn_gate.weight with q4_K_8x8
.repack: repack tensor blk.5.ffn_down.weight with q4_K_8x8
repack: repack tensor blk.5.ffn_up.weight with q4_K_8x8
.repack: repack tensor blk.6.attn_q.weight with q4_K_8x8
repack: repack tensor blk.6.attn_k.weight with q4_K_8x8
repack: repack tensor blk.6.attn_output.weight with q4_K_8x8
.repack: repack tensor blk.6.ffn_gate.weight with q4_K_8x8
repack: repack tensor blk.6.ffn_up.weight with q4_K_8x8
.repack: repack tensor blk.7.attn_q.weight with q4_K_8x8
repack: repack tensor blk.7.attn_k.weight with q4_K_8x8
repack: repack tensor blk.7.attn_v.weight with q4_K_8x8
repack: repack tensor blk.7.attn_output.weight with q4_K_8x8
.repack: repack tensor blk.7.ffn_gate.weight with q4_K_8x8
repack: repack tensor blk.7.ffn_down.weight with q4_K_8x8
.repack: repack tensor blk.7.ffn_up.weight with q4_K_8x8
.repack: repack tensor blk.8.attn_q.weight with q4_K_8x8
repack: repack tensor blk.8.attn_k.weight with q4_K_8x8
repack: repack tensor blk.8.attn_v.weight with q4_K_8x8
repack: repack tensor blk.8.attn_output.weight with q4_K_8x8
repack: repack tensor blk.8.ffn_gate.weight with q4_K_8x8
.repack: repack tensor blk.8.ffn_down.weight with q4_K_8x8
.repack: repack tensor blk.8.ffn_up.weight with q4_K_8x8
.repack: repack tensor blk.9.attn_q.weight with q4_K_8x8
repack: repack tensor blk.9.attn_k.weight with q4_K_8x8
repack: repack tensor blk.9.attn_output.weight with q4_K_8x8
repack: repack tensor blk.9.ffn_gate.weight with q4_K_8x8
.repack: repack tensor blk.9.ffn_up.weight with q4_K_8x8
.repack: repack tensor blk.10.attn_q.weight with q4_K_8x8
repack: repack tensor blk.10.attn_k.weight with q4_K_8x8
repack: repack tensor blk.10.attn_v.weight with q4_K_8x8
repack: repack tensor blk.10.attn_output.weight with q4_K_8x8
repack: repack tensor blk.10.ffn_gate.weight with q4_K_8x8
.repack: repack tensor blk.10.ffn_down.weight with q4_K_8x8
.repack: repack tensor blk.10.ffn_up.weight with q4_K_8x8
.repack: repack tensor blk.11.attn_q.weight with q4_K_8x8
repack: repack tensor blk.11.attn_k.weight with q4_K_8x8
repack: repack tensor blk.11.attn_v.weight with q4_K_8x8
repack: repack tensor blk.11.attn_output.weight with q4_K_8x8
repack: repack tensor blk.11.ffn_gate.weight with q4_K_8x8
.repack: repack tensor blk.11.ffn_down.weight with q4_K_8x8
.repack: repack tensor blk.11.ffn_up.weight with q4_K_8x8
repack: repack tensor blk.12.attn_q.weight with q4_K_8x8
.repack: repack tensor blk.12.attn_k.weight with q4_K_8x8
repack: repack tensor blk.12.attn_output.weight with q4_K_8x8
repack: repack tensor blk.12.ffn_gate.weight with q4_K_8x8
.repack: repack tensor blk.12.ffn_up.weight with q4_K_8x8
repack: repack tensor blk.13.attn_q.weight with q4_K_8x8
.repack: repack tensor blk.13.attn_k.weight with q4_K_8x8
repack: repack tensor blk.13.attn_v.weight with q4_K_8x8
repack: repack tensor blk.13.attn_output.weight with q4_K_8x8
repack: repack tensor blk.13.ffn_gate.weight with q4_K_8x8
.repack: repack tensor blk.13.ffn_down.weight with q4_K_8x8
repack: repack tensor blk.13.ffn_up.weight with q4_K_8x8
.repack: repack tensor blk.14.attn_q.weight with q4_K_8x8
repack: repack tensor blk.14.attn_k.weight with q4_K_8x8
repack: repack tensor blk.14.attn_v.weight with q4_K_8x8
repack: repack tensor blk.14.attn_output.weight with q4_K_8x8
.repack: repack tensor blk.14.ffn_gate.weight with q4_K_8x8
repack: repack tensor blk.14.ffn_down.weight with q4_K_8x8
.repack: repack tensor blk.14.ffn_up.weight with q4_K_8x8
.repack: repack tensor blk.15.attn_q.weight with q4_K_8x8
repack: repack tensor blk.15.attn_k.weight with q4_K_8x8
repack: repack tensor blk.15.attn_output.weight with q4_K_8x8
repack: repack tensor blk.15.ffn_gate.weight with q4_K_8x8
.repack: repack tensor blk.15.ffn_up.weight with q4_K_8x8
.repack: repack tensor blk.16.attn_q.weight with q4_K_8x8
repack: repack tensor blk.16.attn_k.weight with q4_K_8x8
repack: repack tensor blk.16.attn_v.weight with q4_K_8x8
repack: repack tensor blk.16.attn_output.weight with q4_K_8x8
.repack: repack tensor blk.16.ffn_gate.weight with q4_K_8x8
repack: repack tensor blk.16.ffn_down.weight with q4_K_8x8
.repack: repack tensor blk.16.ffn_up.weight with q4_K_8x8
.repack: repack tensor blk.17.attn_q.weight with q4_K_8x8
repack: repack tensor blk.17.attn_k.weight with q4_K_8x8
repack: repack tensor blk.17.attn_v.weight with q4_K_8x8
repack: repack tensor blk.17.attn_output.weight with q4_K_8x8
repack: repack tensor blk.17.ffn_gate.weight with q4_K_8x8
.repack: repack tensor blk.17.ffn_down.weight with q4_K_8x8
.repack: repack tensor blk.17.ffn_up.weight with q4_K_8x8
.repack: repack tensor blk.18.attn_q.weight with q4_K_8x8
repack: repack tensor blk.18.attn_k.weight with q4_K_8x8
repack: repack tensor blk.18.attn_output.weight with q4_K_8x8
repack: repack tensor blk.18.ffn_gate.weight with q4_K_8x8
.repack: repack tensor blk.18.ffn_up.weight with q4_K_8x8
.repack: repack tensor blk.19.attn_q.weight with q4_K_8x8
repack: repack tensor blk.19.attn_k.weight with q4_K_8x8
repack: repack tensor blk.19.attn_v.weight with q4_K_8x8
repack: repack tensor blk.19.attn_output.weight with q4_K_8x8
repack: repack tensor blk.19.ffn_gate.weight with q4_K_8x8
.repack: repack tensor blk.19.ffn_down.weight with q4_K_8x8
.repack: repack tensor blk.19.ffn_up.weight with q4_K_8x8
repack: repack tensor blk.20.attn_q.weight with q4_K_8x8
.repack: repack tensor blk.20.attn_k.weight with q4_K_8x8
repack: repack tensor blk.20.attn_v.weight with q4_K_8x8
repack: repack tensor blk.20.attn_output.weight with q4_K_8x8
repack: repack tensor blk.20.ffn_gate.weight with q4_K_8x8
.repack: repack tensor blk.20.ffn_down.weight with q4_K_8x8
repack: repack tensor blk.20.ffn_up.weight with q4_K_8x8
.repack: repack tensor blk.21.attn_q.weight with q4_K_8x8
repack: repack tensor blk.21.attn_k.weight with q4_K_8x8
repack: repack tensor blk.21.attn_output.weight with q4_K_8x8
.repack: repack tensor blk.21.ffn_gate.weight with q4_K_8x8
repack: repack tensor blk.21.ffn_up.weight with q4_K_8x8
.repack: repack tensor blk.22.attn_q.weight with q4_K_8x8
repack: repack tensor blk.22.attn_k.weight with q4_K_8x8
repack: repack tensor blk.22.attn_v.weight with q4_K_8x8
.repack: repack tensor blk.22.attn_output.weight with q4_K_8x8
repack: repack tensor blk.22.ffn_gate.weight with q4_K_8x8
repack: repack tensor blk.22.ffn_down.weight with q4_K_8x8
.repack: repack tensor blk.22.ffn_up.weight with q4_K_8x8
.repack: repack tensor blk.23.attn_q.weight with q4_K_8x8
repack: repack tensor blk.23.attn_k.weight with q4_K_8x8
repack: repack tensor blk.23.attn_v.weight with q4_K_8x8
repack: repack tensor blk.23.attn_output.weight with q4_K_8x8
.repack: repack tensor blk.23.ffn_gate.weight with q4_K_8x8
repack: repack tensor blk.23.ffn_down.weight with q4_K_8x8
.repack: repack tensor blk.23.ffn_up.weight with q4_K_8x8
.repack: repack tensor blk.24.attn_q.weight with q4_K_8x8
repack: repack tensor blk.24.attn_k.weight with q4_K_8x8
repack: repack tensor blk.24.attn_output.weight with q4_K_8x8
repack: repack tensor blk.24.ffn_gate.weight with q4_K_8x8
.repack: repack tensor blk.24.ffn_up.weight with q4_K_8x8
.repack: repack tensor blk.25.attn_q.weight with q4_K_8x8
repack: repack tensor blk.25.attn_k.weight with q4_K_8x8
repack: repack tensor blk.25.attn_v.weight with q4_K_8x8
repack: repack tensor blk.25.attn_output.weight with q4_K_8x8
repack: repack tensor blk.25.ffn_gate.weight with q4_K_8x8
.repack: repack tensor blk.25.ffn_down.weight with q4_K_8x8
.repack: repack tensor blk.25.ffn_up.weight with q4_K_8x8
.repack: repack tensor blk.26.attn_q.weight with q4_K_8x8
repack: repack tensor blk.26.attn_k.weight with q4_K_8x8
repack: repack tensor blk.26.attn_v.weight with q4_K_8x8
repack: repack tensor blk.26.attn_output.weight with q4_K_8x8
repack: repack tensor blk.26.ffn_gate.weight with q4_K_8x8
.repack: repack tensor blk.26.ffn_down.weight with q4_K_8x8
.repack: repack tensor blk.26.ffn_up.weight with q4_K_8x8
repack: repack tensor blk.27.attn_q.weight with q4_K_8x8
.repack: repack tensor blk.27.attn_k.weight with q4_K_8x8
repack: repack tensor blk.27.attn_output.weight with q4_K_8x8
repack: repack tensor blk.27.ffn_gate.weight with q4_K_8x8
.repack: repack tensor blk.27.ffn_up.weight with q4_K_8x8
repack: repack tensor blk.28.attn_q.weight with q4_K_8x8
.repack: repack tensor blk.28.attn_k.weight with q4_K_8x8
repack: repack tensor blk.28.attn_output.weight with q4_K_8x8
repack: repack tensor blk.28.ffn_gate.weight with q4_K_8x8
.repack: repack tensor blk.28.ffn_up.weight with q4_K_8x8
repack: repack tensor blk.29.attn_q.weight with q4_K_8x8
.repack: repack tensor blk.29.attn_k.weight with q4_K_8x8
repack: repack tensor blk.29.attn_output.weight with q4_K_8x8
repack: repack tensor blk.29.ffn_gate.weight with q4_K_8x8
.repack: repack tensor blk.29.ffn_up.weight with q4_K_8x8
repack: repack tensor blk.30.attn_q.weight with q4_K_8x8
.repack: repack tensor blk.30.attn_k.weight with q4_K_8x8
repack: repack tensor blk.30.attn_output.weight with q4_K_8x8
repack: repack tensor blk.30.ffn_gate.weight with q4_K_8x8
.repack: repack tensor blk.30.ffn_up.weight with q4_K_8x8
repack: repack tensor blk.31.attn_q.weight with q4_K_8x8
.repack: repack tensor blk.31.attn_k.weight with q4_K_8x8
repack: repack tensor blk.31.attn_output.weight with q4_K_8x8
repack: repack tensor blk.31.ffn_gate.weight with q4_K_8x8
.repack: repack tensor blk.31.ffn_up.weight with q4_K_8x8
...................
llama_context: constructing llama_context
llama_context: n_batch is less than GGML_KQ_MASK_PAD - increasing to 64
llama_context: n_seq_max     = 1
llama_context: n_ctx         = 2048
llama_context: n_ctx_per_seq = 2048
llama_context: n_batch       = 64
llama_context: n_ubatch      = 8
llama_context: causal_attn   = 1
llama_context: flash_attn    = 0
llama_context: kv_unified    = false
llama_context: freq_base     = 1000000.0
llama_context: freq_scale    = 1
llama_context: n_ctx_per_seq (2048) < n_ctx_train (32768) -- the full capacity of the model will not be utilized
set_abort_callback: call
llama_context:        CPU  output buffer size =     0.12 MiB
create_memory: n_ctx = 2048 (padded)
llama_kv_cache_unified: layer   0: dev = CPU
llama_kv_cache_unified: layer   1: dev = CPU
llama_kv_cache_unified: layer   2: dev = CPU
llama_kv_cache_unified: layer   3: dev = CPU
llama_kv_cache_unified: layer   4: dev = CPU
llama_kv_cache_unified: layer   5: dev = CPU
llama_kv_cache_unified: layer   6: dev = CPU
llama_kv_cache_unified: layer   7: dev = CPU
llama_kv_cache_unified: layer   8: dev = CPU
llama_kv_cache_unified: layer   9: dev = CPU
llama_kv_cache_unified: layer  10: dev = CPU
llama_kv_cache_unified: layer  11: dev = CPU
llama_kv_cache_unified: layer  12: dev = CPU
llama_kv_cache_unified: layer  13: dev = CPU
llama_kv_cache_unified: layer  14: dev = CPU
llama_kv_cache_unified: layer  15: dev = CPU
llama_kv_cache_unified: layer  16: dev = CPU
llama_kv_cache_unified: layer  17: dev = CPU
llama_kv_cache_unified: layer  18: dev = CPU
llama_kv_cache_unified: layer  19: dev = CPU
llama_kv_cache_unified: layer  20: dev = CPU
llama_kv_cache_unified: layer  21: dev = CPU
llama_kv_cache_unified: layer  22: dev = CPU
llama_kv_cache_unified: layer  23: dev = CPU
llama_kv_cache_unified: layer  24: dev = CPU
llama_kv_cache_unified: layer  25: dev = CPU
llama_kv_cache_unified: layer  26: dev = CPU
llama_kv_cache_unified: layer  27: dev = CPU
llama_kv_cache_unified: layer  28: dev = CPU
llama_kv_cache_unified: layer  29: dev = CPU
llama_kv_cache_unified: layer  30: dev = CPU
llama_kv_cache_unified: layer  31: dev = CPU
llama_kv_cache_unified:        CPU KV buffer size =   256.00 MiB
llama_kv_cache_unified: size =  256.00 MiB (  2048 cells,  32 layers,  1/1 seqs), K (f16):  128.00 MiB, V (f16):  128.00 MiB
llama_context: enumerating backends
llama_context: backend_ptrs.size() = 1
llama_context: max_nodes = 2328
llama_context: worst-case: n_tokens = 8, n_seqs = 1, n_outputs = 0
graph_reserve: reserving a graph for ubatch with n_tokens =    8, n_seqs =  1, n_outputs =    8
graph_reserve: reserving a graph for ubatch with n_tokens =    1, n_seqs =  1, n_outputs =    1
graph_reserve: reserving a graph for ubatch with n_tokens =    8, n_seqs =  1, n_outputs =    8
llama_context:        CPU compute buffer size =     3.06 MiB
llama_context: graph nodes  = 1126
llama_context: graph splits = 1
CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | LLAMAFILE = 1 | OPENMP = 1 | REPACK = 1 | 
Model metadata: {'general.name': 'mistralai_mistral-7b-instruct-v0.2', 'general.architecture': 'llama', 'llama.context_length': '32768', 'llama.rope.dimension_count': '128', 'llama.embedding_length': '4096', 'llama.block_count': '32', 'llama.feed_forward_length': '14336', 'llama.attention.head_count': '32', 'tokenizer.ggml.eos_token_id': '2', 'general.file_type': '15', 'llama.attention.head_count_kv': '8', 'llama.attention.layer_norm_rms_epsilon': '0.000010', 'llama.rope.freq_base': '1000000.000000', 'tokenizer.ggml.model': 'llama', 'general.quantization_version': '2', 'tokenizer.ggml.bos_token_id': '1', 'tokenizer.ggml.unknown_token_id': '0', 'tokenizer.ggml.padding_token_id': '0', 'tokenizer.ggml.add_bos_token': 'true', 'tokenizer.ggml.add_eos_token': 'false', 'tokenizer.chat_template': "{{ bos_token }}{% for message in messages %}{% if (message['role'] == 'user') != (loop.index0 % 2 == 0) %}{{ raise_exception('Conversation roles must alternate user/assistant/user/assistant/...') }}{% endif %}{% if message['role'] == 'user' %}{{ '[INST] ' + message['content'] + ' [/INST]' }}{% elif message['role'] == 'assistant' %}{{ message['content'] + eos_token}}{% else %}{{ raise_exception('Only user and assistant roles are supported!') }}{% endif %}{% endfor %}"}
Available chat formats from metadata: chat_template.default
Guessed chat format: mistral-instruct
Building index from SQLite database...
Loading embedding model: intfloat/e5-small-v2 on CPU
Index saved to faiss_index
LLM is explicitly disabled. Using MockLLM.
llama_model_loader: loaded meta data with 24 key-value pairs and 291 tensors from C:/Users/Prakhar Srivastava/Desktop/AskQuery/models/Mistral/mistral-7b-instruct-v0.2.Q4_K_M.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = llama
llama_model_loader: - kv   1:                               general.name str              = mistralai_mistral-7b-instruct-v0.2
llama_model_loader: - kv   2:                       llama.context_length u32              = 32768
llama_model_loader: - kv   3:                     llama.embedding_length u32              = 4096
llama_model_loader: - kv   4:                          llama.block_count u32              = 32
llama_model_loader: - kv   5:                  llama.feed_forward_length u32              = 14336
llama_model_loader: - kv   6:                 llama.rope.dimension_count u32              = 128
llama_model_loader: - kv   7:                 llama.attention.head_count u32              = 32
llama_model_loader: - kv   8:              llama.attention.head_count_kv u32              = 8
llama_model_loader: - kv   9:     llama.attention.layer_norm_rms_epsilon f32              = 0.000010
llama_model_loader: - kv  10:                       llama.rope.freq_base f32              = 1000000.000000
llama_model_loader: - kv  11:                          general.file_type u32              = 15
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,32000]   = ["<unk>", "<s>", "</s>", "<0x00>", "<...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,32000]   = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,32000]   = [2, 3, 3, 6, 6, 6, 6, 6, 6, 6, 6, 6, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 1
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 2
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 0
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% for message in mess...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - type  f32:   65 tensors
llama_model_loader: - type q4_K:  193 tensors
llama_model_loader: - type q6_K:   33 tensors
print_info: file format = GGUF V3 (latest)
print_info: file type   = Q4_K - Medium
print_info: file size   = 4.07 GiB (4.83 BPW) 
init_tokenizer: initializing tokenizer for type 1
load: control token:      2 '</s>' is not marked as EOG
load: control token:      1 '<s>' is not marked as EOG
load: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
load: printing all EOG tokens:
load:   - 2 ('</s>')
load: special tokens cache size = 3
load: token to piece cache size = 0.1637 MB
print_info: arch             = llama
print_info: vocab_only       = 0
print_info: n_ctx_train      = 32768
print_info: n_embd           = 4096
print_info: n_layer          = 32
print_info: n_head           = 32
print_info: n_head_kv        = 8
print_info: n_rot            = 128
print_info: n_swa            = 0
print_info: is_swa_any       = 0
print_info: n_embd_head_k    = 128
print_info: n_embd_head_v    = 128
print_info: n_gqa            = 4
print_info: n_embd_k_gqa     = 1024
print_info: n_embd_v_gqa     = 1024
print_info: f_norm_eps       = 0.0e+00
print_info: f_norm_rms_eps   = 1.0e-05
print_info: f_clamp_kqv      = 0.0e+00
print_info: f_max_alibi_bias = 0.0e+00
print_info: f_logit_scale    = 0.0e+00
print_info: f_attn_scale     = 0.0e+00
print_info: n_ff             = 14336
print_info: n_expert         = 0
print_info: n_expert_used    = 0
print_info: causal attn      = 1
print_info: pooling type     = 0
print_info: rope type        = 0
print_info: rope scaling     = linear
print_info: freq_base_train  = 1000000.0
print_info: freq_scale_train = 1
print_info: n_ctx_orig_yarn  = 32768
print_info: rope_finetuned   = unknown
print_info: model type       = 7B
print_info: model params     = 7.24 B
print_info: general.name     = mistralai_mistral-7b-instruct-v0.2
print_info: vocab type       = SPM
print_info: n_vocab          = 32000
print_info: n_merges         = 0
print_info: BOS token        = 1 '<s>'
print_info: EOS token        = 2 '</s>'
print_info: UNK token        = 0 '<unk>'
print_info: PAD token        = 0 '<unk>'
print_info: LF token         = 13 '<0x0A>'
print_info: EOG token        = 2 '</s>'
print_info: max token length = 48
load_tensors: loading model tensors, this can take a while... (mmap = true)
load_tensors: layer   0 assigned to device CPU, is_swa = 0
load_tensors: layer   1 assigned to device CPU, is_swa = 0
load_tensors: layer   2 assigned to device CPU, is_swa = 0
load_tensors: layer   3 assigned to device CPU, is_swa = 0
load_tensors: layer   4 assigned to device CPU, is_swa = 0
load_tensors: layer   5 assigned to device CPU, is_swa = 0
load_tensors: layer   6 assigned to device CPU, is_swa = 0
load_tensors: layer   7 assigned to device CPU, is_swa = 0
load_tensors: layer   8 assigned to device CPU, is_swa = 0
load_tensors: layer   9 assigned to device CPU, is_swa = 0
load_tensors: layer  10 assigned to device CPU, is_swa = 0
load_tensors: layer  11 assigned to device CPU, is_swa = 0
load_tensors: layer  12 assigned to device CPU, is_swa = 0
load_tensors: layer  13 assigned to device CPU, is_swa = 0
load_tensors: layer  14 assigned to device CPU, is_swa = 0
load_tensors: layer  15 assigned to device CPU, is_swa = 0
load_tensors: layer  16 assigned to device CPU, is_swa = 0
load_tensors: layer  17 assigned to device CPU, is_swa = 0
load_tensors: layer  18 assigned to device CPU, is_swa = 0
load_tensors: layer  19 assigned to device CPU, is_swa = 0
load_tensors: layer  20 assigned to device CPU, is_swa = 0
load_tensors: layer  21 assigned to device CPU, is_swa = 0
load_tensors: layer  22 assigned to device CPU, is_swa = 0
load_tensors: layer  23 assigned to device CPU, is_swa = 0
load_tensors: layer  24 assigned to device CPU, is_swa = 0
load_tensors: layer  25 assigned to device CPU, is_swa = 0
load_tensors: layer  26 assigned to device CPU, is_swa = 0
load_tensors: layer  27 assigned to device CPU, is_swa = 0
load_tensors: layer  28 assigned to device CPU, is_swa = 0
load_tensors: layer  29 assigned to device CPU, is_swa = 0
load_tensors: layer  30 assigned to device CPU, is_swa = 0
load_tensors: layer  31 assigned to device CPU, is_swa = 0
load_tensors: layer  32 assigned to device CPU, is_swa = 0
load_tensors: tensor 'token_embd.weight' (q4_K) (and 98 others) cannot be used with preferred buffer type CPU_REPACK, using CPU instead
load_tensors:   CPU_REPACK model buffer size =  3204.00 MiB
load_tensors:   CPU_Mapped model buffer size =  4165.37 MiB
repack: repack tensor blk.0.attn_q.weight with q4_K_8x8
repack: repack tensor blk.0.attn_k.weight with q4_K_8x8
repack: repack tensor blk.0.attn_output.weight with q4_K_8x8
repack: repack tensor blk.0.ffn_gate.weight with q4_K_8x8
.repack: repack tensor blk.0.ffn_up.weight with q4_K_8x8
repack: repack tensor blk.1.attn_q.weight with q4_K_8x8
.repack: repack tensor blk.1.attn_k.weight with q4_K_8x8
repack: repack tensor blk.1.attn_output.weight with q4_K_8x8
repack: repack tensor blk.1.ffn_gate.weight with q4_K_8x8
.repack: repack tensor blk.1.ffn_up.weight with q4_K_8x8
repack: repack tensor blk.2.attn_q.weight with q4_K_8x8
.repack: repack tensor blk.2.attn_k.weight with q4_K_8x8
repack: repack tensor blk.2.attn_output.weight with q4_K_8x8
repack: repack tensor blk.2.ffn_gate.weight with q4_K_8x8
.repack: repack tensor blk.2.ffn_up.weight with q4_K_8x8
repack: repack tensor blk.3.attn_q.weight with q4_K_8x8
.repack: repack tensor blk.3.attn_k.weight with q4_K_8x8
repack: repack tensor blk.3.attn_output.weight with q4_K_8x8
repack: repack tensor blk.3.ffn_gate.weight with q4_K_8x8
.repack: repack tensor blk.3.ffn_up.weight with q4_K_8x8
repack: repack tensor blk.4.attn_q.weight with q4_K_8x8
.repack: repack tensor blk.4.attn_k.weight with q4_K_8x8
repack: repack tensor blk.4.attn_v.weight with q4_K_8x8
repack: repack tensor blk.4.attn_output.weight with q4_K_8x8
repack: repack tensor blk.4.ffn_gate.weight with q4_K_8x8
.repack: repack tensor blk.4.ffn_down.weight with q4_K_8x8
.repack: repack tensor blk.4.ffn_up.weight with q4_K_8x8
repack: repack tensor blk.5.attn_q.weight with q4_K_8x8
.repack: repack tensor blk.5.attn_k.weight with q4_K_8x8
repack: repack tensor blk.5.attn_v.weight with q4_K_8x8
repack: repack tensor blk.5.attn_output.weight with q4_K_8x8
repack: repack tensor blk.5.ffn_gate.weight with q4_K_8x8
.repack: repack tensor blk.5.ffn_down.weight with q4_K_8x8
repack: repack tensor blk.5.ffn_up.weight with q4_K_8x8
.repack: repack tensor blk.6.attn_q.weight with q4_K_8x8
repack: repack tensor blk.6.attn_k.weight with q4_K_8x8
repack: repack tensor blk.6.attn_output.weight with q4_K_8x8
.repack: repack tensor blk.6.ffn_gate.weight with q4_K_8x8
repack: repack tensor blk.6.ffn_up.weight with q4_K_8x8
.repack: repack tensor blk.7.attn_q.weight with q4_K_8x8
repack: repack tensor blk.7.attn_k.weight with q4_K_8x8
repack: repack tensor blk.7.attn_v.weight with q4_K_8x8
repack: repack tensor blk.7.attn_output.weight with q4_K_8x8
.repack: repack tensor blk.7.ffn_gate.weight with q4_K_8x8
repack: repack tensor blk.7.ffn_down.weight with q4_K_8x8
.repack: repack tensor blk.7.ffn_up.weight with q4_K_8x8
.repack: repack tensor blk.8.attn_q.weight with q4_K_8x8
repack: repack tensor blk.8.attn_k.weight with q4_K_8x8
repack: repack tensor blk.8.attn_v.weight with q4_K_8x8
repack: repack tensor blk.8.attn_output.weight with q4_K_8x8
repack: repack tensor blk.8.ffn_gate.weight with q4_K_8x8
.repack: repack tensor blk.8.ffn_down.weight with q4_K_8x8
.repack: repack tensor blk.8.ffn_up.weight with q4_K_8x8
.repack: repack tensor blk.9.attn_q.weight with q4_K_8x8
repack: repack tensor blk.9.attn_k.weight with q4_K_8x8
repack: repack tensor blk.9.attn_output.weight with q4_K_8x8
repack: repack tensor blk.9.ffn_gate.weight with q4_K_8x8
.repack: repack tensor blk.9.ffn_up.weight with q4_K_8x8
.repack: repack tensor blk.10.attn_q.weight with q4_K_8x8
repack: repack tensor blk.10.attn_k.weight with q4_K_8x8
repack: repack tensor blk.10.attn_v.weight with q4_K_8x8
repack: repack tensor blk.10.attn_output.weight with q4_K_8x8
repack: repack tensor blk.10.ffn_gate.weight with q4_K_8x8
.repack: repack tensor blk.10.ffn_down.weight with q4_K_8x8
.repack: repack tensor blk.10.ffn_up.weight with q4_K_8x8
.repack: repack tensor blk.11.attn_q.weight with q4_K_8x8
repack: repack tensor blk.11.attn_k.weight with q4_K_8x8
repack: repack tensor blk.11.attn_v.weight with q4_K_8x8
repack: repack tensor blk.11.attn_output.weight with q4_K_8x8
repack: repack tensor blk.11.ffn_gate.weight with q4_K_8x8
.repack: repack tensor blk.11.ffn_down.weight with q4_K_8x8
.repack: repack tensor blk.11.ffn_up.weight with q4_K_8x8
repack: repack tensor blk.12.attn_q.weight with q4_K_8x8
.repack: repack tensor blk.12.attn_k.weight with q4_K_8x8
repack: repack tensor blk.12.attn_output.weight with q4_K_8x8
repack: repack tensor blk.12.ffn_gate.weight with q4_K_8x8
.repack: repack tensor blk.12.ffn_up.weight with q4_K_8x8
repack: repack tensor blk.13.attn_q.weight with q4_K_8x8
.repack: repack tensor blk.13.attn_k.weight with q4_K_8x8
repack: repack tensor blk.13.attn_v.weight with q4_K_8x8
repack: repack tensor blk.13.attn_output.weight with q4_K_8x8
repack: repack tensor blk.13.ffn_gate.weight with q4_K_8x8
.repack: repack tensor blk.13.ffn_down.weight with q4_K_8x8
repack: repack tensor blk.13.ffn_up.weight with q4_K_8x8
.repack: repack tensor blk.14.attn_q.weight with q4_K_8x8
repack: repack tensor blk.14.attn_k.weight with q4_K_8x8
repack: repack tensor blk.14.attn_v.weight with q4_K_8x8
repack: repack tensor blk.14.attn_output.weight with q4_K_8x8
.repack: repack tensor blk.14.ffn_gate.weight with q4_K_8x8
repack: repack tensor blk.14.ffn_down.weight with q4_K_8x8
.repack: repack tensor blk.14.ffn_up.weight with q4_K_8x8
.repack: repack tensor blk.15.attn_q.weight with q4_K_8x8
repack: repack tensor blk.15.attn_k.weight with q4_K_8x8
repack: repack tensor blk.15.attn_output.weight with q4_K_8x8
repack: repack tensor blk.15.ffn_gate.weight with q4_K_8x8
.repack: repack tensor blk.15.ffn_up.weight with q4_K_8x8
.repack: repack tensor blk.16.attn_q.weight with q4_K_8x8
repack: repack tensor blk.16.attn_k.weight with q4_K_8x8
repack: repack tensor blk.16.attn_v.weight with q4_K_8x8
repack: repack tensor blk.16.attn_output.weight with q4_K_8x8
.repack: repack tensor blk.16.ffn_gate.weight with q4_K_8x8
repack: repack tensor blk.16.ffn_down.weight with q4_K_8x8
.repack: repack tensor blk.16.ffn_up.weight with q4_K_8x8
.repack: repack tensor blk.17.attn_q.weight with q4_K_8x8
repack: repack tensor blk.17.attn_k.weight with q4_K_8x8
repack: repack tensor blk.17.attn_v.weight with q4_K_8x8
repack: repack tensor blk.17.attn_output.weight with q4_K_8x8
repack: repack tensor blk.17.ffn_gate.weight with q4_K_8x8
.repack: repack tensor blk.17.ffn_down.weight with q4_K_8x8
.repack: repack tensor blk.17.ffn_up.weight with q4_K_8x8
.repack: repack tensor blk.18.attn_q.weight with q4_K_8x8
repack: repack tensor blk.18.attn_k.weight with q4_K_8x8
repack: repack tensor blk.18.attn_output.weight with q4_K_8x8
repack: repack tensor blk.18.ffn_gate.weight with q4_K_8x8
.repack: repack tensor blk.18.ffn_up.weight with q4_K_8x8
.repack: repack tensor blk.19.attn_q.weight with q4_K_8x8
repack: repack tensor blk.19.attn_k.weight with q4_K_8x8
repack: repack tensor blk.19.attn_v.weight with q4_K_8x8
repack: repack tensor blk.19.attn_output.weight with q4_K_8x8
repack: repack tensor blk.19.ffn_gate.weight with q4_K_8x8
.repack: repack tensor blk.19.ffn_down.weight with q4_K_8x8
.repack: repack tensor blk.19.ffn_up.weight with q4_K_8x8
repack: repack tensor blk.20.attn_q.weight with q4_K_8x8
.repack: repack tensor blk.20.attn_k.weight with q4_K_8x8
repack: repack tensor blk.20.attn_v.weight with q4_K_8x8
repack: repack tensor blk.20.attn_output.weight with q4_K_8x8
repack: repack tensor blk.20.ffn_gate.weight with q4_K_8x8
.repack: repack tensor blk.20.ffn_down.weight with q4_K_8x8
repack: repack tensor blk.20.ffn_up.weight with q4_K_8x8
.repack: repack tensor blk.21.attn_q.weight with q4_K_8x8
repack: repack tensor blk.21.attn_k.weight with q4_K_8x8
repack: repack tensor blk.21.attn_output.weight with q4_K_8x8
.repack: repack tensor blk.21.ffn_gate.weight with q4_K_8x8
repack: repack tensor blk.21.ffn_up.weight with q4_K_8x8
.repack: repack tensor blk.22.attn_q.weight with q4_K_8x8
repack: repack tensor blk.22.attn_k.weight with q4_K_8x8
repack: repack tensor blk.22.attn_v.weight with q4_K_8x8
.repack: repack tensor blk.22.attn_output.weight with q4_K_8x8
repack: repack tensor blk.22.ffn_gate.weight with q4_K_8x8
repack: repack tensor blk.22.ffn_down.weight with q4_K_8x8
.repack: repack tensor blk.22.ffn_up.weight with q4_K_8x8
.repack: repack tensor blk.23.attn_q.weight with q4_K_8x8
repack: repack tensor blk.23.attn_k.weight with q4_K_8x8
repack: repack tensor blk.23.attn_v.weight with q4_K_8x8
repack: repack tensor blk.23.attn_output.weight with q4_K_8x8
.repack: repack tensor blk.23.ffn_gate.weight with q4_K_8x8
repack: repack tensor blk.23.ffn_down.weight with q4_K_8x8
.repack: repack tensor blk.23.ffn_up.weight with q4_K_8x8
.repack: repack tensor blk.24.attn_q.weight with q4_K_8x8
repack: repack tensor blk.24.attn_k.weight with q4_K_8x8
repack: repack tensor blk.24.attn_output.weight with q4_K_8x8
repack: repack tensor blk.24.ffn_gate.weight with q4_K_8x8
.repack: repack tensor blk.24.ffn_up.weight with q4_K_8x8
.repack: repack tensor blk.25.attn_q.weight with q4_K_8x8
repack: repack tensor blk.25.attn_k.weight with q4_K_8x8
repack: repack tensor blk.25.attn_v.weight with q4_K_8x8
repack: repack tensor blk.25.attn_output.weight with q4_K_8x8
repack: repack tensor blk.25.ffn_gate.weight with q4_K_8x8
.repack: repack tensor blk.25.ffn_down.weight with q4_K_8x8
.repack: repack tensor blk.25.ffn_up.weight with q4_K_8x8
.repack: repack tensor blk.26.attn_q.weight with q4_K_8x8
repack: repack tensor blk.26.attn_k.weight with q4_K_8x8
repack: repack tensor blk.26.attn_v.weight with q4_K_8x8
repack: repack tensor blk.26.attn_output.weight with q4_K_8x8
repack: repack tensor blk.26.ffn_gate.weight with q4_K_8x8
.repack: repack tensor blk.26.ffn_down.weight with q4_K_8x8
.repack: repack tensor blk.26.ffn_up.weight with q4_K_8x8
repack: repack tensor blk.27.attn_q.weight with q4_K_8x8
.repack: repack tensor blk.27.attn_k.weight with q4_K_8x8
repack: repack tensor blk.27.attn_output.weight with q4_K_8x8
repack: repack tensor blk.27.ffn_gate.weight with q4_K_8x8
.repack: repack tensor blk.27.ffn_up.weight with q4_K_8x8
repack: repack tensor blk.28.attn_q.weight with q4_K_8x8
.repack: repack tensor blk.28.attn_k.weight with q4_K_8x8
repack: repack tensor blk.28.attn_output.weight with q4_K_8x8
repack: repack tensor blk.28.ffn_gate.weight with q4_K_8x8
.repack: repack tensor blk.28.ffn_up.weight with q4_K_8x8
repack: repack tensor blk.29.attn_q.weight with q4_K_8x8
.repack: repack tensor blk.29.attn_k.weight with q4_K_8x8
repack: repack tensor blk.29.attn_output.weight with q4_K_8x8
repack: repack tensor blk.29.ffn_gate.weight with q4_K_8x8
.repack: repack tensor blk.29.ffn_up.weight with q4_K_8x8
repack: repack tensor blk.30.attn_q.weight with q4_K_8x8
.repack: repack tensor blk.30.attn_k.weight with q4_K_8x8
repack: repack tensor blk.30.attn_output.weight with q4_K_8x8
repack: repack tensor blk.30.ffn_gate.weight with q4_K_8x8
.repack: repack tensor blk.30.ffn_up.weight with q4_K_8x8
repack: repack tensor blk.31.attn_q.weight with q4_K_8x8
.repack: repack tensor blk.31.attn_k.weight with q4_K_8x8
repack: repack tensor blk.31.attn_output.weight with q4_K_8x8
repack: repack tensor blk.31.ffn_gate.weight with q4_K_8x8
.repack: repack tensor blk.31.ffn_up.weight with q4_K_8x8
...................
llama_context: constructing llama_context
llama_context: n_batch is less than GGML_KQ_MASK_PAD - increasing to 64
llama_context: n_seq_max     = 1
llama_context: n_ctx         = 2048
llama_context: n_ctx_per_seq = 2048
llama_context: n_batch       = 64
llama_context: n_ubatch      = 8
llama_context: causal_attn   = 1
llama_context: flash_attn    = 0
llama_context: kv_unified    = false
llama_context: freq_base     = 1000000.0
llama_context: freq_scale    = 1
llama_context: n_ctx_per_seq (2048) < n_ctx_train (32768) -- the full capacity of the model will not be utilized
set_abort_callback: call
llama_context:        CPU  output buffer size =     0.12 MiB
create_memory: n_ctx = 2048 (padded)
llama_kv_cache_unified: layer   0: dev = CPU
llama_kv_cache_unified: layer   1: dev = CPU
llama_kv_cache_unified: layer   2: dev = CPU
llama_kv_cache_unified: layer   3: dev = CPU
llama_kv_cache_unified: layer   4: dev = CPU
llama_kv_cache_unified: layer   5: dev = CPU
llama_kv_cache_unified: layer   6: dev = CPU
llama_kv_cache_unified: layer   7: dev = CPU
llama_kv_cache_unified: layer   8: dev = CPU
llama_kv_cache_unified: layer   9: dev = CPU
llama_kv_cache_unified: layer  10: dev = CPU
llama_kv_cache_unified: layer  11: dev = CPU
llama_kv_cache_unified: layer  12: dev = CPU
llama_kv_cache_unified: layer  13: dev = CPU
llama_kv_cache_unified: layer  14: dev = CPU
llama_kv_cache_unified: layer  15: dev = CPU
llama_kv_cache_unified: layer  16: dev = CPU
llama_kv_cache_unified: layer  17: dev = CPU
llama_kv_cache_unified: layer  18: dev = CPU
llama_kv_cache_unified: layer  19: dev = CPU
llama_kv_cache_unified: layer  20: dev = CPU
llama_kv_cache_unified: layer  21: dev = CPU
llama_kv_cache_unified: layer  22: dev = CPU
llama_kv_cache_unified: layer  23: dev = CPU
llama_kv_cache_unified: layer  24: dev = CPU
llama_kv_cache_unified: layer  25: dev = CPU
llama_kv_cache_unified: layer  26: dev = CPU
llama_kv_cache_unified: layer  27: dev = CPU
llama_kv_cache_unified: layer  28: dev = CPU
llama_kv_cache_unified: layer  29: dev = CPU
llama_kv_cache_unified: layer  30: dev = CPU
llama_kv_cache_unified: layer  31: dev = CPU
llama_kv_cache_unified:        CPU KV buffer size =   256.00 MiB
llama_kv_cache_unified: size =  256.00 MiB (  2048 cells,  32 layers,  1/1 seqs), K (f16):  128.00 MiB, V (f16):  128.00 MiB
llama_context: enumerating backends
llama_context: backend_ptrs.size() = 1
llama_context: max_nodes = 2328
llama_context: worst-case: n_tokens = 8, n_seqs = 1, n_outputs = 0
graph_reserve: reserving a graph for ubatch with n_tokens =    8, n_seqs =  1, n_outputs =    8
graph_reserve: reserving a graph for ubatch with n_tokens =    1, n_seqs =  1, n_outputs =    1
graph_reserve: reserving a graph for ubatch with n_tokens =    8, n_seqs =  1, n_outputs =    8
llama_context:        CPU compute buffer size =     3.06 MiB
llama_context: graph nodes  = 1126
llama_context: graph splits = 1
CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | LLAMAFILE = 1 | OPENMP = 1 | REPACK = 1 | 
Model metadata: {'general.name': 'mistralai_mistral-7b-instruct-v0.2', 'general.architecture': 'llama', 'llama.context_length': '32768', 'llama.rope.dimension_count': '128', 'llama.embedding_length': '4096', 'llama.block_count': '32', 'llama.feed_forward_length': '14336', 'llama.attention.head_count': '32', 'tokenizer.ggml.eos_token_id': '2', 'general.file_type': '15', 'llama.attention.head_count_kv': '8', 'llama.attention.layer_norm_rms_epsilon': '0.000010', 'llama.rope.freq_base': '1000000.000000', 'tokenizer.ggml.model': 'llama', 'general.quantization_version': '2', 'tokenizer.ggml.bos_token_id': '1', 'tokenizer.ggml.unknown_token_id': '0', 'tokenizer.ggml.padding_token_id': '0', 'tokenizer.ggml.add_bos_token': 'true', 'tokenizer.ggml.add_eos_token': 'false', 'tokenizer.chat_template': "{{ bos_token }}{% for message in messages %}{% if (message['role'] == 'user') != (loop.index0 % 2 == 0) %}{{ raise_exception('Conversation roles must alternate user/assistant/user/assistant/...') }}{% endif %}{% if message['role'] == 'user' %}{{ '[INST] ' + message['content'] + ' [/INST]' }}{% elif message['role'] == 'assistant' %}{{ message['content'] + eos_token}}{% else %}{{ raise_exception('Only user and assistant roles are supported!') }}{% endif %}{% endfor %}"}
Available chat formats from metadata: chat_template.default
Guessed chat format: mistral-instruct
Building index from SQLite database...
Loading embedding model: intfloat/e5-small-v2 on CPU
Index saved to faiss_index
llama_model_loader: loaded meta data with 24 key-value pairs and 291 tensors from C:/Users/Prakhar Srivastava/Desktop/AskQuery/models/Mistral/mistral-7b-instruct-v0.2.Q4_K_M.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = llama
llama_model_loader: - kv   1:                               general.name str              = mistralai_mistral-7b-instruct-v0.2
llama_model_loader: - kv   2:                       llama.context_length u32              = 32768
llama_model_loader: - kv   3:                     llama.embedding_length u32              = 4096
llama_model_loader: - kv   4:                          llama.block_count u32              = 32
llama_model_loader: - kv   5:                  llama.feed_forward_length u32              = 14336
llama_model_loader: - kv   6:                 llama.rope.dimension_count u32              = 128
llama_model_loader: - kv   7:                 llama.attention.head_count u32              = 32
llama_model_loader: - kv   8:              llama.attention.head_count_kv u32              = 8
llama_model_loader: - kv   9:     llama.attention.layer_norm_rms_epsilon f32              = 0.000010
llama_model_loader: - kv  10:                       llama.rope.freq_base f32              = 1000000.000000
llama_model_loader: - kv  11:                          general.file_type u32              = 15
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,32000]   = ["<unk>", "<s>", "</s>", "<0x00>", "<...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,32000]   = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,32000]   = [2, 3, 3, 6, 6, 6, 6, 6, 6, 6, 6, 6, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 1
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 2
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 0
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% for message in mess...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - type  f32:   65 tensors
llama_model_loader: - type q4_K:  193 tensors
llama_model_loader: - type q6_K:   33 tensors
print_info: file format = GGUF V3 (latest)
print_info: file type   = Q4_K - Medium
print_info: file size   = 4.07 GiB (4.83 BPW) 
init_tokenizer: initializing tokenizer for type 1
load: control token:      2 '</s>' is not marked as EOG
load: control token:      1 '<s>' is not marked as EOG
load: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
load: printing all EOG tokens:
load:   - 2 ('</s>')
load: special tokens cache size = 3
load: token to piece cache size = 0.1637 MB
print_info: arch             = llama
print_info: vocab_only       = 0
print_info: n_ctx_train      = 32768
print_info: n_embd           = 4096
print_info: n_layer          = 32
print_info: n_head           = 32
print_info: n_head_kv        = 8
print_info: n_rot            = 128
print_info: n_swa            = 0
print_info: is_swa_any       = 0
print_info: n_embd_head_k    = 128
print_info: n_embd_head_v    = 128
print_info: n_gqa            = 4
print_info: n_embd_k_gqa     = 1024
print_info: n_embd_v_gqa     = 1024
print_info: f_norm_eps       = 0.0e+00
print_info: f_norm_rms_eps   = 1.0e-05
print_info: f_clamp_kqv      = 0.0e+00
print_info: f_max_alibi_bias = 0.0e+00
print_info: f_logit_scale    = 0.0e+00
print_info: f_attn_scale     = 0.0e+00
print_info: n_ff             = 14336
print_info: n_expert         = 0
print_info: n_expert_used    = 0
print_info: causal attn      = 1
print_info: pooling type     = 0
print_info: rope type        = 0
print_info: rope scaling     = linear
print_info: freq_base_train  = 1000000.0
print_info: freq_scale_train = 1
print_info: n_ctx_orig_yarn  = 32768
print_info: rope_finetuned   = unknown
print_info: model type       = 7B
print_info: model params     = 7.24 B
print_info: general.name     = mistralai_mistral-7b-instruct-v0.2
print_info: vocab type       = SPM
print_info: n_vocab          = 32000
print_info: n_merges         = 0
print_info: BOS token        = 1 '<s>'
print_info: EOS token        = 2 '</s>'
print_info: UNK token        = 0 '<unk>'
print_info: PAD token        = 0 '<unk>'
print_info: LF token         = 13 '<0x0A>'
print_info: EOG token        = 2 '</s>'
print_info: max token length = 48
load_tensors: loading model tensors, this can take a while... (mmap = true)
load_tensors: layer   0 assigned to device CPU, is_swa = 0
load_tensors: layer   1 assigned to device CPU, is_swa = 0
load_tensors: layer   2 assigned to device CPU, is_swa = 0
load_tensors: layer   3 assigned to device CPU, is_swa = 0
load_tensors: layer   4 assigned to device CPU, is_swa = 0
load_tensors: layer   5 assigned to device CPU, is_swa = 0
load_tensors: layer   6 assigned to device CPU, is_swa = 0
load_tensors: layer   7 assigned to device CPU, is_swa = 0
load_tensors: layer   8 assigned to device CPU, is_swa = 0
load_tensors: layer   9 assigned to device CPU, is_swa = 0
load_tensors: layer  10 assigned to device CPU, is_swa = 0
load_tensors: layer  11 assigned to device CPU, is_swa = 0
load_tensors: layer  12 assigned to device CPU, is_swa = 0
load_tensors: layer  13 assigned to device CPU, is_swa = 0
load_tensors: layer  14 assigned to device CPU, is_swa = 0
load_tensors: layer  15 assigned to device CPU, is_swa = 0
load_tensors: layer  16 assigned to device CPU, is_swa = 0
load_tensors: layer  17 assigned to device CPU, is_swa = 0
load_tensors: layer  18 assigned to device CPU, is_swa = 0
load_tensors: layer  19 assigned to device CPU, is_swa = 0
load_tensors: layer  20 assigned to device CPU, is_swa = 0
load_tensors: layer  21 assigned to device CPU, is_swa = 0
load_tensors: layer  22 assigned to device CPU, is_swa = 0
load_tensors: layer  23 assigned to device CPU, is_swa = 0
load_tensors: layer  24 assigned to device CPU, is_swa = 0
load_tensors: layer  25 assigned to device CPU, is_swa = 0
load_tensors: layer  26 assigned to device CPU, is_swa = 0
load_tensors: layer  27 assigned to device CPU, is_swa = 0
load_tensors: layer  28 assigned to device CPU, is_swa = 0
load_tensors: layer  29 assigned to device CPU, is_swa = 0
load_tensors: layer  30 assigned to device CPU, is_swa = 0
load_tensors: layer  31 assigned to device CPU, is_swa = 0
load_tensors: layer  32 assigned to device CPU, is_swa = 0
load_tensors: tensor 'token_embd.weight' (q4_K) (and 98 others) cannot be used with preferred buffer type CPU_REPACK, using CPU instead
load_tensors:   CPU_REPACK model buffer size =  3204.00 MiB
load_tensors:   CPU_Mapped model buffer size =  4165.37 MiB
repack: repack tensor blk.0.attn_q.weight with q4_K_8x8
repack: repack tensor blk.0.attn_k.weight with q4_K_8x8
repack: repack tensor blk.0.attn_output.weight with q4_K_8x8
repack: repack tensor blk.0.ffn_gate.weight with q4_K_8x8
.repack: repack tensor blk.0.ffn_up.weight with q4_K_8x8
repack: repack tensor blk.1.attn_q.weight with q4_K_8x8
.repack: repack tensor blk.1.attn_k.weight with q4_K_8x8
repack: repack tensor blk.1.attn_output.weight with q4_K_8x8
repack: repack tensor blk.1.ffn_gate.weight with q4_K_8x8
.repack: repack tensor blk.1.ffn_up.weight with q4_K_8x8
repack: repack tensor blk.2.attn_q.weight with q4_K_8x8
.repack: repack tensor blk.2.attn_k.weight with q4_K_8x8
repack: repack tensor blk.2.attn_output.weight with q4_K_8x8
repack: repack tensor blk.2.ffn_gate.weight with q4_K_8x8
.repack: repack tensor blk.2.ffn_up.weight with q4_K_8x8
repack: repack tensor blk.3.attn_q.weight with q4_K_8x8
.repack: repack tensor blk.3.attn_k.weight with q4_K_8x8
repack: repack tensor blk.3.attn_output.weight with q4_K_8x8
repack: repack tensor blk.3.ffn_gate.weight with q4_K_8x8
.repack: repack tensor blk.3.ffn_up.weight with q4_K_8x8
repack: repack tensor blk.4.attn_q.weight with q4_K_8x8
.repack: repack tensor blk.4.attn_k.weight with q4_K_8x8
repack: repack tensor blk.4.attn_v.weight with q4_K_8x8
repack: repack tensor blk.4.attn_output.weight with q4_K_8x8
repack: repack tensor blk.4.ffn_gate.weight with q4_K_8x8
.repack: repack tensor blk.4.ffn_down.weight with q4_K_8x8
.repack: repack tensor blk.4.ffn_up.weight with q4_K_8x8
repack: repack tensor blk.5.attn_q.weight with q4_K_8x8
.repack: repack tensor blk.5.attn_k.weight with q4_K_8x8
repack: repack tensor blk.5.attn_v.weight with q4_K_8x8
repack: repack tensor blk.5.attn_output.weight with q4_K_8x8
repack: repack tensor blk.5.ffn_gate.weight with q4_K_8x8
.repack: repack tensor blk.5.ffn_down.weight with q4_K_8x8
repack: repack tensor blk.5.ffn_up.weight with q4_K_8x8
.repack: repack tensor blk.6.attn_q.weight with q4_K_8x8
repack: repack tensor blk.6.attn_k.weight with q4_K_8x8
repack: repack tensor blk.6.attn_output.weight with q4_K_8x8
.repack: repack tensor blk.6.ffn_gate.weight with q4_K_8x8
repack: repack tensor blk.6.ffn_up.weight with q4_K_8x8
.repack: repack tensor blk.7.attn_q.weight with q4_K_8x8
repack: repack tensor blk.7.attn_k.weight with q4_K_8x8
repack: repack tensor blk.7.attn_v.weight with q4_K_8x8
repack: repack tensor blk.7.attn_output.weight with q4_K_8x8
.repack: repack tensor blk.7.ffn_gate.weight with q4_K_8x8
repack: repack tensor blk.7.ffn_down.weight with q4_K_8x8
.repack: repack tensor blk.7.ffn_up.weight with q4_K_8x8
.repack: repack tensor blk.8.attn_q.weight with q4_K_8x8
repack: repack tensor blk.8.attn_k.weight with q4_K_8x8
repack: repack tensor blk.8.attn_v.weight with q4_K_8x8
repack: repack tensor blk.8.attn_output.weight with q4_K_8x8
repack: repack tensor blk.8.ffn_gate.weight with q4_K_8x8
.repack: repack tensor blk.8.ffn_down.weight with q4_K_8x8
.repack: repack tensor blk.8.ffn_up.weight with q4_K_8x8
.repack: repack tensor blk.9.attn_q.weight with q4_K_8x8
repack: repack tensor blk.9.attn_k.weight with q4_K_8x8
repack: repack tensor blk.9.attn_output.weight with q4_K_8x8
repack: repack tensor blk.9.ffn_gate.weight with q4_K_8x8
.repack: repack tensor blk.9.ffn_up.weight with q4_K_8x8
.repack: repack tensor blk.10.attn_q.weight with q4_K_8x8
repack: repack tensor blk.10.attn_k.weight with q4_K_8x8
repack: repack tensor blk.10.attn_v.weight with q4_K_8x8
repack: repack tensor blk.10.attn_output.weight with q4_K_8x8
repack: repack tensor blk.10.ffn_gate.weight with q4_K_8x8
.repack: repack tensor blk.10.ffn_down.weight with q4_K_8x8
.repack: repack tensor blk.10.ffn_up.weight with q4_K_8x8
.repack: repack tensor blk.11.attn_q.weight with q4_K_8x8
repack: repack tensor blk.11.attn_k.weight with q4_K_8x8
repack: repack tensor blk.11.attn_v.weight with q4_K_8x8
repack: repack tensor blk.11.attn_output.weight with q4_K_8x8
repack: repack tensor blk.11.ffn_gate.weight with q4_K_8x8
.repack: repack tensor blk.11.ffn_down.weight with q4_K_8x8
.repack: repack tensor blk.11.ffn_up.weight with q4_K_8x8
repack: repack tensor blk.12.attn_q.weight with q4_K_8x8
.repack: repack tensor blk.12.attn_k.weight with q4_K_8x8
repack: repack tensor blk.12.attn_output.weight with q4_K_8x8
repack: repack tensor blk.12.ffn_gate.weight with q4_K_8x8
.repack: repack tensor blk.12.ffn_up.weight with q4_K_8x8
repack: repack tensor blk.13.attn_q.weight with q4_K_8x8
.repack: repack tensor blk.13.attn_k.weight with q4_K_8x8
repack: repack tensor blk.13.attn_v.weight with q4_K_8x8
repack: repack tensor blk.13.attn_output.weight with q4_K_8x8
repack: repack tensor blk.13.ffn_gate.weight with q4_K_8x8
.repack: repack tensor blk.13.ffn_down.weight with q4_K_8x8
repack: repack tensor blk.13.ffn_up.weight with q4_K_8x8
.repack: repack tensor blk.14.attn_q.weight with q4_K_8x8
repack: repack tensor blk.14.attn_k.weight with q4_K_8x8
repack: repack tensor blk.14.attn_v.weight with q4_K_8x8
repack: repack tensor blk.14.attn_output.weight with q4_K_8x8
.repack: repack tensor blk.14.ffn_gate.weight with q4_K_8x8
repack: repack tensor blk.14.ffn_down.weight with q4_K_8x8
.repack: repack tensor blk.14.ffn_up.weight with q4_K_8x8
.repack: repack tensor blk.15.attn_q.weight with q4_K_8x8
repack: repack tensor blk.15.attn_k.weight with q4_K_8x8
repack: repack tensor blk.15.attn_output.weight with q4_K_8x8
repack: repack tensor blk.15.ffn_gate.weight with q4_K_8x8
.repack: repack tensor blk.15.ffn_up.weight with q4_K_8x8
.repack: repack tensor blk.16.attn_q.weight with q4_K_8x8
repack: repack tensor blk.16.attn_k.weight with q4_K_8x8
repack: repack tensor blk.16.attn_v.weight with q4_K_8x8
repack: repack tensor blk.16.attn_output.weight with q4_K_8x8
.repack: repack tensor blk.16.ffn_gate.weight with q4_K_8x8
repack: repack tensor blk.16.ffn_down.weight with q4_K_8x8
.repack: repack tensor blk.16.ffn_up.weight with q4_K_8x8
.repack: repack tensor blk.17.attn_q.weight with q4_K_8x8
repack: repack tensor blk.17.attn_k.weight with q4_K_8x8
repack: repack tensor blk.17.attn_v.weight with q4_K_8x8
repack: repack tensor blk.17.attn_output.weight with q4_K_8x8
repack: repack tensor blk.17.ffn_gate.weight with q4_K_8x8
.repack: repack tensor blk.17.ffn_down.weight with q4_K_8x8
.repack: repack tensor blk.17.ffn_up.weight with q4_K_8x8
.repack: repack tensor blk.18.attn_q.weight with q4_K_8x8
repack: repack tensor blk.18.attn_k.weight with q4_K_8x8
repack: repack tensor blk.18.attn_output.weight with q4_K_8x8
repack: repack tensor blk.18.ffn_gate.weight with q4_K_8x8
.repack: repack tensor blk.18.ffn_up.weight with q4_K_8x8
.repack: repack tensor blk.19.attn_q.weight with q4_K_8x8
repack: repack tensor blk.19.attn_k.weight with q4_K_8x8
repack: repack tensor blk.19.attn_v.weight with q4_K_8x8
repack: repack tensor blk.19.attn_output.weight with q4_K_8x8
repack: repack tensor blk.19.ffn_gate.weight with q4_K_8x8
.repack: repack tensor blk.19.ffn_down.weight with q4_K_8x8
.repack: repack tensor blk.19.ffn_up.weight with q4_K_8x8
repack: repack tensor blk.20.attn_q.weight with q4_K_8x8
.repack: repack tensor blk.20.attn_k.weight with q4_K_8x8
repack: repack tensor blk.20.attn_v.weight with q4_K_8x8
repack: repack tensor blk.20.attn_output.weight with q4_K_8x8
repack: repack tensor blk.20.ffn_gate.weight with q4_K_8x8
.repack: repack tensor blk.20.ffn_down.weight with q4_K_8x8
repack: repack tensor blk.20.ffn_up.weight with q4_K_8x8
.repack: repack tensor blk.21.attn_q.weight with q4_K_8x8
repack: repack tensor blk.21.attn_k.weight with q4_K_8x8
repack: repack tensor blk.21.attn_output.weight with q4_K_8x8
.repack: repack tensor blk.21.ffn_gate.weight with q4_K_8x8
repack: repack tensor blk.21.ffn_up.weight with q4_K_8x8
.repack: repack tensor blk.22.attn_q.weight with q4_K_8x8
repack: repack tensor blk.22.attn_k.weight with q4_K_8x8
repack: repack tensor blk.22.attn_v.weight with q4_K_8x8
.repack: repack tensor blk.22.attn_output.weight with q4_K_8x8
repack: repack tensor blk.22.ffn_gate.weight with q4_K_8x8
repack: repack tensor blk.22.ffn_down.weight with q4_K_8x8
.repack: repack tensor blk.22.ffn_up.weight with q4_K_8x8
.repack: repack tensor blk.23.attn_q.weight with q4_K_8x8
repack: repack tensor blk.23.attn_k.weight with q4_K_8x8
repack: repack tensor blk.23.attn_v.weight with q4_K_8x8
repack: repack tensor blk.23.attn_output.weight with q4_K_8x8
.repack: repack tensor blk.23.ffn_gate.weight with q4_K_8x8
repack: repack tensor blk.23.ffn_down.weight with q4_K_8x8
.repack: repack tensor blk.23.ffn_up.weight with q4_K_8x8
.repack: repack tensor blk.24.attn_q.weight with q4_K_8x8
repack: repack tensor blk.24.attn_k.weight with q4_K_8x8
repack: repack tensor blk.24.attn_output.weight with q4_K_8x8
repack: repack tensor blk.24.ffn_gate.weight with q4_K_8x8
.repack: repack tensor blk.24.ffn_up.weight with q4_K_8x8
.repack: repack tensor blk.25.attn_q.weight with q4_K_8x8
repack: repack tensor blk.25.attn_k.weight with q4_K_8x8
repack: repack tensor blk.25.attn_v.weight with q4_K_8x8
repack: repack tensor blk.25.attn_output.weight with q4_K_8x8
repack: repack tensor blk.25.ffn_gate.weight with q4_K_8x8
.repack: repack tensor blk.25.ffn_down.weight with q4_K_8x8
.repack: repack tensor blk.25.ffn_up.weight with q4_K_8x8
.repack: repack tensor blk.26.attn_q.weight with q4_K_8x8
repack: repack tensor blk.26.attn_k.weight with q4_K_8x8
repack: repack tensor blk.26.attn_v.weight with q4_K_8x8
repack: repack tensor blk.26.attn_output.weight with q4_K_8x8
repack: repack tensor blk.26.ffn_gate.weight with q4_K_8x8
.repack: repack tensor blk.26.ffn_down.weight with q4_K_8x8
.repack: repack tensor blk.26.ffn_up.weight with q4_K_8x8
repack: repack tensor blk.27.attn_q.weight with q4_K_8x8
.repack: repack tensor blk.27.attn_k.weight with q4_K_8x8
repack: repack tensor blk.27.attn_output.weight with q4_K_8x8
repack: repack tensor blk.27.ffn_gate.weight with q4_K_8x8
.repack: repack tensor blk.27.ffn_up.weight with q4_K_8x8
repack: repack tensor blk.28.attn_q.weight with q4_K_8x8
.repack: repack tensor blk.28.attn_k.weight with q4_K_8x8
repack: repack tensor blk.28.attn_output.weight with q4_K_8x8
repack: repack tensor blk.28.ffn_gate.weight with q4_K_8x8
.repack: repack tensor blk.28.ffn_up.weight with q4_K_8x8
repack: repack tensor blk.29.attn_q.weight with q4_K_8x8
.repack: repack tensor blk.29.attn_k.weight with q4_K_8x8
repack: repack tensor blk.29.attn_output.weight with q4_K_8x8
repack: repack tensor blk.29.ffn_gate.weight with q4_K_8x8
.repack: repack tensor blk.29.ffn_up.weight with q4_K_8x8
repack: repack tensor blk.30.attn_q.weight with q4_K_8x8
.repack: repack tensor blk.30.attn_k.weight with q4_K_8x8
repack: repack tensor blk.30.attn_output.weight with q4_K_8x8
repack: repack tensor blk.30.ffn_gate.weight with q4_K_8x8
.repack: repack tensor blk.30.ffn_up.weight with q4_K_8x8
repack: repack tensor blk.31.attn_q.weight with q4_K_8x8
.repack: repack tensor blk.31.attn_k.weight with q4_K_8x8
repack: repack tensor blk.31.attn_output.weight with q4_K_8x8
repack: repack tensor blk.31.ffn_gate.weight with q4_K_8x8
.repack: repack tensor blk.31.ffn_up.weight with q4_K_8x8
...................
llama_context: constructing llama_context
llama_context: n_batch is less than GGML_KQ_MASK_PAD - increasing to 64
llama_context: n_seq_max     = 1
llama_context: n_ctx         = 2048
llama_context: n_ctx_per_seq = 2048
llama_context: n_batch       = 64
llama_context: n_ubatch      = 8
llama_context: causal_attn   = 1
llama_context: flash_attn    = 0
llama_context: kv_unified    = false
llama_context: freq_base     = 1000000.0
llama_context: freq_scale    = 1
llama_context: n_ctx_per_seq (2048) < n_ctx_train (32768) -- the full capacity of the model will not be utilized
set_abort_callback: call
llama_context:        CPU  output buffer size =     0.12 MiB
create_memory: n_ctx = 2048 (padded)
llama_kv_cache_unified: layer   0: dev = CPU
llama_kv_cache_unified: layer   1: dev = CPU
llama_kv_cache_unified: layer   2: dev = CPU
llama_kv_cache_unified: layer   3: dev = CPU
llama_kv_cache_unified: layer   4: dev = CPU
llama_kv_cache_unified: layer   5: dev = CPU
llama_kv_cache_unified: layer   6: dev = CPU
llama_kv_cache_unified: layer   7: dev = CPU
llama_kv_cache_unified: layer   8: dev = CPU
llama_kv_cache_unified: layer   9: dev = CPU
llama_kv_cache_unified: layer  10: dev = CPU
llama_kv_cache_unified: layer  11: dev = CPU
llama_kv_cache_unified: layer  12: dev = CPU
llama_kv_cache_unified: layer  13: dev = CPU
llama_kv_cache_unified: layer  14: dev = CPU
llama_kv_cache_unified: layer  15: dev = CPU
llama_kv_cache_unified: layer  16: dev = CPU
llama_kv_cache_unified: layer  17: dev = CPU
llama_kv_cache_unified: layer  18: dev = CPU
llama_kv_cache_unified: layer  19: dev = CPU
llama_kv_cache_unified: layer  20: dev = CPU
llama_kv_cache_unified: layer  21: dev = CPU
llama_kv_cache_unified: layer  22: dev = CPU
llama_kv_cache_unified: layer  23: dev = CPU
llama_kv_cache_unified: layer  24: dev = CPU
llama_kv_cache_unified: layer  25: dev = CPU
llama_kv_cache_unified: layer  26: dev = CPU
llama_kv_cache_unified: layer  27: dev = CPU
llama_kv_cache_unified: layer  28: dev = CPU
llama_kv_cache_unified: layer  29: dev = CPU
llama_kv_cache_unified: layer  30: dev = CPU
llama_kv_cache_unified: layer  31: dev = CPU
llama_kv_cache_unified:        CPU KV buffer size =   256.00 MiB
llama_kv_cache_unified: size =  256.00 MiB (  2048 cells,  32 layers,  1/1 seqs), K (f16):  128.00 MiB, V (f16):  128.00 MiB
llama_context: enumerating backends
llama_context: backend_ptrs.size() = 1
llama_context: max_nodes = 2328
llama_context: worst-case: n_tokens = 8, n_seqs = 1, n_outputs = 0
graph_reserve: reserving a graph for ubatch with n_tokens =    8, n_seqs =  1, n_outputs =    8
graph_reserve: reserving a graph for ubatch with n_tokens =    1, n_seqs =  1, n_outputs =    1
graph_reserve: reserving a graph for ubatch with n_tokens =    8, n_seqs =  1, n_outputs =    8
llama_context:        CPU compute buffer size =     3.06 MiB
llama_context: graph nodes  = 1126
llama_context: graph splits = 1
CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | LLAMAFILE = 1 | OPENMP = 1 | REPACK = 1 | 
Model metadata: {'general.name': 'mistralai_mistral-7b-instruct-v0.2', 'general.architecture': 'llama', 'llama.context_length': '32768', 'llama.rope.dimension_count': '128', 'llama.embedding_length': '4096', 'llama.block_count': '32', 'llama.feed_forward_length': '14336', 'llama.attention.head_count': '32', 'tokenizer.ggml.eos_token_id': '2', 'general.file_type': '15', 'llama.attention.head_count_kv': '8', 'llama.attention.layer_norm_rms_epsilon': '0.000010', 'llama.rope.freq_base': '1000000.000000', 'tokenizer.ggml.model': 'llama', 'general.quantization_version': '2', 'tokenizer.ggml.bos_token_id': '1', 'tokenizer.ggml.unknown_token_id': '0', 'tokenizer.ggml.padding_token_id': '0', 'tokenizer.ggml.add_bos_token': 'true', 'tokenizer.ggml.add_eos_token': 'false', 'tokenizer.chat_template': "{{ bos_token }}{% for message in messages %}{% if (message['role'] == 'user') != (loop.index0 % 2 == 0) %}{{ raise_exception('Conversation roles must alternate user/assistant/user/assistant/...') }}{% endif %}{% if message['role'] == 'user' %}{{ '[INST] ' + message['content'] + ' [/INST]' }}{% elif message['role'] == 'assistant' %}{{ message['content'] + eos_token}}{% else %}{{ raise_exception('Only user and assistant roles are supported!') }}{% endif %}{% endfor %}"}
Available chat formats from metadata: chat_template.default
Guessed chat format: mistral-instruct
Building index from SQLite database...
Loading embedding model: intfloat/e5-small-v2 on CPU
Index saved to faiss_index
llama_perf_context_print:        load time =  308994.25 ms
llama_perf_context_print: prompt eval time =  308989.98 ms /   405 tokens (  762.94 ms per token,     1.31 tokens per second)
llama_perf_context_print:        eval time =   22501.46 ms /    25 runs   (  900.06 ms per token,     1.11 tokens per second)
llama_perf_context_print:       total time =  331538.48 ms /   430 tokens
llama_perf_context_print:    graphs reused =         60
LLM is explicitly disabled. Using MockLLM.
llama_model_loader: loaded meta data with 24 key-value pairs and 291 tensors from C:/Users/Prakhar Srivastava/Desktop/AskQuery/models/Mistral/mistral-7b-instruct-v0.2.Q4_K_M.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = llama
llama_model_loader: - kv   1:                               general.name str              = mistralai_mistral-7b-instruct-v0.2
llama_model_loader: - kv   2:                       llama.context_length u32              = 32768
llama_model_loader: - kv   3:                     llama.embedding_length u32              = 4096
llama_model_loader: - kv   4:                          llama.block_count u32              = 32
llama_model_loader: - kv   5:                  llama.feed_forward_length u32              = 14336
llama_model_loader: - kv   6:                 llama.rope.dimension_count u32              = 128
llama_model_loader: - kv   7:                 llama.attention.head_count u32              = 32
llama_model_loader: - kv   8:              llama.attention.head_count_kv u32              = 8
llama_model_loader: - kv   9:     llama.attention.layer_norm_rms_epsilon f32              = 0.000010
llama_model_loader: - kv  10:                       llama.rope.freq_base f32              = 1000000.000000
llama_model_loader: - kv  11:                          general.file_type u32              = 15
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,32000]   = ["<unk>", "<s>", "</s>", "<0x00>", "<...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,32000]   = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,32000]   = [2, 3, 3, 6, 6, 6, 6, 6, 6, 6, 6, 6, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 1
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 2
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 0
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% for message in mess...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - type  f32:   65 tensors
llama_model_loader: - type q4_K:  193 tensors
llama_model_loader: - type q6_K:   33 tensors
print_info: file format = GGUF V3 (latest)
print_info: file type   = Q4_K - Medium
print_info: file size   = 4.07 GiB (4.83 BPW) 
init_tokenizer: initializing tokenizer for type 1
load: control token:      2 '</s>' is not marked as EOG
load: control token:      1 '<s>' is not marked as EOG
load: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
load: printing all EOG tokens:
load:   - 2 ('</s>')
load: special tokens cache size = 3
load: token to piece cache size = 0.1637 MB
print_info: arch             = llama
print_info: vocab_only       = 0
print_info: n_ctx_train      = 32768
print_info: n_embd           = 4096
print_info: n_layer          = 32
print_info: n_head           = 32
print_info: n_head_kv        = 8
print_info: n_rot            = 128
print_info: n_swa            = 0
print_info: is_swa_any       = 0
print_info: n_embd_head_k    = 128
print_info: n_embd_head_v    = 128
print_info: n_gqa            = 4
print_info: n_embd_k_gqa     = 1024
print_info: n_embd_v_gqa     = 1024
print_info: f_norm_eps       = 0.0e+00
print_info: f_norm_rms_eps   = 1.0e-05
print_info: f_clamp_kqv      = 0.0e+00
print_info: f_max_alibi_bias = 0.0e+00
print_info: f_logit_scale    = 0.0e+00
print_info: f_attn_scale     = 0.0e+00
print_info: n_ff             = 14336
print_info: n_expert         = 0
print_info: n_expert_used    = 0
print_info: causal attn      = 1
print_info: pooling type     = 0
print_info: rope type        = 0
print_info: rope scaling     = linear
print_info: freq_base_train  = 1000000.0
print_info: freq_scale_train = 1
print_info: n_ctx_orig_yarn  = 32768
print_info: rope_finetuned   = unknown
print_info: model type       = 7B
print_info: model params     = 7.24 B
print_info: general.name     = mistralai_mistral-7b-instruct-v0.2
print_info: vocab type       = SPM
print_info: n_vocab          = 32000
print_info: n_merges         = 0
print_info: BOS token        = 1 '<s>'
print_info: EOS token        = 2 '</s>'
print_info: UNK token        = 0 '<unk>'
print_info: PAD token        = 0 '<unk>'
print_info: LF token         = 13 '<0x0A>'
print_info: EOG token        = 2 '</s>'
print_info: max token length = 48
load_tensors: loading model tensors, this can take a while... (mmap = true)
load_tensors: layer   0 assigned to device CPU, is_swa = 0
load_tensors: layer   1 assigned to device CPU, is_swa = 0
load_tensors: layer   2 assigned to device CPU, is_swa = 0
load_tensors: layer   3 assigned to device CPU, is_swa = 0
load_tensors: layer   4 assigned to device CPU, is_swa = 0
load_tensors: layer   5 assigned to device CPU, is_swa = 0
load_tensors: layer   6 assigned to device CPU, is_swa = 0
load_tensors: layer   7 assigned to device CPU, is_swa = 0
load_tensors: layer   8 assigned to device CPU, is_swa = 0
load_tensors: layer   9 assigned to device CPU, is_swa = 0
load_tensors: layer  10 assigned to device CPU, is_swa = 0
load_tensors: layer  11 assigned to device CPU, is_swa = 0
load_tensors: layer  12 assigned to device CPU, is_swa = 0
load_tensors: layer  13 assigned to device CPU, is_swa = 0
load_tensors: layer  14 assigned to device CPU, is_swa = 0
load_tensors: layer  15 assigned to device CPU, is_swa = 0
load_tensors: layer  16 assigned to device CPU, is_swa = 0
load_tensors: layer  17 assigned to device CPU, is_swa = 0
load_tensors: layer  18 assigned to device CPU, is_swa = 0
load_tensors: layer  19 assigned to device CPU, is_swa = 0
load_tensors: layer  20 assigned to device CPU, is_swa = 0
load_tensors: layer  21 assigned to device CPU, is_swa = 0
load_tensors: layer  22 assigned to device CPU, is_swa = 0
load_tensors: layer  23 assigned to device CPU, is_swa = 0
load_tensors: layer  24 assigned to device CPU, is_swa = 0
load_tensors: layer  25 assigned to device CPU, is_swa = 0
load_tensors: layer  26 assigned to device CPU, is_swa = 0
load_tensors: layer  27 assigned to device CPU, is_swa = 0
load_tensors: layer  28 assigned to device CPU, is_swa = 0
load_tensors: layer  29 assigned to device CPU, is_swa = 0
load_tensors: layer  30 assigned to device CPU, is_swa = 0
load_tensors: layer  31 assigned to device CPU, is_swa = 0
load_tensors: layer  32 assigned to device CPU, is_swa = 0
load_tensors: tensor 'token_embd.weight' (q4_K) (and 98 others) cannot be used with preferred buffer type CPU_REPACK, using CPU instead
load_tensors:   CPU_REPACK model buffer size =  3204.00 MiB
load_tensors:   CPU_Mapped model buffer size =  4165.37 MiB
repack: repack tensor blk.0.attn_q.weight with q4_K_8x8
repack: repack tensor blk.0.attn_k.weight with q4_K_8x8
repack: repack tensor blk.0.attn_output.weight with q4_K_8x8
repack: repack tensor blk.0.ffn_gate.weight with q4_K_8x8
.repack: repack tensor blk.0.ffn_up.weight with q4_K_8x8
repack: repack tensor blk.1.attn_q.weight with q4_K_8x8
.repack: repack tensor blk.1.attn_k.weight with q4_K_8x8
repack: repack tensor blk.1.attn_output.weight with q4_K_8x8
repack: repack tensor blk.1.ffn_gate.weight with q4_K_8x8
.repack: repack tensor blk.1.ffn_up.weight with q4_K_8x8
repack: repack tensor blk.2.attn_q.weight with q4_K_8x8
.repack: repack tensor blk.2.attn_k.weight with q4_K_8x8
repack: repack tensor blk.2.attn_output.weight with q4_K_8x8
repack: repack tensor blk.2.ffn_gate.weight with q4_K_8x8
.repack: repack tensor blk.2.ffn_up.weight with q4_K_8x8
repack: repack tensor blk.3.attn_q.weight with q4_K_8x8
.repack: repack tensor blk.3.attn_k.weight with q4_K_8x8
repack: repack tensor blk.3.attn_output.weight with q4_K_8x8
repack: repack tensor blk.3.ffn_gate.weight with q4_K_8x8
.repack: repack tensor blk.3.ffn_up.weight with q4_K_8x8
repack: repack tensor blk.4.attn_q.weight with q4_K_8x8
.repack: repack tensor blk.4.attn_k.weight with q4_K_8x8
repack: repack tensor blk.4.attn_v.weight with q4_K_8x8
repack: repack tensor blk.4.attn_output.weight with q4_K_8x8
repack: repack tensor blk.4.ffn_gate.weight with q4_K_8x8
.repack: repack tensor blk.4.ffn_down.weight with q4_K_8x8
.repack: repack tensor blk.4.ffn_up.weight with q4_K_8x8
repack: repack tensor blk.5.attn_q.weight with q4_K_8x8
.repack: repack tensor blk.5.attn_k.weight with q4_K_8x8
repack: repack tensor blk.5.attn_v.weight with q4_K_8x8
repack: repack tensor blk.5.attn_output.weight with q4_K_8x8
repack: repack tensor blk.5.ffn_gate.weight with q4_K_8x8
.repack: repack tensor blk.5.ffn_down.weight with q4_K_8x8
repack: repack tensor blk.5.ffn_up.weight with q4_K_8x8
.repack: repack tensor blk.6.attn_q.weight with q4_K_8x8
repack: repack tensor blk.6.attn_k.weight with q4_K_8x8
repack: repack tensor blk.6.attn_output.weight with q4_K_8x8
.repack: repack tensor blk.6.ffn_gate.weight with q4_K_8x8
repack: repack tensor blk.6.ffn_up.weight with q4_K_8x8
.repack: repack tensor blk.7.attn_q.weight with q4_K_8x8
repack: repack tensor blk.7.attn_k.weight with q4_K_8x8
repack: repack tensor blk.7.attn_v.weight with q4_K_8x8
repack: repack tensor blk.7.attn_output.weight with q4_K_8x8
.repack: repack tensor blk.7.ffn_gate.weight with q4_K_8x8
repack: repack tensor blk.7.ffn_down.weight with q4_K_8x8
.repack: repack tensor blk.7.ffn_up.weight with q4_K_8x8
.repack: repack tensor blk.8.attn_q.weight with q4_K_8x8
repack: repack tensor blk.8.attn_k.weight with q4_K_8x8
repack: repack tensor blk.8.attn_v.weight with q4_K_8x8
repack: repack tensor blk.8.attn_output.weight with q4_K_8x8
repack: repack tensor blk.8.ffn_gate.weight with q4_K_8x8
.repack: repack tensor blk.8.ffn_down.weight with q4_K_8x8
.repack: repack tensor blk.8.ffn_up.weight with q4_K_8x8
.repack: repack tensor blk.9.attn_q.weight with q4_K_8x8
repack: repack tensor blk.9.attn_k.weight with q4_K_8x8
repack: repack tensor blk.9.attn_output.weight with q4_K_8x8
repack: repack tensor blk.9.ffn_gate.weight with q4_K_8x8
.repack: repack tensor blk.9.ffn_up.weight with q4_K_8x8
.repack: repack tensor blk.10.attn_q.weight with q4_K_8x8
repack: repack tensor blk.10.attn_k.weight with q4_K_8x8
repack: repack tensor blk.10.attn_v.weight with q4_K_8x8
repack: repack tensor blk.10.attn_output.weight with q4_K_8x8
repack: repack tensor blk.10.ffn_gate.weight with q4_K_8x8
.repack: repack tensor blk.10.ffn_down.weight with q4_K_8x8
.repack: repack tensor blk.10.ffn_up.weight with q4_K_8x8
.repack: repack tensor blk.11.attn_q.weight with q4_K_8x8
repack: repack tensor blk.11.attn_k.weight with q4_K_8x8
repack: repack tensor blk.11.attn_v.weight with q4_K_8x8
repack: repack tensor blk.11.attn_output.weight with q4_K_8x8
repack: repack tensor blk.11.ffn_gate.weight with q4_K_8x8
.repack: repack tensor blk.11.ffn_down.weight with q4_K_8x8
.repack: repack tensor blk.11.ffn_up.weight with q4_K_8x8
repack: repack tensor blk.12.attn_q.weight with q4_K_8x8
.repack: repack tensor blk.12.attn_k.weight with q4_K_8x8
repack: repack tensor blk.12.attn_output.weight with q4_K_8x8
repack: repack tensor blk.12.ffn_gate.weight with q4_K_8x8
.repack: repack tensor blk.12.ffn_up.weight with q4_K_8x8
repack: repack tensor blk.13.attn_q.weight with q4_K_8x8
.repack: repack tensor blk.13.attn_k.weight with q4_K_8x8
repack: repack tensor blk.13.attn_v.weight with q4_K_8x8
repack: repack tensor blk.13.attn_output.weight with q4_K_8x8
repack: repack tensor blk.13.ffn_gate.weight with q4_K_8x8
.repack: repack tensor blk.13.ffn_down.weight with q4_K_8x8
repack: repack tensor blk.13.ffn_up.weight with q4_K_8x8
.repack: repack tensor blk.14.attn_q.weight with q4_K_8x8
repack: repack tensor blk.14.attn_k.weight with q4_K_8x8
repack: repack tensor blk.14.attn_v.weight with q4_K_8x8
repack: repack tensor blk.14.attn_output.weight with q4_K_8x8
.repack: repack tensor blk.14.ffn_gate.weight with q4_K_8x8
repack: repack tensor blk.14.ffn_down.weight with q4_K_8x8
.repack: repack tensor blk.14.ffn_up.weight with q4_K_8x8
.repack: repack tensor blk.15.attn_q.weight with q4_K_8x8
repack: repack tensor blk.15.attn_k.weight with q4_K_8x8
repack: repack tensor blk.15.attn_output.weight with q4_K_8x8
repack: repack tensor blk.15.ffn_gate.weight with q4_K_8x8
.repack: repack tensor blk.15.ffn_up.weight with q4_K_8x8
.repack: repack tensor blk.16.attn_q.weight with q4_K_8x8
repack: repack tensor blk.16.attn_k.weight with q4_K_8x8
repack: repack tensor blk.16.attn_v.weight with q4_K_8x8
repack: repack tensor blk.16.attn_output.weight with q4_K_8x8
.repack: repack tensor blk.16.ffn_gate.weight with q4_K_8x8
repack: repack tensor blk.16.ffn_down.weight with q4_K_8x8
.repack: repack tensor blk.16.ffn_up.weight with q4_K_8x8
.repack: repack tensor blk.17.attn_q.weight with q4_K_8x8
repack: repack tensor blk.17.attn_k.weight with q4_K_8x8
repack: repack tensor blk.17.attn_v.weight with q4_K_8x8
repack: repack tensor blk.17.attn_output.weight with q4_K_8x8
repack: repack tensor blk.17.ffn_gate.weight with q4_K_8x8
.repack: repack tensor blk.17.ffn_down.weight with q4_K_8x8
.repack: repack tensor blk.17.ffn_up.weight with q4_K_8x8
.repack: repack tensor blk.18.attn_q.weight with q4_K_8x8
repack: repack tensor blk.18.attn_k.weight with q4_K_8x8
repack: repack tensor blk.18.attn_output.weight with q4_K_8x8
repack: repack tensor blk.18.ffn_gate.weight with q4_K_8x8
.repack: repack tensor blk.18.ffn_up.weight with q4_K_8x8
.repack: repack tensor blk.19.attn_q.weight with q4_K_8x8
repack: repack tensor blk.19.attn_k.weight with q4_K_8x8
repack: repack tensor blk.19.attn_v.weight with q4_K_8x8
repack: repack tensor blk.19.attn_output.weight with q4_K_8x8
repack: repack tensor blk.19.ffn_gate.weight with q4_K_8x8
.repack: repack tensor blk.19.ffn_down.weight with q4_K_8x8
.repack: repack tensor blk.19.ffn_up.weight with q4_K_8x8
repack: repack tensor blk.20.attn_q.weight with q4_K_8x8
.repack: repack tensor blk.20.attn_k.weight with q4_K_8x8
repack: repack tensor blk.20.attn_v.weight with q4_K_8x8
repack: repack tensor blk.20.attn_output.weight with q4_K_8x8
repack: repack tensor blk.20.ffn_gate.weight with q4_K_8x8
.repack: repack tensor blk.20.ffn_down.weight with q4_K_8x8
repack: repack tensor blk.20.ffn_up.weight with q4_K_8x8
.repack: repack tensor blk.21.attn_q.weight with q4_K_8x8
repack: repack tensor blk.21.attn_k.weight with q4_K_8x8
repack: repack tensor blk.21.attn_output.weight with q4_K_8x8
.repack: repack tensor blk.21.ffn_gate.weight with q4_K_8x8
repack: repack tensor blk.21.ffn_up.weight with q4_K_8x8
.repack: repack tensor blk.22.attn_q.weight with q4_K_8x8
repack: repack tensor blk.22.attn_k.weight with q4_K_8x8
repack: repack tensor blk.22.attn_v.weight with q4_K_8x8
.repack: repack tensor blk.22.attn_output.weight with q4_K_8x8
repack: repack tensor blk.22.ffn_gate.weight with q4_K_8x8
repack: repack tensor blk.22.ffn_down.weight with q4_K_8x8
.repack: repack tensor blk.22.ffn_up.weight with q4_K_8x8
.repack: repack tensor blk.23.attn_q.weight with q4_K_8x8
repack: repack tensor blk.23.attn_k.weight with q4_K_8x8
repack: repack tensor blk.23.attn_v.weight with q4_K_8x8
repack: repack tensor blk.23.attn_output.weight with q4_K_8x8
.repack: repack tensor blk.23.ffn_gate.weight with q4_K_8x8
repack: repack tensor blk.23.ffn_down.weight with q4_K_8x8
.repack: repack tensor blk.23.ffn_up.weight with q4_K_8x8
.repack: repack tensor blk.24.attn_q.weight with q4_K_8x8
repack: repack tensor blk.24.attn_k.weight with q4_K_8x8
repack: repack tensor blk.24.attn_output.weight with q4_K_8x8
repack: repack tensor blk.24.ffn_gate.weight with q4_K_8x8
.repack: repack tensor blk.24.ffn_up.weight with q4_K_8x8
.repack: repack tensor blk.25.attn_q.weight with q4_K_8x8
repack: repack tensor blk.25.attn_k.weight with q4_K_8x8
repack: repack tensor blk.25.attn_v.weight with q4_K_8x8
repack: repack tensor blk.25.attn_output.weight with q4_K_8x8
repack: repack tensor blk.25.ffn_gate.weight with q4_K_8x8
.repack: repack tensor blk.25.ffn_down.weight with q4_K_8x8
.repack: repack tensor blk.25.ffn_up.weight with q4_K_8x8
.repack: repack tensor blk.26.attn_q.weight with q4_K_8x8
repack: repack tensor blk.26.attn_k.weight with q4_K_8x8
repack: repack tensor blk.26.attn_v.weight with q4_K_8x8
repack: repack tensor blk.26.attn_output.weight with q4_K_8x8
repack: repack tensor blk.26.ffn_gate.weight with q4_K_8x8
.repack: repack tensor blk.26.ffn_down.weight with q4_K_8x8
.repack: repack tensor blk.26.ffn_up.weight with q4_K_8x8
repack: repack tensor blk.27.attn_q.weight with q4_K_8x8
.repack: repack tensor blk.27.attn_k.weight with q4_K_8x8
repack: repack tensor blk.27.attn_output.weight with q4_K_8x8
repack: repack tensor blk.27.ffn_gate.weight with q4_K_8x8
.repack: repack tensor blk.27.ffn_up.weight with q4_K_8x8
repack: repack tensor blk.28.attn_q.weight with q4_K_8x8
.repack: repack tensor blk.28.attn_k.weight with q4_K_8x8
repack: repack tensor blk.28.attn_output.weight with q4_K_8x8
repack: repack tensor blk.28.ffn_gate.weight with q4_K_8x8
.repack: repack tensor blk.28.ffn_up.weight with q4_K_8x8
repack: repack tensor blk.29.attn_q.weight with q4_K_8x8
.repack: repack tensor blk.29.attn_k.weight with q4_K_8x8
repack: repack tensor blk.29.attn_output.weight with q4_K_8x8
repack: repack tensor blk.29.ffn_gate.weight with q4_K_8x8
.repack: repack tensor blk.29.ffn_up.weight with q4_K_8x8
repack: repack tensor blk.30.attn_q.weight with q4_K_8x8
.repack: repack tensor blk.30.attn_k.weight with q4_K_8x8
repack: repack tensor blk.30.attn_output.weight with q4_K_8x8
repack: repack tensor blk.30.ffn_gate.weight with q4_K_8x8
.repack: repack tensor blk.30.ffn_up.weight with q4_K_8x8
repack: repack tensor blk.31.attn_q.weight with q4_K_8x8
.repack: repack tensor blk.31.attn_k.weight with q4_K_8x8
repack: repack tensor blk.31.attn_output.weight with q4_K_8x8
repack: repack tensor blk.31.ffn_gate.weight with q4_K_8x8
.repack: repack tensor blk.31.ffn_up.weight with q4_K_8x8
...................
llama_context: constructing llama_context
llama_context: n_batch is less than GGML_KQ_MASK_PAD - increasing to 64
llama_context: n_seq_max     = 1
llama_context: n_ctx         = 2048
llama_context: n_ctx_per_seq = 2048
llama_context: n_batch       = 64
llama_context: n_ubatch      = 8
llama_context: causal_attn   = 1
llama_context: flash_attn    = 0
llama_context: kv_unified    = false
llama_context: freq_base     = 1000000.0
llama_context: freq_scale    = 1
llama_context: n_ctx_per_seq (2048) < n_ctx_train (32768) -- the full capacity of the model will not be utilized
set_abort_callback: call
llama_context:        CPU  output buffer size =     0.12 MiB
create_memory: n_ctx = 2048 (padded)
llama_kv_cache_unified: layer   0: dev = CPU
llama_kv_cache_unified: layer   1: dev = CPU
llama_kv_cache_unified: layer   2: dev = CPU
llama_kv_cache_unified: layer   3: dev = CPU
llama_kv_cache_unified: layer   4: dev = CPU
llama_kv_cache_unified: layer   5: dev = CPU
llama_kv_cache_unified: layer   6: dev = CPU
llama_kv_cache_unified: layer   7: dev = CPU
llama_kv_cache_unified: layer   8: dev = CPU
llama_kv_cache_unified: layer   9: dev = CPU
llama_kv_cache_unified: layer  10: dev = CPU
llama_kv_cache_unified: layer  11: dev = CPU
llama_kv_cache_unified: layer  12: dev = CPU
llama_kv_cache_unified: layer  13: dev = CPU
llama_kv_cache_unified: layer  14: dev = CPU
llama_kv_cache_unified: layer  15: dev = CPU
llama_kv_cache_unified: layer  16: dev = CPU
llama_kv_cache_unified: layer  17: dev = CPU
llama_kv_cache_unified: layer  18: dev = CPU
llama_kv_cache_unified: layer  19: dev = CPU
llama_kv_cache_unified: layer  20: dev = CPU
llama_kv_cache_unified: layer  21: dev = CPU
llama_kv_cache_unified: layer  22: dev = CPU
llama_kv_cache_unified: layer  23: dev = CPU
llama_kv_cache_unified: layer  24: dev = CPU
llama_kv_cache_unified: layer  25: dev = CPU
llama_kv_cache_unified: layer  26: dev = CPU
llama_kv_cache_unified: layer  27: dev = CPU
llama_kv_cache_unified: layer  28: dev = CPU
llama_kv_cache_unified: layer  29: dev = CPU
llama_kv_cache_unified: layer  30: dev = CPU
llama_kv_cache_unified: layer  31: dev = CPU
llama_kv_cache_unified:        CPU KV buffer size =   256.00 MiB
llama_kv_cache_unified: size =  256.00 MiB (  2048 cells,  32 layers,  1/1 seqs), K (f16):  128.00 MiB, V (f16):  128.00 MiB
llama_context: enumerating backends
llama_context: backend_ptrs.size() = 1
llama_context: max_nodes = 2328
llama_context: worst-case: n_tokens = 8, n_seqs = 1, n_outputs = 0
graph_reserve: reserving a graph for ubatch with n_tokens =    8, n_seqs =  1, n_outputs =    8
graph_reserve: reserving a graph for ubatch with n_tokens =    1, n_seqs =  1, n_outputs =    1
graph_reserve: reserving a graph for ubatch with n_tokens =    8, n_seqs =  1, n_outputs =    8
llama_context:        CPU compute buffer size =     3.06 MiB
llama_context: graph nodes  = 1126
llama_context: graph splits = 1
CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | LLAMAFILE = 1 | OPENMP = 1 | REPACK = 1 | 
Model metadata: {'general.name': 'mistralai_mistral-7b-instruct-v0.2', 'general.architecture': 'llama', 'llama.context_length': '32768', 'llama.rope.dimension_count': '128', 'llama.embedding_length': '4096', 'llama.block_count': '32', 'llama.feed_forward_length': '14336', 'llama.attention.head_count': '32', 'tokenizer.ggml.eos_token_id': '2', 'general.file_type': '15', 'llama.attention.head_count_kv': '8', 'llama.attention.layer_norm_rms_epsilon': '0.000010', 'llama.rope.freq_base': '1000000.000000', 'tokenizer.ggml.model': 'llama', 'general.quantization_version': '2', 'tokenizer.ggml.bos_token_id': '1', 'tokenizer.ggml.unknown_token_id': '0', 'tokenizer.ggml.padding_token_id': '0', 'tokenizer.ggml.add_bos_token': 'true', 'tokenizer.ggml.add_eos_token': 'false', 'tokenizer.chat_template': "{{ bos_token }}{% for message in messages %}{% if (message['role'] == 'user') != (loop.index0 % 2 == 0) %}{{ raise_exception('Conversation roles must alternate user/assistant/user/assistant/...') }}{% endif %}{% if message['role'] == 'user' %}{{ '[INST] ' + message['content'] + ' [/INST]' }}{% elif message['role'] == 'assistant' %}{{ message['content'] + eos_token}}{% else %}{{ raise_exception('Only user and assistant roles are supported!') }}{% endif %}{% endfor %}"}
Available chat formats from metadata: chat_template.default
Guessed chat format: mistral-instruct
Building index from SQLite database...
Loading embedding model: intfloat/e5-small-v2 on CPU
Index saved to faiss_index
llama_model_loader: loaded meta data with 24 key-value pairs and 291 tensors from C:/Users/Prakhar Srivastava/Desktop/AskQuery/models/Mistral/mistral-7b-instruct-v0.2.Q4_K_M.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = llama
llama_model_loader: - kv   1:                               general.name str              = mistralai_mistral-7b-instruct-v0.2
llama_model_loader: - kv   2:                       llama.context_length u32              = 32768
llama_model_loader: - kv   3:                     llama.embedding_length u32              = 4096
llama_model_loader: - kv   4:                          llama.block_count u32              = 32
llama_model_loader: - kv   5:                  llama.feed_forward_length u32              = 14336
llama_model_loader: - kv   6:                 llama.rope.dimension_count u32              = 128
llama_model_loader: - kv   7:                 llama.attention.head_count u32              = 32
llama_model_loader: - kv   8:              llama.attention.head_count_kv u32              = 8
llama_model_loader: - kv   9:     llama.attention.layer_norm_rms_epsilon f32              = 0.000010
llama_model_loader: - kv  10:                       llama.rope.freq_base f32              = 1000000.000000
llama_model_loader: - kv  11:                          general.file_type u32              = 15
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,32000]   = ["<unk>", "<s>", "</s>", "<0x00>", "<...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,32000]   = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,32000]   = [2, 3, 3, 6, 6, 6, 6, 6, 6, 6, 6, 6, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 1
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 2
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 0
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% for message in mess...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - type  f32:   65 tensors
llama_model_loader: - type q4_K:  193 tensors
llama_model_loader: - type q6_K:   33 tensors
print_info: file format = GGUF V3 (latest)
print_info: file type   = Q4_K - Medium
print_info: file size   = 4.07 GiB (4.83 BPW) 
init_tokenizer: initializing tokenizer for type 1
load: control token:      2 '</s>' is not marked as EOG
load: control token:      1 '<s>' is not marked as EOG
load: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
load: printing all EOG tokens:
load:   - 2 ('</s>')
load: special tokens cache size = 3
load: token to piece cache size = 0.1637 MB
print_info: arch             = llama
print_info: vocab_only       = 0
print_info: n_ctx_train      = 32768
print_info: n_embd           = 4096
print_info: n_layer          = 32
print_info: n_head           = 32
print_info: n_head_kv        = 8
print_info: n_rot            = 128
print_info: n_swa            = 0
print_info: is_swa_any       = 0
print_info: n_embd_head_k    = 128
print_info: n_embd_head_v    = 128
print_info: n_gqa            = 4
print_info: n_embd_k_gqa     = 1024
print_info: n_embd_v_gqa     = 1024
print_info: f_norm_eps       = 0.0e+00
print_info: f_norm_rms_eps   = 1.0e-05
print_info: f_clamp_kqv      = 0.0e+00
print_info: f_max_alibi_bias = 0.0e+00
print_info: f_logit_scale    = 0.0e+00
print_info: f_attn_scale     = 0.0e+00
print_info: n_ff             = 14336
print_info: n_expert         = 0
print_info: n_expert_used    = 0
print_info: causal attn      = 1
print_info: pooling type     = 0
print_info: rope type        = 0
print_info: rope scaling     = linear
print_info: freq_base_train  = 1000000.0
print_info: freq_scale_train = 1
print_info: n_ctx_orig_yarn  = 32768
print_info: rope_finetuned   = unknown
print_info: model type       = 7B
print_info: model params     = 7.24 B
print_info: general.name     = mistralai_mistral-7b-instruct-v0.2
print_info: vocab type       = SPM
print_info: n_vocab          = 32000
print_info: n_merges         = 0
print_info: BOS token        = 1 '<s>'
print_info: EOS token        = 2 '</s>'
print_info: UNK token        = 0 '<unk>'
print_info: PAD token        = 0 '<unk>'
print_info: LF token         = 13 '<0x0A>'
print_info: EOG token        = 2 '</s>'
print_info: max token length = 48
load_tensors: loading model tensors, this can take a while... (mmap = true)
load_tensors: layer   0 assigned to device CPU, is_swa = 0
load_tensors: layer   1 assigned to device CPU, is_swa = 0
load_tensors: layer   2 assigned to device CPU, is_swa = 0
load_tensors: layer   3 assigned to device CPU, is_swa = 0
load_tensors: layer   4 assigned to device CPU, is_swa = 0
load_tensors: layer   5 assigned to device CPU, is_swa = 0
load_tensors: layer   6 assigned to device CPU, is_swa = 0
load_tensors: layer   7 assigned to device CPU, is_swa = 0
load_tensors: layer   8 assigned to device CPU, is_swa = 0
load_tensors: layer   9 assigned to device CPU, is_swa = 0
load_tensors: layer  10 assigned to device CPU, is_swa = 0
load_tensors: layer  11 assigned to device CPU, is_swa = 0
load_tensors: layer  12 assigned to device CPU, is_swa = 0
load_tensors: layer  13 assigned to device CPU, is_swa = 0
load_tensors: layer  14 assigned to device CPU, is_swa = 0
load_tensors: layer  15 assigned to device CPU, is_swa = 0
load_tensors: layer  16 assigned to device CPU, is_swa = 0
load_tensors: layer  17 assigned to device CPU, is_swa = 0
load_tensors: layer  18 assigned to device CPU, is_swa = 0
load_tensors: layer  19 assigned to device CPU, is_swa = 0
load_tensors: layer  20 assigned to device CPU, is_swa = 0
load_tensors: layer  21 assigned to device CPU, is_swa = 0
load_tensors: layer  22 assigned to device CPU, is_swa = 0
load_tensors: layer  23 assigned to device CPU, is_swa = 0
load_tensors: layer  24 assigned to device CPU, is_swa = 0
load_tensors: layer  25 assigned to device CPU, is_swa = 0
load_tensors: layer  26 assigned to device CPU, is_swa = 0
load_tensors: layer  27 assigned to device CPU, is_swa = 0
load_tensors: layer  28 assigned to device CPU, is_swa = 0
load_tensors: layer  29 assigned to device CPU, is_swa = 0
load_tensors: layer  30 assigned to device CPU, is_swa = 0
load_tensors: layer  31 assigned to device CPU, is_swa = 0
load_tensors: layer  32 assigned to device CPU, is_swa = 0
load_tensors: tensor 'token_embd.weight' (q4_K) (and 98 others) cannot be used with preferred buffer type CPU_REPACK, using CPU instead
load_tensors:   CPU_REPACK model buffer size =  3204.00 MiB
load_tensors:   CPU_Mapped model buffer size =  4165.37 MiB
repack: repack tensor blk.0.attn_q.weight with q4_K_8x8
repack: repack tensor blk.0.attn_k.weight with q4_K_8x8
repack: repack tensor blk.0.attn_output.weight with q4_K_8x8
repack: repack tensor blk.0.ffn_gate.weight with q4_K_8x8
.repack: repack tensor blk.0.ffn_up.weight with q4_K_8x8
repack: repack tensor blk.1.attn_q.weight with q4_K_8x8
.repack: repack tensor blk.1.attn_k.weight with q4_K_8x8
repack: repack tensor blk.1.attn_output.weight with q4_K_8x8
repack: repack tensor blk.1.ffn_gate.weight with q4_K_8x8
.repack: repack tensor blk.1.ffn_up.weight with q4_K_8x8
repack: repack tensor blk.2.attn_q.weight with q4_K_8x8
.repack: repack tensor blk.2.attn_k.weight with q4_K_8x8
repack: repack tensor blk.2.attn_output.weight with q4_K_8x8
repack: repack tensor blk.2.ffn_gate.weight with q4_K_8x8
.repack: repack tensor blk.2.ffn_up.weight with q4_K_8x8
repack: repack tensor blk.3.attn_q.weight with q4_K_8x8
.repack: repack tensor blk.3.attn_k.weight with q4_K_8x8
repack: repack tensor blk.3.attn_output.weight with q4_K_8x8
repack: repack tensor blk.3.ffn_gate.weight with q4_K_8x8
.repack: repack tensor blk.3.ffn_up.weight with q4_K_8x8
repack: repack tensor blk.4.attn_q.weight with q4_K_8x8
.repack: repack tensor blk.4.attn_k.weight with q4_K_8x8
repack: repack tensor blk.4.attn_v.weight with q4_K_8x8
repack: repack tensor blk.4.attn_output.weight with q4_K_8x8
repack: repack tensor blk.4.ffn_gate.weight with q4_K_8x8
.repack: repack tensor blk.4.ffn_down.weight with q4_K_8x8
.repack: repack tensor blk.4.ffn_up.weight with q4_K_8x8
repack: repack tensor blk.5.attn_q.weight with q4_K_8x8
.repack: repack tensor blk.5.attn_k.weight with q4_K_8x8
repack: repack tensor blk.5.attn_v.weight with q4_K_8x8
repack: repack tensor blk.5.attn_output.weight with q4_K_8x8
repack: repack tensor blk.5.ffn_gate.weight with q4_K_8x8
.repack: repack tensor blk.5.ffn_down.weight with q4_K_8x8
repack: repack tensor blk.5.ffn_up.weight with q4_K_8x8
.repack: repack tensor blk.6.attn_q.weight with q4_K_8x8
repack: repack tensor blk.6.attn_k.weight with q4_K_8x8
repack: repack tensor blk.6.attn_output.weight with q4_K_8x8
.repack: repack tensor blk.6.ffn_gate.weight with q4_K_8x8
repack: repack tensor blk.6.ffn_up.weight with q4_K_8x8
.repack: repack tensor blk.7.attn_q.weight with q4_K_8x8
repack: repack tensor blk.7.attn_k.weight with q4_K_8x8
repack: repack tensor blk.7.attn_v.weight with q4_K_8x8
repack: repack tensor blk.7.attn_output.weight with q4_K_8x8
.repack: repack tensor blk.7.ffn_gate.weight with q4_K_8x8
repack: repack tensor blk.7.ffn_down.weight with q4_K_8x8
.repack: repack tensor blk.7.ffn_up.weight with q4_K_8x8
.repack: repack tensor blk.8.attn_q.weight with q4_K_8x8
repack: repack tensor blk.8.attn_k.weight with q4_K_8x8
repack: repack tensor blk.8.attn_v.weight with q4_K_8x8
repack: repack tensor blk.8.attn_output.weight with q4_K_8x8
repack: repack tensor blk.8.ffn_gate.weight with q4_K_8x8
.repack: repack tensor blk.8.ffn_down.weight with q4_K_8x8
.repack: repack tensor blk.8.ffn_up.weight with q4_K_8x8
.repack: repack tensor blk.9.attn_q.weight with q4_K_8x8
repack: repack tensor blk.9.attn_k.weight with q4_K_8x8
repack: repack tensor blk.9.attn_output.weight with q4_K_8x8
repack: repack tensor blk.9.ffn_gate.weight with q4_K_8x8
.repack: repack tensor blk.9.ffn_up.weight with q4_K_8x8
.repack: repack tensor blk.10.attn_q.weight with q4_K_8x8
repack: repack tensor blk.10.attn_k.weight with q4_K_8x8
repack: repack tensor blk.10.attn_v.weight with q4_K_8x8
repack: repack tensor blk.10.attn_output.weight with q4_K_8x8
repack: repack tensor blk.10.ffn_gate.weight with q4_K_8x8
.repack: repack tensor blk.10.ffn_down.weight with q4_K_8x8
.repack: repack tensor blk.10.ffn_up.weight with q4_K_8x8
.repack: repack tensor blk.11.attn_q.weight with q4_K_8x8
repack: repack tensor blk.11.attn_k.weight with q4_K_8x8
repack: repack tensor blk.11.attn_v.weight with q4_K_8x8
repack: repack tensor blk.11.attn_output.weight with q4_K_8x8
repack: repack tensor blk.11.ffn_gate.weight with q4_K_8x8
.repack: repack tensor blk.11.ffn_down.weight with q4_K_8x8
.repack: repack tensor blk.11.ffn_up.weight with q4_K_8x8
repack: repack tensor blk.12.attn_q.weight with q4_K_8x8
.repack: repack tensor blk.12.attn_k.weight with q4_K_8x8
repack: repack tensor blk.12.attn_output.weight with q4_K_8x8
repack: repack tensor blk.12.ffn_gate.weight with q4_K_8x8
.repack: repack tensor blk.12.ffn_up.weight with q4_K_8x8
repack: repack tensor blk.13.attn_q.weight with q4_K_8x8
.repack: repack tensor blk.13.attn_k.weight with q4_K_8x8
repack: repack tensor blk.13.attn_v.weight with q4_K_8x8
repack: repack tensor blk.13.attn_output.weight with q4_K_8x8
repack: repack tensor blk.13.ffn_gate.weight with q4_K_8x8
.repack: repack tensor blk.13.ffn_down.weight with q4_K_8x8
repack: repack tensor blk.13.ffn_up.weight with q4_K_8x8
.repack: repack tensor blk.14.attn_q.weight with q4_K_8x8
repack: repack tensor blk.14.attn_k.weight with q4_K_8x8
repack: repack tensor blk.14.attn_v.weight with q4_K_8x8
repack: repack tensor blk.14.attn_output.weight with q4_K_8x8
.repack: repack tensor blk.14.ffn_gate.weight with q4_K_8x8
repack: repack tensor blk.14.ffn_down.weight with q4_K_8x8
.repack: repack tensor blk.14.ffn_up.weight with q4_K_8x8
.repack: repack tensor blk.15.attn_q.weight with q4_K_8x8
repack: repack tensor blk.15.attn_k.weight with q4_K_8x8
repack: repack tensor blk.15.attn_output.weight with q4_K_8x8
repack: repack tensor blk.15.ffn_gate.weight with q4_K_8x8
.repack: repack tensor blk.15.ffn_up.weight with q4_K_8x8
.repack: repack tensor blk.16.attn_q.weight with q4_K_8x8
repack: repack tensor blk.16.attn_k.weight with q4_K_8x8
repack: repack tensor blk.16.attn_v.weight with q4_K_8x8
repack: repack tensor blk.16.attn_output.weight with q4_K_8x8
.repack: repack tensor blk.16.ffn_gate.weight with q4_K_8x8
repack: repack tensor blk.16.ffn_down.weight with q4_K_8x8
.repack: repack tensor blk.16.ffn_up.weight with q4_K_8x8
.repack: repack tensor blk.17.attn_q.weight with q4_K_8x8
repack: repack tensor blk.17.attn_k.weight with q4_K_8x8
repack: repack tensor blk.17.attn_v.weight with q4_K_8x8
repack: repack tensor blk.17.attn_output.weight with q4_K_8x8
repack: repack tensor blk.17.ffn_gate.weight with q4_K_8x8
.repack: repack tensor blk.17.ffn_down.weight with q4_K_8x8
.repack: repack tensor blk.17.ffn_up.weight with q4_K_8x8
.repack: repack tensor blk.18.attn_q.weight with q4_K_8x8
repack: repack tensor blk.18.attn_k.weight with q4_K_8x8
repack: repack tensor blk.18.attn_output.weight with q4_K_8x8
repack: repack tensor blk.18.ffn_gate.weight with q4_K_8x8
.repack: repack tensor blk.18.ffn_up.weight with q4_K_8x8
.repack: repack tensor blk.19.attn_q.weight with q4_K_8x8
repack: repack tensor blk.19.attn_k.weight with q4_K_8x8
repack: repack tensor blk.19.attn_v.weight with q4_K_8x8
repack: repack tensor blk.19.attn_output.weight with q4_K_8x8
repack: repack tensor blk.19.ffn_gate.weight with q4_K_8x8
.repack: repack tensor blk.19.ffn_down.weight with q4_K_8x8
.repack: repack tensor blk.19.ffn_up.weight with q4_K_8x8
repack: repack tensor blk.20.attn_q.weight with q4_K_8x8
.repack: repack tensor blk.20.attn_k.weight with q4_K_8x8
repack: repack tensor blk.20.attn_v.weight with q4_K_8x8
repack: repack tensor blk.20.attn_output.weight with q4_K_8x8
repack: repack tensor blk.20.ffn_gate.weight with q4_K_8x8
.repack: repack tensor blk.20.ffn_down.weight with q4_K_8x8
repack: repack tensor blk.20.ffn_up.weight with q4_K_8x8
.repack: repack tensor blk.21.attn_q.weight with q4_K_8x8
repack: repack tensor blk.21.attn_k.weight with q4_K_8x8
repack: repack tensor blk.21.attn_output.weight with q4_K_8x8
.repack: repack tensor blk.21.ffn_gate.weight with q4_K_8x8
repack: repack tensor blk.21.ffn_up.weight with q4_K_8x8
.repack: repack tensor blk.22.attn_q.weight with q4_K_8x8
repack: repack tensor blk.22.attn_k.weight with q4_K_8x8
repack: repack tensor blk.22.attn_v.weight with q4_K_8x8
.repack: repack tensor blk.22.attn_output.weight with q4_K_8x8
repack: repack tensor blk.22.ffn_gate.weight with q4_K_8x8
repack: repack tensor blk.22.ffn_down.weight with q4_K_8x8
.repack: repack tensor blk.22.ffn_up.weight with q4_K_8x8
.repack: repack tensor blk.23.attn_q.weight with q4_K_8x8
repack: repack tensor blk.23.attn_k.weight with q4_K_8x8
repack: repack tensor blk.23.attn_v.weight with q4_K_8x8
repack: repack tensor blk.23.attn_output.weight with q4_K_8x8
.repack: repack tensor blk.23.ffn_gate.weight with q4_K_8x8
repack: repack tensor blk.23.ffn_down.weight with q4_K_8x8
.repack: repack tensor blk.23.ffn_up.weight with q4_K_8x8
.repack: repack tensor blk.24.attn_q.weight with q4_K_8x8
repack: repack tensor blk.24.attn_k.weight with q4_K_8x8
repack: repack tensor blk.24.attn_output.weight with q4_K_8x8
repack: repack tensor blk.24.ffn_gate.weight with q4_K_8x8
.repack: repack tensor blk.24.ffn_up.weight with q4_K_8x8
.repack: repack tensor blk.25.attn_q.weight with q4_K_8x8
repack: repack tensor blk.25.attn_k.weight with q4_K_8x8
repack: repack tensor blk.25.attn_v.weight with q4_K_8x8
repack: repack tensor blk.25.attn_output.weight with q4_K_8x8
repack: repack tensor blk.25.ffn_gate.weight with q4_K_8x8
.repack: repack tensor blk.25.ffn_down.weight with q4_K_8x8
.repack: repack tensor blk.25.ffn_up.weight with q4_K_8x8
.repack: repack tensor blk.26.attn_q.weight with q4_K_8x8
repack: repack tensor blk.26.attn_k.weight with q4_K_8x8
repack: repack tensor blk.26.attn_v.weight with q4_K_8x8
repack: repack tensor blk.26.attn_output.weight with q4_K_8x8
repack: repack tensor blk.26.ffn_gate.weight with q4_K_8x8
.repack: repack tensor blk.26.ffn_down.weight with q4_K_8x8
.repack: repack tensor blk.26.ffn_up.weight with q4_K_8x8
repack: repack tensor blk.27.attn_q.weight with q4_K_8x8
.repack: repack tensor blk.27.attn_k.weight with q4_K_8x8
repack: repack tensor blk.27.attn_output.weight with q4_K_8x8
repack: repack tensor blk.27.ffn_gate.weight with q4_K_8x8
.repack: repack tensor blk.27.ffn_up.weight with q4_K_8x8
repack: repack tensor blk.28.attn_q.weight with q4_K_8x8
.repack: repack tensor blk.28.attn_k.weight with q4_K_8x8
repack: repack tensor blk.28.attn_output.weight with q4_K_8x8
repack: repack tensor blk.28.ffn_gate.weight with q4_K_8x8
.repack: repack tensor blk.28.ffn_up.weight with q4_K_8x8
repack: repack tensor blk.29.attn_q.weight with q4_K_8x8
.repack: repack tensor blk.29.attn_k.weight with q4_K_8x8
repack: repack tensor blk.29.attn_output.weight with q4_K_8x8
repack: repack tensor blk.29.ffn_gate.weight with q4_K_8x8
.repack: repack tensor blk.29.ffn_up.weight with q4_K_8x8
repack: repack tensor blk.30.attn_q.weight with q4_K_8x8
.repack: repack tensor blk.30.attn_k.weight with q4_K_8x8
repack: repack tensor blk.30.attn_output.weight with q4_K_8x8
repack: repack tensor blk.30.ffn_gate.weight with q4_K_8x8
.repack: repack tensor blk.30.ffn_up.weight with q4_K_8x8
repack: repack tensor blk.31.attn_q.weight with q4_K_8x8
.repack: repack tensor blk.31.attn_k.weight with q4_K_8x8
repack: repack tensor blk.31.attn_output.weight with q4_K_8x8
repack: repack tensor blk.31.ffn_gate.weight with q4_K_8x8
.repack: repack tensor blk.31.ffn_up.weight with q4_K_8x8
...................
llama_context: constructing llama_context
llama_context: n_batch is less than GGML_KQ_MASK_PAD - increasing to 64
llama_context: n_seq_max     = 1
llama_context: n_ctx         = 2048
llama_context: n_ctx_per_seq = 2048
llama_context: n_batch       = 64
llama_context: n_ubatch      = 8
llama_context: causal_attn   = 1
llama_context: flash_attn    = 0
llama_context: kv_unified    = false
llama_context: freq_base     = 1000000.0
llama_context: freq_scale    = 1
llama_context: n_ctx_per_seq (2048) < n_ctx_train (32768) -- the full capacity of the model will not be utilized
set_abort_callback: call
llama_context:        CPU  output buffer size =     0.12 MiB
create_memory: n_ctx = 2048 (padded)
llama_kv_cache_unified: layer   0: dev = CPU
llama_kv_cache_unified: layer   1: dev = CPU
llama_kv_cache_unified: layer   2: dev = CPU
llama_kv_cache_unified: layer   3: dev = CPU
llama_kv_cache_unified: layer   4: dev = CPU
llama_kv_cache_unified: layer   5: dev = CPU
llama_kv_cache_unified: layer   6: dev = CPU
llama_kv_cache_unified: layer   7: dev = CPU
llama_kv_cache_unified: layer   8: dev = CPU
llama_kv_cache_unified: layer   9: dev = CPU
llama_kv_cache_unified: layer  10: dev = CPU
llama_kv_cache_unified: layer  11: dev = CPU
llama_kv_cache_unified: layer  12: dev = CPU
llama_kv_cache_unified: layer  13: dev = CPU
llama_kv_cache_unified: layer  14: dev = CPU
llama_kv_cache_unified: layer  15: dev = CPU
llama_kv_cache_unified: layer  16: dev = CPU
llama_kv_cache_unified: layer  17: dev = CPU
llama_kv_cache_unified: layer  18: dev = CPU
llama_kv_cache_unified: layer  19: dev = CPU
llama_kv_cache_unified: layer  20: dev = CPU
llama_kv_cache_unified: layer  21: dev = CPU
llama_kv_cache_unified: layer  22: dev = CPU
llama_kv_cache_unified: layer  23: dev = CPU
llama_kv_cache_unified: layer  24: dev = CPU
llama_kv_cache_unified: layer  25: dev = CPU
llama_kv_cache_unified: layer  26: dev = CPU
llama_kv_cache_unified: layer  27: dev = CPU
llama_kv_cache_unified: layer  28: dev = CPU
llama_kv_cache_unified: layer  29: dev = CPU
llama_kv_cache_unified: layer  30: dev = CPU
llama_kv_cache_unified: layer  31: dev = CPU
llama_kv_cache_unified:        CPU KV buffer size =   256.00 MiB
llama_kv_cache_unified: size =  256.00 MiB (  2048 cells,  32 layers,  1/1 seqs), K (f16):  128.00 MiB, V (f16):  128.00 MiB
llama_context: enumerating backends
llama_context: backend_ptrs.size() = 1
llama_context: max_nodes = 2328
llama_context: worst-case: n_tokens = 8, n_seqs = 1, n_outputs = 0
graph_reserve: reserving a graph for ubatch with n_tokens =    8, n_seqs =  1, n_outputs =    8
graph_reserve: reserving a graph for ubatch with n_tokens =    1, n_seqs =  1, n_outputs =    1
graph_reserve: reserving a graph for ubatch with n_tokens =    8, n_seqs =  1, n_outputs =    8
llama_context:        CPU compute buffer size =     3.06 MiB
llama_context: graph nodes  = 1126
llama_context: graph splits = 1
CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | LLAMAFILE = 1 | OPENMP = 1 | REPACK = 1 | 
Model metadata: {'general.name': 'mistralai_mistral-7b-instruct-v0.2', 'general.architecture': 'llama', 'llama.context_length': '32768', 'llama.rope.dimension_count': '128', 'llama.embedding_length': '4096', 'llama.block_count': '32', 'llama.feed_forward_length': '14336', 'llama.attention.head_count': '32', 'tokenizer.ggml.eos_token_id': '2', 'general.file_type': '15', 'llama.attention.head_count_kv': '8', 'llama.attention.layer_norm_rms_epsilon': '0.000010', 'llama.rope.freq_base': '1000000.000000', 'tokenizer.ggml.model': 'llama', 'general.quantization_version': '2', 'tokenizer.ggml.bos_token_id': '1', 'tokenizer.ggml.unknown_token_id': '0', 'tokenizer.ggml.padding_token_id': '0', 'tokenizer.ggml.add_bos_token': 'true', 'tokenizer.ggml.add_eos_token': 'false', 'tokenizer.chat_template': "{{ bos_token }}{% for message in messages %}{% if (message['role'] == 'user') != (loop.index0 % 2 == 0) %}{{ raise_exception('Conversation roles must alternate user/assistant/user/assistant/...') }}{% endif %}{% if message['role'] == 'user' %}{{ '[INST] ' + message['content'] + ' [/INST]' }}{% elif message['role'] == 'assistant' %}{{ message['content'] + eos_token}}{% else %}{{ raise_exception('Only user and assistant roles are supported!') }}{% endif %}{% endfor %}"}
Available chat formats from metadata: chat_template.default
Guessed chat format: mistral-instruct
Building index from SQLite database...
Loading embedding model: intfloat/e5-small-v2 on CPU
Index saved to faiss_index
LLM is explicitly disabled. Using MockLLM.
llama_model_loader: loaded meta data with 24 key-value pairs and 291 tensors from C:/Users/Prakhar Srivastava/Desktop/AskQuery/models/Mistral/mistral-7b-instruct-v0.2.Q4_K_M.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = llama
llama_model_loader: - kv   1:                               general.name str              = mistralai_mistral-7b-instruct-v0.2
llama_model_loader: - kv   2:                       llama.context_length u32              = 32768
llama_model_loader: - kv   3:                     llama.embedding_length u32              = 4096
llama_model_loader: - kv   4:                          llama.block_count u32              = 32
llama_model_loader: - kv   5:                  llama.feed_forward_length u32              = 14336
llama_model_loader: - kv   6:                 llama.rope.dimension_count u32              = 128
llama_model_loader: - kv   7:                 llama.attention.head_count u32              = 32
llama_model_loader: - kv   8:              llama.attention.head_count_kv u32              = 8
llama_model_loader: - kv   9:     llama.attention.layer_norm_rms_epsilon f32              = 0.000010
llama_model_loader: - kv  10:                       llama.rope.freq_base f32              = 1000000.000000
llama_model_loader: - kv  11:                          general.file_type u32              = 15
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,32000]   = ["<unk>", "<s>", "</s>", "<0x00>", "<...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,32000]   = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,32000]   = [2, 3, 3, 6, 6, 6, 6, 6, 6, 6, 6, 6, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 1
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 2
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 0
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% for message in mess...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - type  f32:   65 tensors
llama_model_loader: - type q4_K:  193 tensors
llama_model_loader: - type q6_K:   33 tensors
print_info: file format = GGUF V3 (latest)
print_info: file type   = Q4_K - Medium
print_info: file size   = 4.07 GiB (4.83 BPW) 
init_tokenizer: initializing tokenizer for type 1
load: control token:      2 '</s>' is not marked as EOG
load: control token:      1 '<s>' is not marked as EOG
load: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
load: printing all EOG tokens:
load:   - 2 ('</s>')
load: special tokens cache size = 3
load: token to piece cache size = 0.1637 MB
print_info: arch             = llama
print_info: vocab_only       = 0
print_info: n_ctx_train      = 32768
print_info: n_embd           = 4096
print_info: n_layer          = 32
print_info: n_head           = 32
print_info: n_head_kv        = 8
print_info: n_rot            = 128
print_info: n_swa            = 0
print_info: is_swa_any       = 0
print_info: n_embd_head_k    = 128
print_info: n_embd_head_v    = 128
print_info: n_gqa            = 4
print_info: n_embd_k_gqa     = 1024
print_info: n_embd_v_gqa     = 1024
print_info: f_norm_eps       = 0.0e+00
print_info: f_norm_rms_eps   = 1.0e-05
print_info: f_clamp_kqv      = 0.0e+00
print_info: f_max_alibi_bias = 0.0e+00
print_info: f_logit_scale    = 0.0e+00
print_info: f_attn_scale     = 0.0e+00
print_info: n_ff             = 14336
print_info: n_expert         = 0
print_info: n_expert_used    = 0
print_info: causal attn      = 1
print_info: pooling type     = 0
print_info: rope type        = 0
print_info: rope scaling     = linear
print_info: freq_base_train  = 1000000.0
print_info: freq_scale_train = 1
print_info: n_ctx_orig_yarn  = 32768
print_info: rope_finetuned   = unknown
print_info: model type       = 7B
print_info: model params     = 7.24 B
print_info: general.name     = mistralai_mistral-7b-instruct-v0.2
print_info: vocab type       = SPM
print_info: n_vocab          = 32000
print_info: n_merges         = 0
print_info: BOS token        = 1 '<s>'
print_info: EOS token        = 2 '</s>'
print_info: UNK token        = 0 '<unk>'
print_info: PAD token        = 0 '<unk>'
print_info: LF token         = 13 '<0x0A>'
print_info: EOG token        = 2 '</s>'
print_info: max token length = 48
load_tensors: loading model tensors, this can take a while... (mmap = true)
load_tensors: layer   0 assigned to device CPU, is_swa = 0
load_tensors: layer   1 assigned to device CPU, is_swa = 0
load_tensors: layer   2 assigned to device CPU, is_swa = 0
load_tensors: layer   3 assigned to device CPU, is_swa = 0
load_tensors: layer   4 assigned to device CPU, is_swa = 0
load_tensors: layer   5 assigned to device CPU, is_swa = 0
load_tensors: layer   6 assigned to device CPU, is_swa = 0
load_tensors: layer   7 assigned to device CPU, is_swa = 0
load_tensors: layer   8 assigned to device CPU, is_swa = 0
load_tensors: layer   9 assigned to device CPU, is_swa = 0
load_tensors: layer  10 assigned to device CPU, is_swa = 0
load_tensors: layer  11 assigned to device CPU, is_swa = 0
load_tensors: layer  12 assigned to device CPU, is_swa = 0
load_tensors: layer  13 assigned to device CPU, is_swa = 0
load_tensors: layer  14 assigned to device CPU, is_swa = 0
load_tensors: layer  15 assigned to device CPU, is_swa = 0
load_tensors: layer  16 assigned to device CPU, is_swa = 0
load_tensors: layer  17 assigned to device CPU, is_swa = 0
load_tensors: layer  18 assigned to device CPU, is_swa = 0
load_tensors: layer  19 assigned to device CPU, is_swa = 0
load_tensors: layer  20 assigned to device CPU, is_swa = 0
load_tensors: layer  21 assigned to device CPU, is_swa = 0
load_tensors: layer  22 assigned to device CPU, is_swa = 0
load_tensors: layer  23 assigned to device CPU, is_swa = 0
load_tensors: layer  24 assigned to device CPU, is_swa = 0
load_tensors: layer  25 assigned to device CPU, is_swa = 0
load_tensors: layer  26 assigned to device CPU, is_swa = 0
load_tensors: layer  27 assigned to device CPU, is_swa = 0
load_tensors: layer  28 assigned to device CPU, is_swa = 0
load_tensors: layer  29 assigned to device CPU, is_swa = 0
load_tensors: layer  30 assigned to device CPU, is_swa = 0
load_tensors: layer  31 assigned to device CPU, is_swa = 0
load_tensors: layer  32 assigned to device CPU, is_swa = 0
load_tensors: tensor 'token_embd.weight' (q4_K) (and 98 others) cannot be used with preferred buffer type CPU_REPACK, using CPU instead
load_tensors:   CPU_REPACK model buffer size =  3204.00 MiB
load_tensors:   CPU_Mapped model buffer size =  4165.37 MiB
repack: repack tensor blk.0.attn_q.weight with q4_K_8x8
repack: repack tensor blk.0.attn_k.weight with q4_K_8x8
repack: repack tensor blk.0.attn_output.weight with q4_K_8x8
repack: repack tensor blk.0.ffn_gate.weight with q4_K_8x8
.repack: repack tensor blk.0.ffn_up.weight with q4_K_8x8
repack: repack tensor blk.1.attn_q.weight with q4_K_8x8
.repack: repack tensor blk.1.attn_k.weight with q4_K_8x8
repack: repack tensor blk.1.attn_output.weight with q4_K_8x8
repack: repack tensor blk.1.ffn_gate.weight with q4_K_8x8
.repack: repack tensor blk.1.ffn_up.weight with q4_K_8x8
repack: repack tensor blk.2.attn_q.weight with q4_K_8x8
.repack: repack tensor blk.2.attn_k.weight with q4_K_8x8
repack: repack tensor blk.2.attn_output.weight with q4_K_8x8
repack: repack tensor blk.2.ffn_gate.weight with q4_K_8x8
.repack: repack tensor blk.2.ffn_up.weight with q4_K_8x8
repack: repack tensor blk.3.attn_q.weight with q4_K_8x8
.repack: repack tensor blk.3.attn_k.weight with q4_K_8x8
repack: repack tensor blk.3.attn_output.weight with q4_K_8x8
repack: repack tensor blk.3.ffn_gate.weight with q4_K_8x8
.repack: repack tensor blk.3.ffn_up.weight with q4_K_8x8
repack: repack tensor blk.4.attn_q.weight with q4_K_8x8
.repack: repack tensor blk.4.attn_k.weight with q4_K_8x8
repack: repack tensor blk.4.attn_v.weight with q4_K_8x8
repack: repack tensor blk.4.attn_output.weight with q4_K_8x8
repack: repack tensor blk.4.ffn_gate.weight with q4_K_8x8
.repack: repack tensor blk.4.ffn_down.weight with q4_K_8x8
.repack: repack tensor blk.4.ffn_up.weight with q4_K_8x8
repack: repack tensor blk.5.attn_q.weight with q4_K_8x8
.repack: repack tensor blk.5.attn_k.weight with q4_K_8x8
repack: repack tensor blk.5.attn_v.weight with q4_K_8x8
repack: repack tensor blk.5.attn_output.weight with q4_K_8x8
repack: repack tensor blk.5.ffn_gate.weight with q4_K_8x8
.repack: repack tensor blk.5.ffn_down.weight with q4_K_8x8
repack: repack tensor blk.5.ffn_up.weight with q4_K_8x8
.repack: repack tensor blk.6.attn_q.weight with q4_K_8x8
repack: repack tensor blk.6.attn_k.weight with q4_K_8x8
repack: repack tensor blk.6.attn_output.weight with q4_K_8x8
.repack: repack tensor blk.6.ffn_gate.weight with q4_K_8x8
repack: repack tensor blk.6.ffn_up.weight with q4_K_8x8
.repack: repack tensor blk.7.attn_q.weight with q4_K_8x8
repack: repack tensor blk.7.attn_k.weight with q4_K_8x8
repack: repack tensor blk.7.attn_v.weight with q4_K_8x8
repack: repack tensor blk.7.attn_output.weight with q4_K_8x8
.repack: repack tensor blk.7.ffn_gate.weight with q4_K_8x8
repack: repack tensor blk.7.ffn_down.weight with q4_K_8x8
.repack: repack tensor blk.7.ffn_up.weight with q4_K_8x8
.repack: repack tensor blk.8.attn_q.weight with q4_K_8x8
repack: repack tensor blk.8.attn_k.weight with q4_K_8x8
repack: repack tensor blk.8.attn_v.weight with q4_K_8x8
repack: repack tensor blk.8.attn_output.weight with q4_K_8x8
repack: repack tensor blk.8.ffn_gate.weight with q4_K_8x8
.repack: repack tensor blk.8.ffn_down.weight with q4_K_8x8
.repack: repack tensor blk.8.ffn_up.weight with q4_K_8x8
.repack: repack tensor blk.9.attn_q.weight with q4_K_8x8
repack: repack tensor blk.9.attn_k.weight with q4_K_8x8
repack: repack tensor blk.9.attn_output.weight with q4_K_8x8
repack: repack tensor blk.9.ffn_gate.weight with q4_K_8x8
.repack: repack tensor blk.9.ffn_up.weight with q4_K_8x8
.repack: repack tensor blk.10.attn_q.weight with q4_K_8x8
repack: repack tensor blk.10.attn_k.weight with q4_K_8x8
repack: repack tensor blk.10.attn_v.weight with q4_K_8x8
repack: repack tensor blk.10.attn_output.weight with q4_K_8x8
repack: repack tensor blk.10.ffn_gate.weight with q4_K_8x8
.repack: repack tensor blk.10.ffn_down.weight with q4_K_8x8
.repack: repack tensor blk.10.ffn_up.weight with q4_K_8x8
.repack: repack tensor blk.11.attn_q.weight with q4_K_8x8
repack: repack tensor blk.11.attn_k.weight with q4_K_8x8
repack: repack tensor blk.11.attn_v.weight with q4_K_8x8
repack: repack tensor blk.11.attn_output.weight with q4_K_8x8
repack: repack tensor blk.11.ffn_gate.weight with q4_K_8x8
.repack: repack tensor blk.11.ffn_down.weight with q4_K_8x8
.repack: repack tensor blk.11.ffn_up.weight with q4_K_8x8
repack: repack tensor blk.12.attn_q.weight with q4_K_8x8
.repack: repack tensor blk.12.attn_k.weight with q4_K_8x8
repack: repack tensor blk.12.attn_output.weight with q4_K_8x8
repack: repack tensor blk.12.ffn_gate.weight with q4_K_8x8
.repack: repack tensor blk.12.ffn_up.weight with q4_K_8x8
repack: repack tensor blk.13.attn_q.weight with q4_K_8x8
.repack: repack tensor blk.13.attn_k.weight with q4_K_8x8
repack: repack tensor blk.13.attn_v.weight with q4_K_8x8
repack: repack tensor blk.13.attn_output.weight with q4_K_8x8
repack: repack tensor blk.13.ffn_gate.weight with q4_K_8x8
.repack: repack tensor blk.13.ffn_down.weight with q4_K_8x8
repack: repack tensor blk.13.ffn_up.weight with q4_K_8x8
.repack: repack tensor blk.14.attn_q.weight with q4_K_8x8
repack: repack tensor blk.14.attn_k.weight with q4_K_8x8
repack: repack tensor blk.14.attn_v.weight with q4_K_8x8
repack: repack tensor blk.14.attn_output.weight with q4_K_8x8
.repack: repack tensor blk.14.ffn_gate.weight with q4_K_8x8
repack: repack tensor blk.14.ffn_down.weight with q4_K_8x8
.repack: repack tensor blk.14.ffn_up.weight with q4_K_8x8
.repack: repack tensor blk.15.attn_q.weight with q4_K_8x8
repack: repack tensor blk.15.attn_k.weight with q4_K_8x8
repack: repack tensor blk.15.attn_output.weight with q4_K_8x8
repack: repack tensor blk.15.ffn_gate.weight with q4_K_8x8
.repack: repack tensor blk.15.ffn_up.weight with q4_K_8x8
.repack: repack tensor blk.16.attn_q.weight with q4_K_8x8
repack: repack tensor blk.16.attn_k.weight with q4_K_8x8
repack: repack tensor blk.16.attn_v.weight with q4_K_8x8
repack: repack tensor blk.16.attn_output.weight with q4_K_8x8
.repack: repack tensor blk.16.ffn_gate.weight with q4_K_8x8
repack: repack tensor blk.16.ffn_down.weight with q4_K_8x8
.repack: repack tensor blk.16.ffn_up.weight with q4_K_8x8
.repack: repack tensor blk.17.attn_q.weight with q4_K_8x8
repack: repack tensor blk.17.attn_k.weight with q4_K_8x8
repack: repack tensor blk.17.attn_v.weight with q4_K_8x8
repack: repack tensor blk.17.attn_output.weight with q4_K_8x8
repack: repack tensor blk.17.ffn_gate.weight with q4_K_8x8
.repack: repack tensor blk.17.ffn_down.weight with q4_K_8x8
.repack: repack tensor blk.17.ffn_up.weight with q4_K_8x8
.repack: repack tensor blk.18.attn_q.weight with q4_K_8x8
repack: repack tensor blk.18.attn_k.weight with q4_K_8x8
repack: repack tensor blk.18.attn_output.weight with q4_K_8x8
repack: repack tensor blk.18.ffn_gate.weight with q4_K_8x8
.repack: repack tensor blk.18.ffn_up.weight with q4_K_8x8
.repack: repack tensor blk.19.attn_q.weight with q4_K_8x8
repack: repack tensor blk.19.attn_k.weight with q4_K_8x8
repack: repack tensor blk.19.attn_v.weight with q4_K_8x8
repack: repack tensor blk.19.attn_output.weight with q4_K_8x8
repack: repack tensor blk.19.ffn_gate.weight with q4_K_8x8
.repack: repack tensor blk.19.ffn_down.weight with q4_K_8x8
.repack: repack tensor blk.19.ffn_up.weight with q4_K_8x8
repack: repack tensor blk.20.attn_q.weight with q4_K_8x8
.repack: repack tensor blk.20.attn_k.weight with q4_K_8x8
repack: repack tensor blk.20.attn_v.weight with q4_K_8x8
repack: repack tensor blk.20.attn_output.weight with q4_K_8x8
repack: repack tensor blk.20.ffn_gate.weight with q4_K_8x8
.repack: repack tensor blk.20.ffn_down.weight with q4_K_8x8
repack: repack tensor blk.20.ffn_up.weight with q4_K_8x8
.repack: repack tensor blk.21.attn_q.weight with q4_K_8x8
repack: repack tensor blk.21.attn_k.weight with q4_K_8x8
repack: repack tensor blk.21.attn_output.weight with q4_K_8x8
.repack: repack tensor blk.21.ffn_gate.weight with q4_K_8x8
repack: repack tensor blk.21.ffn_up.weight with q4_K_8x8
.repack: repack tensor blk.22.attn_q.weight with q4_K_8x8
repack: repack tensor blk.22.attn_k.weight with q4_K_8x8
repack: repack tensor blk.22.attn_v.weight with q4_K_8x8
.repack: repack tensor blk.22.attn_output.weight with q4_K_8x8
repack: repack tensor blk.22.ffn_gate.weight with q4_K_8x8
repack: repack tensor blk.22.ffn_down.weight with q4_K_8x8
.repack: repack tensor blk.22.ffn_up.weight with q4_K_8x8
.repack: repack tensor blk.23.attn_q.weight with q4_K_8x8
repack: repack tensor blk.23.attn_k.weight with q4_K_8x8
repack: repack tensor blk.23.attn_v.weight with q4_K_8x8
repack: repack tensor blk.23.attn_output.weight with q4_K_8x8
.repack: repack tensor blk.23.ffn_gate.weight with q4_K_8x8
repack: repack tensor blk.23.ffn_down.weight with q4_K_8x8
.repack: repack tensor blk.23.ffn_up.weight with q4_K_8x8
.repack: repack tensor blk.24.attn_q.weight with q4_K_8x8
repack: repack tensor blk.24.attn_k.weight with q4_K_8x8
repack: repack tensor blk.24.attn_output.weight with q4_K_8x8
repack: repack tensor blk.24.ffn_gate.weight with q4_K_8x8
.repack: repack tensor blk.24.ffn_up.weight with q4_K_8x8
.repack: repack tensor blk.25.attn_q.weight with q4_K_8x8
repack: repack tensor blk.25.attn_k.weight with q4_K_8x8
repack: repack tensor blk.25.attn_v.weight with q4_K_8x8
repack: repack tensor blk.25.attn_output.weight with q4_K_8x8
repack: repack tensor blk.25.ffn_gate.weight with q4_K_8x8
.repack: repack tensor blk.25.ffn_down.weight with q4_K_8x8
.repack: repack tensor blk.25.ffn_up.weight with q4_K_8x8
.repack: repack tensor blk.26.attn_q.weight with q4_K_8x8
repack: repack tensor blk.26.attn_k.weight with q4_K_8x8
repack: repack tensor blk.26.attn_v.weight with q4_K_8x8
repack: repack tensor blk.26.attn_output.weight with q4_K_8x8
repack: repack tensor blk.26.ffn_gate.weight with q4_K_8x8
.repack: repack tensor blk.26.ffn_down.weight with q4_K_8x8
.repack: repack tensor blk.26.ffn_up.weight with q4_K_8x8
repack: repack tensor blk.27.attn_q.weight with q4_K_8x8
.repack: repack tensor blk.27.attn_k.weight with q4_K_8x8
repack: repack tensor blk.27.attn_output.weight with q4_K_8x8
repack: repack tensor blk.27.ffn_gate.weight with q4_K_8x8
.repack: repack tensor blk.27.ffn_up.weight with q4_K_8x8
repack: repack tensor blk.28.attn_q.weight with q4_K_8x8
.repack: repack tensor blk.28.attn_k.weight with q4_K_8x8
repack: repack tensor blk.28.attn_output.weight with q4_K_8x8
repack: repack tensor blk.28.ffn_gate.weight with q4_K_8x8
.repack: repack tensor blk.28.ffn_up.weight with q4_K_8x8
repack: repack tensor blk.29.attn_q.weight with q4_K_8x8
.repack: repack tensor blk.29.attn_k.weight with q4_K_8x8
repack: repack tensor blk.29.attn_output.weight with q4_K_8x8
repack: repack tensor blk.29.ffn_gate.weight with q4_K_8x8
.repack: repack tensor blk.29.ffn_up.weight with q4_K_8x8
repack: repack tensor blk.30.attn_q.weight with q4_K_8x8
.repack: repack tensor blk.30.attn_k.weight with q4_K_8x8
repack: repack tensor blk.30.attn_output.weight with q4_K_8x8
repack: repack tensor blk.30.ffn_gate.weight with q4_K_8x8
.repack: repack tensor blk.30.ffn_up.weight with q4_K_8x8
repack: repack tensor blk.31.attn_q.weight with q4_K_8x8
.repack: repack tensor blk.31.attn_k.weight with q4_K_8x8
repack: repack tensor blk.31.attn_output.weight with q4_K_8x8
repack: repack tensor blk.31.ffn_gate.weight with q4_K_8x8
.repack: repack tensor blk.31.ffn_up.weight with q4_K_8x8
...................
llama_context: constructing llama_context
llama_context: n_batch is less than GGML_KQ_MASK_PAD - increasing to 64
llama_context: n_seq_max     = 1
llama_context: n_ctx         = 2048
llama_context: n_ctx_per_seq = 2048
llama_context: n_batch       = 64
llama_context: n_ubatch      = 8
llama_context: causal_attn   = 1
llama_context: flash_attn    = 0
llama_context: kv_unified    = false
llama_context: freq_base     = 1000000.0
llama_context: freq_scale    = 1
llama_context: n_ctx_per_seq (2048) < n_ctx_train (32768) -- the full capacity of the model will not be utilized
set_abort_callback: call
llama_context:        CPU  output buffer size =     0.12 MiB
create_memory: n_ctx = 2048 (padded)
llama_kv_cache_unified: layer   0: dev = CPU
llama_kv_cache_unified: layer   1: dev = CPU
llama_kv_cache_unified: layer   2: dev = CPU
llama_kv_cache_unified: layer   3: dev = CPU
llama_kv_cache_unified: layer   4: dev = CPU
llama_kv_cache_unified: layer   5: dev = CPU
llama_kv_cache_unified: layer   6: dev = CPU
llama_kv_cache_unified: layer   7: dev = CPU
llama_kv_cache_unified: layer   8: dev = CPU
llama_kv_cache_unified: layer   9: dev = CPU
llama_kv_cache_unified: layer  10: dev = CPU
llama_kv_cache_unified: layer  11: dev = CPU
llama_kv_cache_unified: layer  12: dev = CPU
llama_kv_cache_unified: layer  13: dev = CPU
llama_kv_cache_unified: layer  14: dev = CPU
llama_kv_cache_unified: layer  15: dev = CPU
llama_kv_cache_unified: layer  16: dev = CPU
llama_kv_cache_unified: layer  17: dev = CPU
llama_kv_cache_unified: layer  18: dev = CPU
llama_kv_cache_unified: layer  19: dev = CPU
llama_kv_cache_unified: layer  20: dev = CPU
llama_kv_cache_unified: layer  21: dev = CPU
llama_kv_cache_unified: layer  22: dev = CPU
llama_kv_cache_unified: layer  23: dev = CPU
llama_kv_cache_unified: layer  24: dev = CPU
llama_kv_cache_unified: layer  25: dev = CPU
llama_kv_cache_unified: layer  26: dev = CPU
llama_kv_cache_unified: layer  27: dev = CPU
llama_kv_cache_unified: layer  28: dev = CPU
llama_kv_cache_unified: layer  29: dev = CPU
llama_kv_cache_unified: layer  30: dev = CPU
llama_kv_cache_unified: layer  31: dev = CPU
llama_kv_cache_unified:        CPU KV buffer size =   256.00 MiB
llama_kv_cache_unified: size =  256.00 MiB (  2048 cells,  32 layers,  1/1 seqs), K (f16):  128.00 MiB, V (f16):  128.00 MiB
llama_context: enumerating backends
llama_context: backend_ptrs.size() = 1
llama_context: max_nodes = 2328
llama_context: worst-case: n_tokens = 8, n_seqs = 1, n_outputs = 0
graph_reserve: reserving a graph for ubatch with n_tokens =    8, n_seqs =  1, n_outputs =    8
graph_reserve: reserving a graph for ubatch with n_tokens =    1, n_seqs =  1, n_outputs =    1
graph_reserve: reserving a graph for ubatch with n_tokens =    8, n_seqs =  1, n_outputs =    8
llama_context:        CPU compute buffer size =     3.06 MiB
llama_context: graph nodes  = 1126
llama_context: graph splits = 1
CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | LLAMAFILE = 1 | OPENMP = 1 | REPACK = 1 | 
Model metadata: {'general.name': 'mistralai_mistral-7b-instruct-v0.2', 'general.architecture': 'llama', 'llama.context_length': '32768', 'llama.rope.dimension_count': '128', 'llama.embedding_length': '4096', 'llama.block_count': '32', 'llama.feed_forward_length': '14336', 'llama.attention.head_count': '32', 'tokenizer.ggml.eos_token_id': '2', 'general.file_type': '15', 'llama.attention.head_count_kv': '8', 'llama.attention.layer_norm_rms_epsilon': '0.000010', 'llama.rope.freq_base': '1000000.000000', 'tokenizer.ggml.model': 'llama', 'general.quantization_version': '2', 'tokenizer.ggml.bos_token_id': '1', 'tokenizer.ggml.unknown_token_id': '0', 'tokenizer.ggml.padding_token_id': '0', 'tokenizer.ggml.add_bos_token': 'true', 'tokenizer.ggml.add_eos_token': 'false', 'tokenizer.chat_template': "{{ bos_token }}{% for message in messages %}{% if (message['role'] == 'user') != (loop.index0 % 2 == 0) %}{{ raise_exception('Conversation roles must alternate user/assistant/user/assistant/...') }}{% endif %}{% if message['role'] == 'user' %}{{ '[INST] ' + message['content'] + ' [/INST]' }}{% elif message['role'] == 'assistant' %}{{ message['content'] + eos_token}}{% else %}{{ raise_exception('Only user and assistant roles are supported!') }}{% endif %}{% endfor %}"}
Available chat formats from metadata: chat_template.default
Guessed chat format: mistral-instruct
Building index from SQLite database...
Loading embedding model: intfloat/e5-small-v2 on CPU
Index saved to faiss_index
llama_model_loader: loaded meta data with 24 key-value pairs and 291 tensors from C:/Users/Prakhar Srivastava/Desktop/AskQuery/models/Mistral/mistral-7b-instruct-v0.2.Q4_K_M.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = llama
llama_model_loader: - kv   1:                               general.name str              = mistralai_mistral-7b-instruct-v0.2
llama_model_loader: - kv   2:                       llama.context_length u32              = 32768
llama_model_loader: - kv   3:                     llama.embedding_length u32              = 4096
llama_model_loader: - kv   4:                          llama.block_count u32              = 32
llama_model_loader: - kv   5:                  llama.feed_forward_length u32              = 14336
llama_model_loader: - kv   6:                 llama.rope.dimension_count u32              = 128
llama_model_loader: - kv   7:                 llama.attention.head_count u32              = 32
llama_model_loader: - kv   8:              llama.attention.head_count_kv u32              = 8
llama_model_loader: - kv   9:     llama.attention.layer_norm_rms_epsilon f32              = 0.000010
llama_model_loader: - kv  10:                       llama.rope.freq_base f32              = 1000000.000000
llama_model_loader: - kv  11:                          general.file_type u32              = 15
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,32000]   = ["<unk>", "<s>", "</s>", "<0x00>", "<...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,32000]   = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,32000]   = [2, 3, 3, 6, 6, 6, 6, 6, 6, 6, 6, 6, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 1
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 2
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 0
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% for message in mess...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - type  f32:   65 tensors
llama_model_loader: - type q4_K:  193 tensors
llama_model_loader: - type q6_K:   33 tensors
print_info: file format = GGUF V3 (latest)
print_info: file type   = Q4_K - Medium
print_info: file size   = 4.07 GiB (4.83 BPW) 
init_tokenizer: initializing tokenizer for type 1
load: control token:      2 '</s>' is not marked as EOG
load: control token:      1 '<s>' is not marked as EOG
load: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
load: printing all EOG tokens:
load:   - 2 ('</s>')
load: special tokens cache size = 3
load: token to piece cache size = 0.1637 MB
print_info: arch             = llama
print_info: vocab_only       = 0
print_info: n_ctx_train      = 32768
print_info: n_embd           = 4096
print_info: n_layer          = 32
print_info: n_head           = 32
print_info: n_head_kv        = 8
print_info: n_rot            = 128
print_info: n_swa            = 0
print_info: is_swa_any       = 0
print_info: n_embd_head_k    = 128
print_info: n_embd_head_v    = 128
print_info: n_gqa            = 4
print_info: n_embd_k_gqa     = 1024
print_info: n_embd_v_gqa     = 1024
print_info: f_norm_eps       = 0.0e+00
print_info: f_norm_rms_eps   = 1.0e-05
print_info: f_clamp_kqv      = 0.0e+00
print_info: f_max_alibi_bias = 0.0e+00
print_info: f_logit_scale    = 0.0e+00
print_info: f_attn_scale     = 0.0e+00
print_info: n_ff             = 14336
print_info: n_expert         = 0
print_info: n_expert_used    = 0
print_info: causal attn      = 1
print_info: pooling type     = 0
print_info: rope type        = 0
print_info: rope scaling     = linear
print_info: freq_base_train  = 1000000.0
print_info: freq_scale_train = 1
print_info: n_ctx_orig_yarn  = 32768
print_info: rope_finetuned   = unknown
print_info: model type       = 7B
print_info: model params     = 7.24 B
print_info: general.name     = mistralai_mistral-7b-instruct-v0.2
print_info: vocab type       = SPM
print_info: n_vocab          = 32000
print_info: n_merges         = 0
print_info: BOS token        = 1 '<s>'
print_info: EOS token        = 2 '</s>'
print_info: UNK token        = 0 '<unk>'
print_info: PAD token        = 0 '<unk>'
print_info: LF token         = 13 '<0x0A>'
print_info: EOG token        = 2 '</s>'
print_info: max token length = 48
load_tensors: loading model tensors, this can take a while... (mmap = true)
load_tensors: layer   0 assigned to device CPU, is_swa = 0
load_tensors: layer   1 assigned to device CPU, is_swa = 0
load_tensors: layer   2 assigned to device CPU, is_swa = 0
load_tensors: layer   3 assigned to device CPU, is_swa = 0
load_tensors: layer   4 assigned to device CPU, is_swa = 0
load_tensors: layer   5 assigned to device CPU, is_swa = 0
load_tensors: layer   6 assigned to device CPU, is_swa = 0
load_tensors: layer   7 assigned to device CPU, is_swa = 0
load_tensors: layer   8 assigned to device CPU, is_swa = 0
load_tensors: layer   9 assigned to device CPU, is_swa = 0
load_tensors: layer  10 assigned to device CPU, is_swa = 0
load_tensors: layer  11 assigned to device CPU, is_swa = 0
load_tensors: layer  12 assigned to device CPU, is_swa = 0
load_tensors: layer  13 assigned to device CPU, is_swa = 0
load_tensors: layer  14 assigned to device CPU, is_swa = 0
load_tensors: layer  15 assigned to device CPU, is_swa = 0
load_tensors: layer  16 assigned to device CPU, is_swa = 0
load_tensors: layer  17 assigned to device CPU, is_swa = 0
load_tensors: layer  18 assigned to device CPU, is_swa = 0
load_tensors: layer  19 assigned to device CPU, is_swa = 0
load_tensors: layer  20 assigned to device CPU, is_swa = 0
load_tensors: layer  21 assigned to device CPU, is_swa = 0
load_tensors: layer  22 assigned to device CPU, is_swa = 0
load_tensors: layer  23 assigned to device CPU, is_swa = 0
load_tensors: layer  24 assigned to device CPU, is_swa = 0
load_tensors: layer  25 assigned to device CPU, is_swa = 0
load_tensors: layer  26 assigned to device CPU, is_swa = 0
load_tensors: layer  27 assigned to device CPU, is_swa = 0
load_tensors: layer  28 assigned to device CPU, is_swa = 0
load_tensors: layer  29 assigned to device CPU, is_swa = 0
load_tensors: layer  30 assigned to device CPU, is_swa = 0
load_tensors: layer  31 assigned to device CPU, is_swa = 0
load_tensors: layer  32 assigned to device CPU, is_swa = 0
load_tensors: tensor 'token_embd.weight' (q4_K) (and 98 others) cannot be used with preferred buffer type CPU_REPACK, using CPU instead
load_tensors:   CPU_REPACK model buffer size =  3204.00 MiB
load_tensors:   CPU_Mapped model buffer size =  4165.37 MiB
repack: repack tensor blk.0.attn_q.weight with q4_K_8x8
repack: repack tensor blk.0.attn_k.weight with q4_K_8x8
repack: repack tensor blk.0.attn_output.weight with q4_K_8x8
repack: repack tensor blk.0.ffn_gate.weight with q4_K_8x8
.repack: repack tensor blk.0.ffn_up.weight with q4_K_8x8
repack: repack tensor blk.1.attn_q.weight with q4_K_8x8
.repack: repack tensor blk.1.attn_k.weight with q4_K_8x8
repack: repack tensor blk.1.attn_output.weight with q4_K_8x8
repack: repack tensor blk.1.ffn_gate.weight with q4_K_8x8
.repack: repack tensor blk.1.ffn_up.weight with q4_K_8x8
repack: repack tensor blk.2.attn_q.weight with q4_K_8x8
.repack: repack tensor blk.2.attn_k.weight with q4_K_8x8
repack: repack tensor blk.2.attn_output.weight with q4_K_8x8
repack: repack tensor blk.2.ffn_gate.weight with q4_K_8x8
.repack: repack tensor blk.2.ffn_up.weight with q4_K_8x8
repack: repack tensor blk.3.attn_q.weight with q4_K_8x8
.repack: repack tensor blk.3.attn_k.weight with q4_K_8x8
repack: repack tensor blk.3.attn_output.weight with q4_K_8x8
repack: repack tensor blk.3.ffn_gate.weight with q4_K_8x8
.repack: repack tensor blk.3.ffn_up.weight with q4_K_8x8
repack: repack tensor blk.4.attn_q.weight with q4_K_8x8
.repack: repack tensor blk.4.attn_k.weight with q4_K_8x8
repack: repack tensor blk.4.attn_v.weight with q4_K_8x8
repack: repack tensor blk.4.attn_output.weight with q4_K_8x8
repack: repack tensor blk.4.ffn_gate.weight with q4_K_8x8
.repack: repack tensor blk.4.ffn_down.weight with q4_K_8x8
.repack: repack tensor blk.4.ffn_up.weight with q4_K_8x8
repack: repack tensor blk.5.attn_q.weight with q4_K_8x8
.repack: repack tensor blk.5.attn_k.weight with q4_K_8x8
repack: repack tensor blk.5.attn_v.weight with q4_K_8x8
repack: repack tensor blk.5.attn_output.weight with q4_K_8x8
repack: repack tensor blk.5.ffn_gate.weight with q4_K_8x8
.repack: repack tensor blk.5.ffn_down.weight with q4_K_8x8
repack: repack tensor blk.5.ffn_up.weight with q4_K_8x8
.repack: repack tensor blk.6.attn_q.weight with q4_K_8x8
repack: repack tensor blk.6.attn_k.weight with q4_K_8x8
repack: repack tensor blk.6.attn_output.weight with q4_K_8x8
.repack: repack tensor blk.6.ffn_gate.weight with q4_K_8x8
repack: repack tensor blk.6.ffn_up.weight with q4_K_8x8
.repack: repack tensor blk.7.attn_q.weight with q4_K_8x8
repack: repack tensor blk.7.attn_k.weight with q4_K_8x8
repack: repack tensor blk.7.attn_v.weight with q4_K_8x8
repack: repack tensor blk.7.attn_output.weight with q4_K_8x8
.repack: repack tensor blk.7.ffn_gate.weight with q4_K_8x8
repack: repack tensor blk.7.ffn_down.weight with q4_K_8x8
.repack: repack tensor blk.7.ffn_up.weight with q4_K_8x8
.repack: repack tensor blk.8.attn_q.weight with q4_K_8x8
repack: repack tensor blk.8.attn_k.weight with q4_K_8x8
repack: repack tensor blk.8.attn_v.weight with q4_K_8x8
repack: repack tensor blk.8.attn_output.weight with q4_K_8x8
repack: repack tensor blk.8.ffn_gate.weight with q4_K_8x8
.repack: repack tensor blk.8.ffn_down.weight with q4_K_8x8
.repack: repack tensor blk.8.ffn_up.weight with q4_K_8x8
.repack: repack tensor blk.9.attn_q.weight with q4_K_8x8
repack: repack tensor blk.9.attn_k.weight with q4_K_8x8
repack: repack tensor blk.9.attn_output.weight with q4_K_8x8
repack: repack tensor blk.9.ffn_gate.weight with q4_K_8x8
.repack: repack tensor blk.9.ffn_up.weight with q4_K_8x8
.repack: repack tensor blk.10.attn_q.weight with q4_K_8x8
repack: repack tensor blk.10.attn_k.weight with q4_K_8x8
repack: repack tensor blk.10.attn_v.weight with q4_K_8x8
repack: repack tensor blk.10.attn_output.weight with q4_K_8x8
repack: repack tensor blk.10.ffn_gate.weight with q4_K_8x8
.repack: repack tensor blk.10.ffn_down.weight with q4_K_8x8
.repack: repack tensor blk.10.ffn_up.weight with q4_K_8x8
.repack: repack tensor blk.11.attn_q.weight with q4_K_8x8
repack: repack tensor blk.11.attn_k.weight with q4_K_8x8
repack: repack tensor blk.11.attn_v.weight with q4_K_8x8
repack: repack tensor blk.11.attn_output.weight with q4_K_8x8
repack: repack tensor blk.11.ffn_gate.weight with q4_K_8x8
.repack: repack tensor blk.11.ffn_down.weight with q4_K_8x8
.repack: repack tensor blk.11.ffn_up.weight with q4_K_8x8
repack: repack tensor blk.12.attn_q.weight with q4_K_8x8
.repack: repack tensor blk.12.attn_k.weight with q4_K_8x8
repack: repack tensor blk.12.attn_output.weight with q4_K_8x8
repack: repack tensor blk.12.ffn_gate.weight with q4_K_8x8
.repack: repack tensor blk.12.ffn_up.weight with q4_K_8x8
repack: repack tensor blk.13.attn_q.weight with q4_K_8x8
.repack: repack tensor blk.13.attn_k.weight with q4_K_8x8
repack: repack tensor blk.13.attn_v.weight with q4_K_8x8
repack: repack tensor blk.13.attn_output.weight with q4_K_8x8
repack: repack tensor blk.13.ffn_gate.weight with q4_K_8x8
.repack: repack tensor blk.13.ffn_down.weight with q4_K_8x8
repack: repack tensor blk.13.ffn_up.weight with q4_K_8x8
.repack: repack tensor blk.14.attn_q.weight with q4_K_8x8
repack: repack tensor blk.14.attn_k.weight with q4_K_8x8
repack: repack tensor blk.14.attn_v.weight with q4_K_8x8
repack: repack tensor blk.14.attn_output.weight with q4_K_8x8
.repack: repack tensor blk.14.ffn_gate.weight with q4_K_8x8
repack: repack tensor blk.14.ffn_down.weight with q4_K_8x8
.repack: repack tensor blk.14.ffn_up.weight with q4_K_8x8
.repack: repack tensor blk.15.attn_q.weight with q4_K_8x8
repack: repack tensor blk.15.attn_k.weight with q4_K_8x8
repack: repack tensor blk.15.attn_output.weight with q4_K_8x8
repack: repack tensor blk.15.ffn_gate.weight with q4_K_8x8
.repack: repack tensor blk.15.ffn_up.weight with q4_K_8x8
.repack: repack tensor blk.16.attn_q.weight with q4_K_8x8
repack: repack tensor blk.16.attn_k.weight with q4_K_8x8
repack: repack tensor blk.16.attn_v.weight with q4_K_8x8
repack: repack tensor blk.16.attn_output.weight with q4_K_8x8
.repack: repack tensor blk.16.ffn_gate.weight with q4_K_8x8
repack: repack tensor blk.16.ffn_down.weight with q4_K_8x8
.repack: repack tensor blk.16.ffn_up.weight with q4_K_8x8
.repack: repack tensor blk.17.attn_q.weight with q4_K_8x8
repack: repack tensor blk.17.attn_k.weight with q4_K_8x8
repack: repack tensor blk.17.attn_v.weight with q4_K_8x8
repack: repack tensor blk.17.attn_output.weight with q4_K_8x8
repack: repack tensor blk.17.ffn_gate.weight with q4_K_8x8
.repack: repack tensor blk.17.ffn_down.weight with q4_K_8x8
.repack: repack tensor blk.17.ffn_up.weight with q4_K_8x8
.repack: repack tensor blk.18.attn_q.weight with q4_K_8x8
repack: repack tensor blk.18.attn_k.weight with q4_K_8x8
repack: repack tensor blk.18.attn_output.weight with q4_K_8x8
repack: repack tensor blk.18.ffn_gate.weight with q4_K_8x8
.repack: repack tensor blk.18.ffn_up.weight with q4_K_8x8
.repack: repack tensor blk.19.attn_q.weight with q4_K_8x8
repack: repack tensor blk.19.attn_k.weight with q4_K_8x8
repack: repack tensor blk.19.attn_v.weight with q4_K_8x8
repack: repack tensor blk.19.attn_output.weight with q4_K_8x8
repack: repack tensor blk.19.ffn_gate.weight with q4_K_8x8
.repack: repack tensor blk.19.ffn_down.weight with q4_K_8x8
.repack: repack tensor blk.19.ffn_up.weight with q4_K_8x8
repack: repack tensor blk.20.attn_q.weight with q4_K_8x8
.repack: repack tensor blk.20.attn_k.weight with q4_K_8x8
repack: repack tensor blk.20.attn_v.weight with q4_K_8x8
repack: repack tensor blk.20.attn_output.weight with q4_K_8x8
repack: repack tensor blk.20.ffn_gate.weight with q4_K_8x8
.repack: repack tensor blk.20.ffn_down.weight with q4_K_8x8
repack: repack tensor blk.20.ffn_up.weight with q4_K_8x8
.repack: repack tensor blk.21.attn_q.weight with q4_K_8x8
repack: repack tensor blk.21.attn_k.weight with q4_K_8x8
repack: repack tensor blk.21.attn_output.weight with q4_K_8x8
.repack: repack tensor blk.21.ffn_gate.weight with q4_K_8x8
repack: repack tensor blk.21.ffn_up.weight with q4_K_8x8
.repack: repack tensor blk.22.attn_q.weight with q4_K_8x8
repack: repack tensor blk.22.attn_k.weight with q4_K_8x8
repack: repack tensor blk.22.attn_v.weight with q4_K_8x8
.repack: repack tensor blk.22.attn_output.weight with q4_K_8x8
repack: repack tensor blk.22.ffn_gate.weight with q4_K_8x8
repack: repack tensor blk.22.ffn_down.weight with q4_K_8x8
.repack: repack tensor blk.22.ffn_up.weight with q4_K_8x8
.repack: repack tensor blk.23.attn_q.weight with q4_K_8x8
repack: repack tensor blk.23.attn_k.weight with q4_K_8x8
repack: repack tensor blk.23.attn_v.weight with q4_K_8x8
repack: repack tensor blk.23.attn_output.weight with q4_K_8x8
.repack: repack tensor blk.23.ffn_gate.weight with q4_K_8x8
repack: repack tensor blk.23.ffn_down.weight with q4_K_8x8
.repack: repack tensor blk.23.ffn_up.weight with q4_K_8x8
.repack: repack tensor blk.24.attn_q.weight with q4_K_8x8
repack: repack tensor blk.24.attn_k.weight with q4_K_8x8
repack: repack tensor blk.24.attn_output.weight with q4_K_8x8
repack: repack tensor blk.24.ffn_gate.weight with q4_K_8x8
.repack: repack tensor blk.24.ffn_up.weight with q4_K_8x8
.repack: repack tensor blk.25.attn_q.weight with q4_K_8x8
repack: repack tensor blk.25.attn_k.weight with q4_K_8x8
repack: repack tensor blk.25.attn_v.weight with q4_K_8x8
repack: repack tensor blk.25.attn_output.weight with q4_K_8x8
repack: repack tensor blk.25.ffn_gate.weight with q4_K_8x8
.repack: repack tensor blk.25.ffn_down.weight with q4_K_8x8
.repack: repack tensor blk.25.ffn_up.weight with q4_K_8x8
.repack: repack tensor blk.26.attn_q.weight with q4_K_8x8
repack: repack tensor blk.26.attn_k.weight with q4_K_8x8
repack: repack tensor blk.26.attn_v.weight with q4_K_8x8
repack: repack tensor blk.26.attn_output.weight with q4_K_8x8
repack: repack tensor blk.26.ffn_gate.weight with q4_K_8x8
.repack: repack tensor blk.26.ffn_down.weight with q4_K_8x8
.repack: repack tensor blk.26.ffn_up.weight with q4_K_8x8
repack: repack tensor blk.27.attn_q.weight with q4_K_8x8
.repack: repack tensor blk.27.attn_k.weight with q4_K_8x8
repack: repack tensor blk.27.attn_output.weight with q4_K_8x8
repack: repack tensor blk.27.ffn_gate.weight with q4_K_8x8
.repack: repack tensor blk.27.ffn_up.weight with q4_K_8x8
repack: repack tensor blk.28.attn_q.weight with q4_K_8x8
.repack: repack tensor blk.28.attn_k.weight with q4_K_8x8
repack: repack tensor blk.28.attn_output.weight with q4_K_8x8
repack: repack tensor blk.28.ffn_gate.weight with q4_K_8x8
.repack: repack tensor blk.28.ffn_up.weight with q4_K_8x8
repack: repack tensor blk.29.attn_q.weight with q4_K_8x8
.repack: repack tensor blk.29.attn_k.weight with q4_K_8x8
repack: repack tensor blk.29.attn_output.weight with q4_K_8x8
repack: repack tensor blk.29.ffn_gate.weight with q4_K_8x8
.repack: repack tensor blk.29.ffn_up.weight with q4_K_8x8
repack: repack tensor blk.30.attn_q.weight with q4_K_8x8
.repack: repack tensor blk.30.attn_k.weight with q4_K_8x8
repack: repack tensor blk.30.attn_output.weight with q4_K_8x8
repack: repack tensor blk.30.ffn_gate.weight with q4_K_8x8
.repack: repack tensor blk.30.ffn_up.weight with q4_K_8x8
repack: repack tensor blk.31.attn_q.weight with q4_K_8x8
.repack: repack tensor blk.31.attn_k.weight with q4_K_8x8
repack: repack tensor blk.31.attn_output.weight with q4_K_8x8
repack: repack tensor blk.31.ffn_gate.weight with q4_K_8x8
.repack: repack tensor blk.31.ffn_up.weight with q4_K_8x8
...................
llama_context: constructing llama_context
llama_context: n_batch is less than GGML_KQ_MASK_PAD - increasing to 64
llama_context: n_seq_max     = 1
llama_context: n_ctx         = 2048
llama_context: n_ctx_per_seq = 2048
llama_context: n_batch       = 64
llama_context: n_ubatch      = 8
llama_context: causal_attn   = 1
llama_context: flash_attn    = 0
llama_context: kv_unified    = false
llama_context: freq_base     = 1000000.0
llama_context: freq_scale    = 1
llama_context: n_ctx_per_seq (2048) < n_ctx_train (32768) -- the full capacity of the model will not be utilized
set_abort_callback: call
llama_context:        CPU  output buffer size =     0.12 MiB
create_memory: n_ctx = 2048 (padded)
llama_kv_cache_unified: layer   0: dev = CPU
llama_kv_cache_unified: layer   1: dev = CPU
llama_kv_cache_unified: layer   2: dev = CPU
llama_kv_cache_unified: layer   3: dev = CPU
llama_kv_cache_unified: layer   4: dev = CPU
llama_kv_cache_unified: layer   5: dev = CPU
llama_kv_cache_unified: layer   6: dev = CPU
llama_kv_cache_unified: layer   7: dev = CPU
llama_kv_cache_unified: layer   8: dev = CPU
llama_kv_cache_unified: layer   9: dev = CPU
llama_kv_cache_unified: layer  10: dev = CPU
llama_kv_cache_unified: layer  11: dev = CPU
llama_kv_cache_unified: layer  12: dev = CPU
llama_kv_cache_unified: layer  13: dev = CPU
llama_kv_cache_unified: layer  14: dev = CPU
llama_kv_cache_unified: layer  15: dev = CPU
llama_kv_cache_unified: layer  16: dev = CPU
llama_kv_cache_unified: layer  17: dev = CPU
llama_kv_cache_unified: layer  18: dev = CPU
llama_kv_cache_unified: layer  19: dev = CPU
llama_kv_cache_unified: layer  20: dev = CPU
llama_kv_cache_unified: layer  21: dev = CPU
llama_kv_cache_unified: layer  22: dev = CPU
llama_kv_cache_unified: layer  23: dev = CPU
llama_kv_cache_unified: layer  24: dev = CPU
llama_kv_cache_unified: layer  25: dev = CPU
llama_kv_cache_unified: layer  26: dev = CPU
llama_kv_cache_unified: layer  27: dev = CPU
llama_kv_cache_unified: layer  28: dev = CPU
llama_kv_cache_unified: layer  29: dev = CPU
llama_kv_cache_unified: layer  30: dev = CPU
llama_kv_cache_unified: layer  31: dev = CPU
llama_kv_cache_unified:        CPU KV buffer size =   256.00 MiB
llama_kv_cache_unified: size =  256.00 MiB (  2048 cells,  32 layers,  1/1 seqs), K (f16):  128.00 MiB, V (f16):  128.00 MiB
llama_context: enumerating backends
llama_context: backend_ptrs.size() = 1
llama_context: max_nodes = 2328
llama_context: worst-case: n_tokens = 8, n_seqs = 1, n_outputs = 0
graph_reserve: reserving a graph for ubatch with n_tokens =    8, n_seqs =  1, n_outputs =    8
graph_reserve: reserving a graph for ubatch with n_tokens =    1, n_seqs =  1, n_outputs =    1
graph_reserve: reserving a graph for ubatch with n_tokens =    8, n_seqs =  1, n_outputs =    8
llama_context:        CPU compute buffer size =     3.06 MiB
llama_context: graph nodes  = 1126
llama_context: graph splits = 1
CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | LLAMAFILE = 1 | OPENMP = 1 | REPACK = 1 | 
Model metadata: {'general.name': 'mistralai_mistral-7b-instruct-v0.2', 'general.architecture': 'llama', 'llama.context_length': '32768', 'llama.rope.dimension_count': '128', 'llama.embedding_length': '4096', 'llama.block_count': '32', 'llama.feed_forward_length': '14336', 'llama.attention.head_count': '32', 'tokenizer.ggml.eos_token_id': '2', 'general.file_type': '15', 'llama.attention.head_count_kv': '8', 'llama.attention.layer_norm_rms_epsilon': '0.000010', 'llama.rope.freq_base': '1000000.000000', 'tokenizer.ggml.model': 'llama', 'general.quantization_version': '2', 'tokenizer.ggml.bos_token_id': '1', 'tokenizer.ggml.unknown_token_id': '0', 'tokenizer.ggml.padding_token_id': '0', 'tokenizer.ggml.add_bos_token': 'true', 'tokenizer.ggml.add_eos_token': 'false', 'tokenizer.chat_template': "{{ bos_token }}{% for message in messages %}{% if (message['role'] == 'user') != (loop.index0 % 2 == 0) %}{{ raise_exception('Conversation roles must alternate user/assistant/user/assistant/...') }}{% endif %}{% if message['role'] == 'user' %}{{ '[INST] ' + message['content'] + ' [/INST]' }}{% elif message['role'] == 'assistant' %}{{ message['content'] + eos_token}}{% else %}{{ raise_exception('Only user and assistant roles are supported!') }}{% endif %}{% endfor %}"}
Available chat formats from metadata: chat_template.default
Guessed chat format: mistral-instruct
Building index from SQLite database...
Loading embedding model: intfloat/e5-small-v2 on CPU
Index saved to faiss_index
LLM is explicitly disabled. Using MockLLM.
llama_model_loader: loaded meta data with 24 key-value pairs and 291 tensors from C:/Users/Prakhar Srivastava/Desktop/AskQuery/models/Mistral/mistral-7b-instruct-v0.2.Q4_K_M.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = llama
llama_model_loader: - kv   1:                               general.name str              = mistralai_mistral-7b-instruct-v0.2
llama_model_loader: - kv   2:                       llama.context_length u32              = 32768
llama_model_loader: - kv   3:                     llama.embedding_length u32              = 4096
llama_model_loader: - kv   4:                          llama.block_count u32              = 32
llama_model_loader: - kv   5:                  llama.feed_forward_length u32              = 14336
llama_model_loader: - kv   6:                 llama.rope.dimension_count u32              = 128
llama_model_loader: - kv   7:                 llama.attention.head_count u32              = 32
llama_model_loader: - kv   8:              llama.attention.head_count_kv u32              = 8
llama_model_loader: - kv   9:     llama.attention.layer_norm_rms_epsilon f32              = 0.000010
llama_model_loader: - kv  10:                       llama.rope.freq_base f32              = 1000000.000000
llama_model_loader: - kv  11:                          general.file_type u32              = 15
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,32000]   = ["<unk>", "<s>", "</s>", "<0x00>", "<...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,32000]   = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,32000]   = [2, 3, 3, 6, 6, 6, 6, 6, 6, 6, 6, 6, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 1
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 2
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 0
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% for message in mess...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - type  f32:   65 tensors
llama_model_loader: - type q4_K:  193 tensors
llama_model_loader: - type q6_K:   33 tensors
print_info: file format = GGUF V3 (latest)
print_info: file type   = Q4_K - Medium
print_info: file size   = 4.07 GiB (4.83 BPW) 
init_tokenizer: initializing tokenizer for type 1
load: control token:      2 '</s>' is not marked as EOG
load: control token:      1 '<s>' is not marked as EOG
load: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
load: printing all EOG tokens:
load:   - 2 ('</s>')
load: special tokens cache size = 3
load: token to piece cache size = 0.1637 MB
print_info: arch             = llama
print_info: vocab_only       = 0
print_info: n_ctx_train      = 32768
print_info: n_embd           = 4096
print_info: n_layer          = 32
print_info: n_head           = 32
print_info: n_head_kv        = 8
print_info: n_rot            = 128
print_info: n_swa            = 0
print_info: is_swa_any       = 0
print_info: n_embd_head_k    = 128
print_info: n_embd_head_v    = 128
print_info: n_gqa            = 4
print_info: n_embd_k_gqa     = 1024
print_info: n_embd_v_gqa     = 1024
print_info: f_norm_eps       = 0.0e+00
print_info: f_norm_rms_eps   = 1.0e-05
print_info: f_clamp_kqv      = 0.0e+00
print_info: f_max_alibi_bias = 0.0e+00
print_info: f_logit_scale    = 0.0e+00
print_info: f_attn_scale     = 0.0e+00
print_info: n_ff             = 14336
print_info: n_expert         = 0
print_info: n_expert_used    = 0
print_info: causal attn      = 1
print_info: pooling type     = 0
print_info: rope type        = 0
print_info: rope scaling     = linear
print_info: freq_base_train  = 1000000.0
print_info: freq_scale_train = 1
print_info: n_ctx_orig_yarn  = 32768
print_info: rope_finetuned   = unknown
print_info: model type       = 7B
print_info: model params     = 7.24 B
print_info: general.name     = mistralai_mistral-7b-instruct-v0.2
print_info: vocab type       = SPM
print_info: n_vocab          = 32000
print_info: n_merges         = 0
print_info: BOS token        = 1 '<s>'
print_info: EOS token        = 2 '</s>'
print_info: UNK token        = 0 '<unk>'
print_info: PAD token        = 0 '<unk>'
print_info: LF token         = 13 '<0x0A>'
print_info: EOG token        = 2 '</s>'
print_info: max token length = 48
load_tensors: loading model tensors, this can take a while... (mmap = true)
load_tensors: layer   0 assigned to device CPU, is_swa = 0
load_tensors: layer   1 assigned to device CPU, is_swa = 0
load_tensors: layer   2 assigned to device CPU, is_swa = 0
load_tensors: layer   3 assigned to device CPU, is_swa = 0
load_tensors: layer   4 assigned to device CPU, is_swa = 0
load_tensors: layer   5 assigned to device CPU, is_swa = 0
load_tensors: layer   6 assigned to device CPU, is_swa = 0
load_tensors: layer   7 assigned to device CPU, is_swa = 0
load_tensors: layer   8 assigned to device CPU, is_swa = 0
load_tensors: layer   9 assigned to device CPU, is_swa = 0
load_tensors: layer  10 assigned to device CPU, is_swa = 0
load_tensors: layer  11 assigned to device CPU, is_swa = 0
load_tensors: layer  12 assigned to device CPU, is_swa = 0
load_tensors: layer  13 assigned to device CPU, is_swa = 0
load_tensors: layer  14 assigned to device CPU, is_swa = 0
load_tensors: layer  15 assigned to device CPU, is_swa = 0
load_tensors: layer  16 assigned to device CPU, is_swa = 0
load_tensors: layer  17 assigned to device CPU, is_swa = 0
load_tensors: layer  18 assigned to device CPU, is_swa = 0
load_tensors: layer  19 assigned to device CPU, is_swa = 0
load_tensors: layer  20 assigned to device CPU, is_swa = 0
load_tensors: layer  21 assigned to device CPU, is_swa = 0
load_tensors: layer  22 assigned to device CPU, is_swa = 0
load_tensors: layer  23 assigned to device CPU, is_swa = 0
load_tensors: layer  24 assigned to device CPU, is_swa = 0
load_tensors: layer  25 assigned to device CPU, is_swa = 0
load_tensors: layer  26 assigned to device CPU, is_swa = 0
load_tensors: layer  27 assigned to device CPU, is_swa = 0
load_tensors: layer  28 assigned to device CPU, is_swa = 0
load_tensors: layer  29 assigned to device CPU, is_swa = 0
load_tensors: layer  30 assigned to device CPU, is_swa = 0
load_tensors: layer  31 assigned to device CPU, is_swa = 0
load_tensors: layer  32 assigned to device CPU, is_swa = 0
load_tensors: tensor 'token_embd.weight' (q4_K) (and 98 others) cannot be used with preferred buffer type CPU_REPACK, using CPU instead
load_tensors:   CPU_REPACK model buffer size =  3204.00 MiB
load_tensors:   CPU_Mapped model buffer size =  4165.37 MiB
repack: repack tensor blk.0.attn_q.weight with q4_K_8x8
repack: repack tensor blk.0.attn_k.weight with q4_K_8x8
repack: repack tensor blk.0.attn_output.weight with q4_K_8x8
repack: repack tensor blk.0.ffn_gate.weight with q4_K_8x8
.repack: repack tensor blk.0.ffn_up.weight with q4_K_8x8
repack: repack tensor blk.1.attn_q.weight with q4_K_8x8
.repack: repack tensor blk.1.attn_k.weight with q4_K_8x8
repack: repack tensor blk.1.attn_output.weight with q4_K_8x8
repack: repack tensor blk.1.ffn_gate.weight with q4_K_8x8
.repack: repack tensor blk.1.ffn_up.weight with q4_K_8x8
repack: repack tensor blk.2.attn_q.weight with q4_K_8x8
.repack: repack tensor blk.2.attn_k.weight with q4_K_8x8
repack: repack tensor blk.2.attn_output.weight with q4_K_8x8
repack: repack tensor blk.2.ffn_gate.weight with q4_K_8x8
.repack: repack tensor blk.2.ffn_up.weight with q4_K_8x8
repack: repack tensor blk.3.attn_q.weight with q4_K_8x8
.repack: repack tensor blk.3.attn_k.weight with q4_K_8x8
repack: repack tensor blk.3.attn_output.weight with q4_K_8x8
repack: repack tensor blk.3.ffn_gate.weight with q4_K_8x8
.repack: repack tensor blk.3.ffn_up.weight with q4_K_8x8
repack: repack tensor blk.4.attn_q.weight with q4_K_8x8
.repack: repack tensor blk.4.attn_k.weight with q4_K_8x8
repack: repack tensor blk.4.attn_v.weight with q4_K_8x8
repack: repack tensor blk.4.attn_output.weight with q4_K_8x8
repack: repack tensor blk.4.ffn_gate.weight with q4_K_8x8
.repack: repack tensor blk.4.ffn_down.weight with q4_K_8x8
.repack: repack tensor blk.4.ffn_up.weight with q4_K_8x8
repack: repack tensor blk.5.attn_q.weight with q4_K_8x8
.repack: repack tensor blk.5.attn_k.weight with q4_K_8x8
repack: repack tensor blk.5.attn_v.weight with q4_K_8x8
repack: repack tensor blk.5.attn_output.weight with q4_K_8x8
repack: repack tensor blk.5.ffn_gate.weight with q4_K_8x8
.repack: repack tensor blk.5.ffn_down.weight with q4_K_8x8
repack: repack tensor blk.5.ffn_up.weight with q4_K_8x8
.repack: repack tensor blk.6.attn_q.weight with q4_K_8x8
repack: repack tensor blk.6.attn_k.weight with q4_K_8x8
repack: repack tensor blk.6.attn_output.weight with q4_K_8x8
.repack: repack tensor blk.6.ffn_gate.weight with q4_K_8x8
repack: repack tensor blk.6.ffn_up.weight with q4_K_8x8
.repack: repack tensor blk.7.attn_q.weight with q4_K_8x8
repack: repack tensor blk.7.attn_k.weight with q4_K_8x8
repack: repack tensor blk.7.attn_v.weight with q4_K_8x8
repack: repack tensor blk.7.attn_output.weight with q4_K_8x8
.repack: repack tensor blk.7.ffn_gate.weight with q4_K_8x8
repack: repack tensor blk.7.ffn_down.weight with q4_K_8x8
.repack: repack tensor blk.7.ffn_up.weight with q4_K_8x8
.repack: repack tensor blk.8.attn_q.weight with q4_K_8x8
repack: repack tensor blk.8.attn_k.weight with q4_K_8x8
repack: repack tensor blk.8.attn_v.weight with q4_K_8x8
repack: repack tensor blk.8.attn_output.weight with q4_K_8x8
repack: repack tensor blk.8.ffn_gate.weight with q4_K_8x8
.repack: repack tensor blk.8.ffn_down.weight with q4_K_8x8
.repack: repack tensor blk.8.ffn_up.weight with q4_K_8x8
.repack: repack tensor blk.9.attn_q.weight with q4_K_8x8
repack: repack tensor blk.9.attn_k.weight with q4_K_8x8
repack: repack tensor blk.9.attn_output.weight with q4_K_8x8
repack: repack tensor blk.9.ffn_gate.weight with q4_K_8x8
.repack: repack tensor blk.9.ffn_up.weight with q4_K_8x8
.repack: repack tensor blk.10.attn_q.weight with q4_K_8x8
repack: repack tensor blk.10.attn_k.weight with q4_K_8x8
repack: repack tensor blk.10.attn_v.weight with q4_K_8x8
repack: repack tensor blk.10.attn_output.weight with q4_K_8x8
repack: repack tensor blk.10.ffn_gate.weight with q4_K_8x8
.repack: repack tensor blk.10.ffn_down.weight with q4_K_8x8
.repack: repack tensor blk.10.ffn_up.weight with q4_K_8x8
.repack: repack tensor blk.11.attn_q.weight with q4_K_8x8
repack: repack tensor blk.11.attn_k.weight with q4_K_8x8
repack: repack tensor blk.11.attn_v.weight with q4_K_8x8
repack: repack tensor blk.11.attn_output.weight with q4_K_8x8
repack: repack tensor blk.11.ffn_gate.weight with q4_K_8x8
.repack: repack tensor blk.11.ffn_down.weight with q4_K_8x8
.repack: repack tensor blk.11.ffn_up.weight with q4_K_8x8
repack: repack tensor blk.12.attn_q.weight with q4_K_8x8
.repack: repack tensor blk.12.attn_k.weight with q4_K_8x8
repack: repack tensor blk.12.attn_output.weight with q4_K_8x8
repack: repack tensor blk.12.ffn_gate.weight with q4_K_8x8
.repack: repack tensor blk.12.ffn_up.weight with q4_K_8x8
repack: repack tensor blk.13.attn_q.weight with q4_K_8x8
.repack: repack tensor blk.13.attn_k.weight with q4_K_8x8
repack: repack tensor blk.13.attn_v.weight with q4_K_8x8
repack: repack tensor blk.13.attn_output.weight with q4_K_8x8
repack: repack tensor blk.13.ffn_gate.weight with q4_K_8x8
.repack: repack tensor blk.13.ffn_down.weight with q4_K_8x8
repack: repack tensor blk.13.ffn_up.weight with q4_K_8x8
.repack: repack tensor blk.14.attn_q.weight with q4_K_8x8
repack: repack tensor blk.14.attn_k.weight with q4_K_8x8
repack: repack tensor blk.14.attn_v.weight with q4_K_8x8
repack: repack tensor blk.14.attn_output.weight with q4_K_8x8
.repack: repack tensor blk.14.ffn_gate.weight with q4_K_8x8
repack: repack tensor blk.14.ffn_down.weight with q4_K_8x8
.repack: repack tensor blk.14.ffn_up.weight with q4_K_8x8
.repack: repack tensor blk.15.attn_q.weight with q4_K_8x8
repack: repack tensor blk.15.attn_k.weight with q4_K_8x8
repack: repack tensor blk.15.attn_output.weight with q4_K_8x8
repack: repack tensor blk.15.ffn_gate.weight with q4_K_8x8
.repack: repack tensor blk.15.ffn_up.weight with q4_K_8x8
.repack: repack tensor blk.16.attn_q.weight with q4_K_8x8
repack: repack tensor blk.16.attn_k.weight with q4_K_8x8
repack: repack tensor blk.16.attn_v.weight with q4_K_8x8
repack: repack tensor blk.16.attn_output.weight with q4_K_8x8
.repack: repack tensor blk.16.ffn_gate.weight with q4_K_8x8
repack: repack tensor blk.16.ffn_down.weight with q4_K_8x8
.repack: repack tensor blk.16.ffn_up.weight with q4_K_8x8
.repack: repack tensor blk.17.attn_q.weight with q4_K_8x8
repack: repack tensor blk.17.attn_k.weight with q4_K_8x8
repack: repack tensor blk.17.attn_v.weight with q4_K_8x8
repack: repack tensor blk.17.attn_output.weight with q4_K_8x8
repack: repack tensor blk.17.ffn_gate.weight with q4_K_8x8
.repack: repack tensor blk.17.ffn_down.weight with q4_K_8x8
.repack: repack tensor blk.17.ffn_up.weight with q4_K_8x8
.repack: repack tensor blk.18.attn_q.weight with q4_K_8x8
repack: repack tensor blk.18.attn_k.weight with q4_K_8x8
repack: repack tensor blk.18.attn_output.weight with q4_K_8x8
repack: repack tensor blk.18.ffn_gate.weight with q4_K_8x8
.repack: repack tensor blk.18.ffn_up.weight with q4_K_8x8
.repack: repack tensor blk.19.attn_q.weight with q4_K_8x8
repack: repack tensor blk.19.attn_k.weight with q4_K_8x8
repack: repack tensor blk.19.attn_v.weight with q4_K_8x8
repack: repack tensor blk.19.attn_output.weight with q4_K_8x8
repack: repack tensor blk.19.ffn_gate.weight with q4_K_8x8
.repack: repack tensor blk.19.ffn_down.weight with q4_K_8x8
.repack: repack tensor blk.19.ffn_up.weight with q4_K_8x8
repack: repack tensor blk.20.attn_q.weight with q4_K_8x8
.repack: repack tensor blk.20.attn_k.weight with q4_K_8x8
repack: repack tensor blk.20.attn_v.weight with q4_K_8x8
repack: repack tensor blk.20.attn_output.weight with q4_K_8x8
repack: repack tensor blk.20.ffn_gate.weight with q4_K_8x8
.repack: repack tensor blk.20.ffn_down.weight with q4_K_8x8
repack: repack tensor blk.20.ffn_up.weight with q4_K_8x8
.repack: repack tensor blk.21.attn_q.weight with q4_K_8x8
repack: repack tensor blk.21.attn_k.weight with q4_K_8x8
repack: repack tensor blk.21.attn_output.weight with q4_K_8x8
.repack: repack tensor blk.21.ffn_gate.weight with q4_K_8x8
repack: repack tensor blk.21.ffn_up.weight with q4_K_8x8
.repack: repack tensor blk.22.attn_q.weight with q4_K_8x8
repack: repack tensor blk.22.attn_k.weight with q4_K_8x8
repack: repack tensor blk.22.attn_v.weight with q4_K_8x8
.repack: repack tensor blk.22.attn_output.weight with q4_K_8x8
repack: repack tensor blk.22.ffn_gate.weight with q4_K_8x8
repack: repack tensor blk.22.ffn_down.weight with q4_K_8x8
.repack: repack tensor blk.22.ffn_up.weight with q4_K_8x8
.repack: repack tensor blk.23.attn_q.weight with q4_K_8x8
repack: repack tensor blk.23.attn_k.weight with q4_K_8x8
repack: repack tensor blk.23.attn_v.weight with q4_K_8x8
repack: repack tensor blk.23.attn_output.weight with q4_K_8x8
.repack: repack tensor blk.23.ffn_gate.weight with q4_K_8x8
repack: repack tensor blk.23.ffn_down.weight with q4_K_8x8
.repack: repack tensor blk.23.ffn_up.weight with q4_K_8x8
.repack: repack tensor blk.24.attn_q.weight with q4_K_8x8
repack: repack tensor blk.24.attn_k.weight with q4_K_8x8
repack: repack tensor blk.24.attn_output.weight with q4_K_8x8
repack: repack tensor blk.24.ffn_gate.weight with q4_K_8x8
.repack: repack tensor blk.24.ffn_up.weight with q4_K_8x8
.repack: repack tensor blk.25.attn_q.weight with q4_K_8x8
repack: repack tensor blk.25.attn_k.weight with q4_K_8x8
repack: repack tensor blk.25.attn_v.weight with q4_K_8x8
repack: repack tensor blk.25.attn_output.weight with q4_K_8x8
repack: repack tensor blk.25.ffn_gate.weight with q4_K_8x8
.repack: repack tensor blk.25.ffn_down.weight with q4_K_8x8
.repack: repack tensor blk.25.ffn_up.weight with q4_K_8x8
.repack: repack tensor blk.26.attn_q.weight with q4_K_8x8
repack: repack tensor blk.26.attn_k.weight with q4_K_8x8
repack: repack tensor blk.26.attn_v.weight with q4_K_8x8
repack: repack tensor blk.26.attn_output.weight with q4_K_8x8
repack: repack tensor blk.26.ffn_gate.weight with q4_K_8x8
.repack: repack tensor blk.26.ffn_down.weight with q4_K_8x8
.repack: repack tensor blk.26.ffn_up.weight with q4_K_8x8
repack: repack tensor blk.27.attn_q.weight with q4_K_8x8
.repack: repack tensor blk.27.attn_k.weight with q4_K_8x8
repack: repack tensor blk.27.attn_output.weight with q4_K_8x8
repack: repack tensor blk.27.ffn_gate.weight with q4_K_8x8
.repack: repack tensor blk.27.ffn_up.weight with q4_K_8x8
repack: repack tensor blk.28.attn_q.weight with q4_K_8x8
.repack: repack tensor blk.28.attn_k.weight with q4_K_8x8
repack: repack tensor blk.28.attn_output.weight with q4_K_8x8
repack: repack tensor blk.28.ffn_gate.weight with q4_K_8x8
.repack: repack tensor blk.28.ffn_up.weight with q4_K_8x8
repack: repack tensor blk.29.attn_q.weight with q4_K_8x8
.repack: repack tensor blk.29.attn_k.weight with q4_K_8x8
repack: repack tensor blk.29.attn_output.weight with q4_K_8x8
repack: repack tensor blk.29.ffn_gate.weight with q4_K_8x8
.repack: repack tensor blk.29.ffn_up.weight with q4_K_8x8
repack: repack tensor blk.30.attn_q.weight with q4_K_8x8
.repack: repack tensor blk.30.attn_k.weight with q4_K_8x8
repack: repack tensor blk.30.attn_output.weight with q4_K_8x8
repack: repack tensor blk.30.ffn_gate.weight with q4_K_8x8
.repack: repack tensor blk.30.ffn_up.weight with q4_K_8x8
repack: repack tensor blk.31.attn_q.weight with q4_K_8x8
.repack: repack tensor blk.31.attn_k.weight with q4_K_8x8
repack: repack tensor blk.31.attn_output.weight with q4_K_8x8
repack: repack tensor blk.31.ffn_gate.weight with q4_K_8x8
.repack: repack tensor blk.31.ffn_up.weight with q4_K_8x8
...................
llama_context: constructing llama_context
llama_context: n_batch is less than GGML_KQ_MASK_PAD - increasing to 64
llama_context: n_seq_max     = 1
llama_context: n_ctx         = 2048
llama_context: n_ctx_per_seq = 2048
llama_context: n_batch       = 64
llama_context: n_ubatch      = 8
llama_context: causal_attn   = 1
llama_context: flash_attn    = 0
llama_context: kv_unified    = false
llama_context: freq_base     = 1000000.0
llama_context: freq_scale    = 1
llama_context: n_ctx_per_seq (2048) < n_ctx_train (32768) -- the full capacity of the model will not be utilized
set_abort_callback: call
llama_context:        CPU  output buffer size =     0.12 MiB
create_memory: n_ctx = 2048 (padded)
llama_kv_cache_unified: layer   0: dev = CPU
llama_kv_cache_unified: layer   1: dev = CPU
llama_kv_cache_unified: layer   2: dev = CPU
llama_kv_cache_unified: layer   3: dev = CPU
llama_kv_cache_unified: layer   4: dev = CPU
llama_kv_cache_unified: layer   5: dev = CPU
llama_kv_cache_unified: layer   6: dev = CPU
llama_kv_cache_unified: layer   7: dev = CPU
llama_kv_cache_unified: layer   8: dev = CPU
llama_kv_cache_unified: layer   9: dev = CPU
llama_kv_cache_unified: layer  10: dev = CPU
llama_kv_cache_unified: layer  11: dev = CPU
llama_kv_cache_unified: layer  12: dev = CPU
llama_kv_cache_unified: layer  13: dev = CPU
llama_kv_cache_unified: layer  14: dev = CPU
llama_kv_cache_unified: layer  15: dev = CPU
llama_kv_cache_unified: layer  16: dev = CPU
llama_kv_cache_unified: layer  17: dev = CPU
llama_kv_cache_unified: layer  18: dev = CPU
llama_kv_cache_unified: layer  19: dev = CPU
llama_kv_cache_unified: layer  20: dev = CPU
llama_kv_cache_unified: layer  21: dev = CPU
llama_kv_cache_unified: layer  22: dev = CPU
llama_kv_cache_unified: layer  23: dev = CPU
llama_kv_cache_unified: layer  24: dev = CPU
llama_kv_cache_unified: layer  25: dev = CPU
llama_kv_cache_unified: layer  26: dev = CPU
llama_kv_cache_unified: layer  27: dev = CPU
llama_kv_cache_unified: layer  28: dev = CPU
llama_kv_cache_unified: layer  29: dev = CPU
llama_kv_cache_unified: layer  30: dev = CPU
llama_kv_cache_unified: layer  31: dev = CPU
llama_kv_cache_unified:        CPU KV buffer size =   256.00 MiB
llama_kv_cache_unified: size =  256.00 MiB (  2048 cells,  32 layers,  1/1 seqs), K (f16):  128.00 MiB, V (f16):  128.00 MiB
llama_context: enumerating backends
llama_context: backend_ptrs.size() = 1
llama_context: max_nodes = 2328
llama_context: worst-case: n_tokens = 8, n_seqs = 1, n_outputs = 0
graph_reserve: reserving a graph for ubatch with n_tokens =    8, n_seqs =  1, n_outputs =    8
graph_reserve: reserving a graph for ubatch with n_tokens =    1, n_seqs =  1, n_outputs =    1
graph_reserve: reserving a graph for ubatch with n_tokens =    8, n_seqs =  1, n_outputs =    8
llama_context:        CPU compute buffer size =     3.06 MiB
llama_context: graph nodes  = 1126
llama_context: graph splits = 1
CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | LLAMAFILE = 1 | OPENMP = 1 | REPACK = 1 | 
Model metadata: {'general.name': 'mistralai_mistral-7b-instruct-v0.2', 'general.architecture': 'llama', 'llama.context_length': '32768', 'llama.rope.dimension_count': '128', 'llama.embedding_length': '4096', 'llama.block_count': '32', 'llama.feed_forward_length': '14336', 'llama.attention.head_count': '32', 'tokenizer.ggml.eos_token_id': '2', 'general.file_type': '15', 'llama.attention.head_count_kv': '8', 'llama.attention.layer_norm_rms_epsilon': '0.000010', 'llama.rope.freq_base': '1000000.000000', 'tokenizer.ggml.model': 'llama', 'general.quantization_version': '2', 'tokenizer.ggml.bos_token_id': '1', 'tokenizer.ggml.unknown_token_id': '0', 'tokenizer.ggml.padding_token_id': '0', 'tokenizer.ggml.add_bos_token': 'true', 'tokenizer.ggml.add_eos_token': 'false', 'tokenizer.chat_template': "{{ bos_token }}{% for message in messages %}{% if (message['role'] == 'user') != (loop.index0 % 2 == 0) %}{{ raise_exception('Conversation roles must alternate user/assistant/user/assistant/...') }}{% endif %}{% if message['role'] == 'user' %}{{ '[INST] ' + message['content'] + ' [/INST]' }}{% elif message['role'] == 'assistant' %}{{ message['content'] + eos_token}}{% else %}{{ raise_exception('Only user and assistant roles are supported!') }}{% endif %}{% endfor %}"}
Available chat formats from metadata: chat_template.default
Guessed chat format: mistral-instruct
Building index from SQLite database...
Loading embedding model: intfloat/e5-small-v2 on CPU
Index saved to faiss_index
llama_model_loader: loaded meta data with 24 key-value pairs and 291 tensors from C:/Users/Prakhar Srivastava/Desktop/AskQuery/models/Mistral/mistral-7b-instruct-v0.2.Q4_K_M.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = llama
llama_model_loader: - kv   1:                               general.name str              = mistralai_mistral-7b-instruct-v0.2
llama_model_loader: - kv   2:                       llama.context_length u32              = 32768
llama_model_loader: - kv   3:                     llama.embedding_length u32              = 4096
llama_model_loader: - kv   4:                          llama.block_count u32              = 32
llama_model_loader: - kv   5:                  llama.feed_forward_length u32              = 14336
llama_model_loader: - kv   6:                 llama.rope.dimension_count u32              = 128
llama_model_loader: - kv   7:                 llama.attention.head_count u32              = 32
llama_model_loader: - kv   8:              llama.attention.head_count_kv u32              = 8
llama_model_loader: - kv   9:     llama.attention.layer_norm_rms_epsilon f32              = 0.000010
llama_model_loader: - kv  10:                       llama.rope.freq_base f32              = 1000000.000000
llama_model_loader: - kv  11:                          general.file_type u32              = 15
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,32000]   = ["<unk>", "<s>", "</s>", "<0x00>", "<...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,32000]   = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,32000]   = [2, 3, 3, 6, 6, 6, 6, 6, 6, 6, 6, 6, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 1
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 2
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 0
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% for message in mess...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - type  f32:   65 tensors
llama_model_loader: - type q4_K:  193 tensors
llama_model_loader: - type q6_K:   33 tensors
print_info: file format = GGUF V3 (latest)
print_info: file type   = Q4_K - Medium
print_info: file size   = 4.07 GiB (4.83 BPW) 
init_tokenizer: initializing tokenizer for type 1
load: control token:      2 '</s>' is not marked as EOG
load: control token:      1 '<s>' is not marked as EOG
load: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
load: printing all EOG tokens:
load:   - 2 ('</s>')
load: special tokens cache size = 3
load: token to piece cache size = 0.1637 MB
print_info: arch             = llama
print_info: vocab_only       = 0
print_info: n_ctx_train      = 32768
print_info: n_embd           = 4096
print_info: n_layer          = 32
print_info: n_head           = 32
print_info: n_head_kv        = 8
print_info: n_rot            = 128
print_info: n_swa            = 0
print_info: is_swa_any       = 0
print_info: n_embd_head_k    = 128
print_info: n_embd_head_v    = 128
print_info: n_gqa            = 4
print_info: n_embd_k_gqa     = 1024
print_info: n_embd_v_gqa     = 1024
print_info: f_norm_eps       = 0.0e+00
print_info: f_norm_rms_eps   = 1.0e-05
print_info: f_clamp_kqv      = 0.0e+00
print_info: f_max_alibi_bias = 0.0e+00
print_info: f_logit_scale    = 0.0e+00
print_info: f_attn_scale     = 0.0e+00
print_info: n_ff             = 14336
print_info: n_expert         = 0
print_info: n_expert_used    = 0
print_info: causal attn      = 1
print_info: pooling type     = 0
print_info: rope type        = 0
print_info: rope scaling     = linear
print_info: freq_base_train  = 1000000.0
print_info: freq_scale_train = 1
print_info: n_ctx_orig_yarn  = 32768
print_info: rope_finetuned   = unknown
print_info: model type       = 7B
print_info: model params     = 7.24 B
print_info: general.name     = mistralai_mistral-7b-instruct-v0.2
print_info: vocab type       = SPM
print_info: n_vocab          = 32000
print_info: n_merges         = 0
print_info: BOS token        = 1 '<s>'
print_info: EOS token        = 2 '</s>'
print_info: UNK token        = 0 '<unk>'
print_info: PAD token        = 0 '<unk>'
print_info: LF token         = 13 '<0x0A>'
print_info: EOG token        = 2 '</s>'
print_info: max token length = 48
load_tensors: loading model tensors, this can take a while... (mmap = true)
load_tensors: layer   0 assigned to device CPU, is_swa = 0
load_tensors: layer   1 assigned to device CPU, is_swa = 0
load_tensors: layer   2 assigned to device CPU, is_swa = 0
load_tensors: layer   3 assigned to device CPU, is_swa = 0
load_tensors: layer   4 assigned to device CPU, is_swa = 0
load_tensors: layer   5 assigned to device CPU, is_swa = 0
load_tensors: layer   6 assigned to device CPU, is_swa = 0
load_tensors: layer   7 assigned to device CPU, is_swa = 0
load_tensors: layer   8 assigned to device CPU, is_swa = 0
load_tensors: layer   9 assigned to device CPU, is_swa = 0
load_tensors: layer  10 assigned to device CPU, is_swa = 0
load_tensors: layer  11 assigned to device CPU, is_swa = 0
load_tensors: layer  12 assigned to device CPU, is_swa = 0
load_tensors: layer  13 assigned to device CPU, is_swa = 0
load_tensors: layer  14 assigned to device CPU, is_swa = 0
load_tensors: layer  15 assigned to device CPU, is_swa = 0
load_tensors: layer  16 assigned to device CPU, is_swa = 0
load_tensors: layer  17 assigned to device CPU, is_swa = 0
load_tensors: layer  18 assigned to device CPU, is_swa = 0
load_tensors: layer  19 assigned to device CPU, is_swa = 0
load_tensors: layer  20 assigned to device CPU, is_swa = 0
load_tensors: layer  21 assigned to device CPU, is_swa = 0
load_tensors: layer  22 assigned to device CPU, is_swa = 0
load_tensors: layer  23 assigned to device CPU, is_swa = 0
load_tensors: layer  24 assigned to device CPU, is_swa = 0
load_tensors: layer  25 assigned to device CPU, is_swa = 0
load_tensors: layer  26 assigned to device CPU, is_swa = 0
load_tensors: layer  27 assigned to device CPU, is_swa = 0
load_tensors: layer  28 assigned to device CPU, is_swa = 0
load_tensors: layer  29 assigned to device CPU, is_swa = 0
load_tensors: layer  30 assigned to device CPU, is_swa = 0
load_tensors: layer  31 assigned to device CPU, is_swa = 0
load_tensors: layer  32 assigned to device CPU, is_swa = 0
load_tensors: tensor 'token_embd.weight' (q4_K) (and 98 others) cannot be used with preferred buffer type CPU_REPACK, using CPU instead
load_tensors:   CPU_REPACK model buffer size =  3204.00 MiB
load_tensors:   CPU_Mapped model buffer size =  4165.37 MiB
repack: repack tensor blk.0.attn_q.weight with q4_K_8x8
repack: repack tensor blk.0.attn_k.weight with q4_K_8x8
repack: repack tensor blk.0.attn_output.weight with q4_K_8x8
repack: repack tensor blk.0.ffn_gate.weight with q4_K_8x8
.repack: repack tensor blk.0.ffn_up.weight with q4_K_8x8
repack: repack tensor blk.1.attn_q.weight with q4_K_8x8
.repack: repack tensor blk.1.attn_k.weight with q4_K_8x8
repack: repack tensor blk.1.attn_output.weight with q4_K_8x8
repack: repack tensor blk.1.ffn_gate.weight with q4_K_8x8
.repack: repack tensor blk.1.ffn_up.weight with q4_K_8x8
repack: repack tensor blk.2.attn_q.weight with q4_K_8x8
.repack: repack tensor blk.2.attn_k.weight with q4_K_8x8
repack: repack tensor blk.2.attn_output.weight with q4_K_8x8
repack: repack tensor blk.2.ffn_gate.weight with q4_K_8x8
.repack: repack tensor blk.2.ffn_up.weight with q4_K_8x8
repack: repack tensor blk.3.attn_q.weight with q4_K_8x8
.repack: repack tensor blk.3.attn_k.weight with q4_K_8x8
repack: repack tensor blk.3.attn_output.weight with q4_K_8x8
repack: repack tensor blk.3.ffn_gate.weight with q4_K_8x8
.repack: repack tensor blk.3.ffn_up.weight with q4_K_8x8
repack: repack tensor blk.4.attn_q.weight with q4_K_8x8
.repack: repack tensor blk.4.attn_k.weight with q4_K_8x8
repack: repack tensor blk.4.attn_v.weight with q4_K_8x8
repack: repack tensor blk.4.attn_output.weight with q4_K_8x8
repack: repack tensor blk.4.ffn_gate.weight with q4_K_8x8
.repack: repack tensor blk.4.ffn_down.weight with q4_K_8x8
.repack: repack tensor blk.4.ffn_up.weight with q4_K_8x8
repack: repack tensor blk.5.attn_q.weight with q4_K_8x8
.repack: repack tensor blk.5.attn_k.weight with q4_K_8x8
repack: repack tensor blk.5.attn_v.weight with q4_K_8x8
repack: repack tensor blk.5.attn_output.weight with q4_K_8x8
repack: repack tensor blk.5.ffn_gate.weight with q4_K_8x8
.repack: repack tensor blk.5.ffn_down.weight with q4_K_8x8
repack: repack tensor blk.5.ffn_up.weight with q4_K_8x8
.repack: repack tensor blk.6.attn_q.weight with q4_K_8x8
repack: repack tensor blk.6.attn_k.weight with q4_K_8x8
repack: repack tensor blk.6.attn_output.weight with q4_K_8x8
.repack: repack tensor blk.6.ffn_gate.weight with q4_K_8x8
repack: repack tensor blk.6.ffn_up.weight with q4_K_8x8
.repack: repack tensor blk.7.attn_q.weight with q4_K_8x8
repack: repack tensor blk.7.attn_k.weight with q4_K_8x8
repack: repack tensor blk.7.attn_v.weight with q4_K_8x8
repack: repack tensor blk.7.attn_output.weight with q4_K_8x8
.repack: repack tensor blk.7.ffn_gate.weight with q4_K_8x8
repack: repack tensor blk.7.ffn_down.weight with q4_K_8x8
.repack: repack tensor blk.7.ffn_up.weight with q4_K_8x8
.repack: repack tensor blk.8.attn_q.weight with q4_K_8x8
repack: repack tensor blk.8.attn_k.weight with q4_K_8x8
repack: repack tensor blk.8.attn_v.weight with q4_K_8x8
repack: repack tensor blk.8.attn_output.weight with q4_K_8x8
repack: repack tensor blk.8.ffn_gate.weight with q4_K_8x8
.repack: repack tensor blk.8.ffn_down.weight with q4_K_8x8
.repack: repack tensor blk.8.ffn_up.weight with q4_K_8x8
.repack: repack tensor blk.9.attn_q.weight with q4_K_8x8
repack: repack tensor blk.9.attn_k.weight with q4_K_8x8
repack: repack tensor blk.9.attn_output.weight with q4_K_8x8
repack: repack tensor blk.9.ffn_gate.weight with q4_K_8x8
.repack: repack tensor blk.9.ffn_up.weight with q4_K_8x8
.repack: repack tensor blk.10.attn_q.weight with q4_K_8x8
repack: repack tensor blk.10.attn_k.weight with q4_K_8x8
repack: repack tensor blk.10.attn_v.weight with q4_K_8x8
repack: repack tensor blk.10.attn_output.weight with q4_K_8x8
repack: repack tensor blk.10.ffn_gate.weight with q4_K_8x8
.repack: repack tensor blk.10.ffn_down.weight with q4_K_8x8
.repack: repack tensor blk.10.ffn_up.weight with q4_K_8x8
.repack: repack tensor blk.11.attn_q.weight with q4_K_8x8
repack: repack tensor blk.11.attn_k.weight with q4_K_8x8
repack: repack tensor blk.11.attn_v.weight with q4_K_8x8
repack: repack tensor blk.11.attn_output.weight with q4_K_8x8
repack: repack tensor blk.11.ffn_gate.weight with q4_K_8x8
.repack: repack tensor blk.11.ffn_down.weight with q4_K_8x8
.repack: repack tensor blk.11.ffn_up.weight with q4_K_8x8
repack: repack tensor blk.12.attn_q.weight with q4_K_8x8
.repack: repack tensor blk.12.attn_k.weight with q4_K_8x8
repack: repack tensor blk.12.attn_output.weight with q4_K_8x8
repack: repack tensor blk.12.ffn_gate.weight with q4_K_8x8
.repack: repack tensor blk.12.ffn_up.weight with q4_K_8x8
repack: repack tensor blk.13.attn_q.weight with q4_K_8x8
.repack: repack tensor blk.13.attn_k.weight with q4_K_8x8
repack: repack tensor blk.13.attn_v.weight with q4_K_8x8
repack: repack tensor blk.13.attn_output.weight with q4_K_8x8
repack: repack tensor blk.13.ffn_gate.weight with q4_K_8x8
.repack: repack tensor blk.13.ffn_down.weight with q4_K_8x8
repack: repack tensor blk.13.ffn_up.weight with q4_K_8x8
.repack: repack tensor blk.14.attn_q.weight with q4_K_8x8
repack: repack tensor blk.14.attn_k.weight with q4_K_8x8
repack: repack tensor blk.14.attn_v.weight with q4_K_8x8
repack: repack tensor blk.14.attn_output.weight with q4_K_8x8
.repack: repack tensor blk.14.ffn_gate.weight with q4_K_8x8
repack: repack tensor blk.14.ffn_down.weight with q4_K_8x8
.repack: repack tensor blk.14.ffn_up.weight with q4_K_8x8
.repack: repack tensor blk.15.attn_q.weight with q4_K_8x8
repack: repack tensor blk.15.attn_k.weight with q4_K_8x8
repack: repack tensor blk.15.attn_output.weight with q4_K_8x8
repack: repack tensor blk.15.ffn_gate.weight with q4_K_8x8
.repack: repack tensor blk.15.ffn_up.weight with q4_K_8x8
.repack: repack tensor blk.16.attn_q.weight with q4_K_8x8
repack: repack tensor blk.16.attn_k.weight with q4_K_8x8
repack: repack tensor blk.16.attn_v.weight with q4_K_8x8
repack: repack tensor blk.16.attn_output.weight with q4_K_8x8
.repack: repack tensor blk.16.ffn_gate.weight with q4_K_8x8
repack: repack tensor blk.16.ffn_down.weight with q4_K_8x8
.repack: repack tensor blk.16.ffn_up.weight with q4_K_8x8
.repack: repack tensor blk.17.attn_q.weight with q4_K_8x8
repack: repack tensor blk.17.attn_k.weight with q4_K_8x8
repack: repack tensor blk.17.attn_v.weight with q4_K_8x8
repack: repack tensor blk.17.attn_output.weight with q4_K_8x8
repack: repack tensor blk.17.ffn_gate.weight with q4_K_8x8
.repack: repack tensor blk.17.ffn_down.weight with q4_K_8x8
.repack: repack tensor blk.17.ffn_up.weight with q4_K_8x8
.repack: repack tensor blk.18.attn_q.weight with q4_K_8x8
repack: repack tensor blk.18.attn_k.weight with q4_K_8x8
repack: repack tensor blk.18.attn_output.weight with q4_K_8x8
repack: repack tensor blk.18.ffn_gate.weight with q4_K_8x8
.repack: repack tensor blk.18.ffn_up.weight with q4_K_8x8
.repack: repack tensor blk.19.attn_q.weight with q4_K_8x8
repack: repack tensor blk.19.attn_k.weight with q4_K_8x8
repack: repack tensor blk.19.attn_v.weight with q4_K_8x8
repack: repack tensor blk.19.attn_output.weight with q4_K_8x8
repack: repack tensor blk.19.ffn_gate.weight with q4_K_8x8
.repack: repack tensor blk.19.ffn_down.weight with q4_K_8x8
.repack: repack tensor blk.19.ffn_up.weight with q4_K_8x8
repack: repack tensor blk.20.attn_q.weight with q4_K_8x8
.repack: repack tensor blk.20.attn_k.weight with q4_K_8x8
repack: repack tensor blk.20.attn_v.weight with q4_K_8x8
repack: repack tensor blk.20.attn_output.weight with q4_K_8x8
repack: repack tensor blk.20.ffn_gate.weight with q4_K_8x8
.repack: repack tensor blk.20.ffn_down.weight with q4_K_8x8
repack: repack tensor blk.20.ffn_up.weight with q4_K_8x8
.repack: repack tensor blk.21.attn_q.weight with q4_K_8x8
repack: repack tensor blk.21.attn_k.weight with q4_K_8x8
repack: repack tensor blk.21.attn_output.weight with q4_K_8x8
.repack: repack tensor blk.21.ffn_gate.weight with q4_K_8x8
repack: repack tensor blk.21.ffn_up.weight with q4_K_8x8
.repack: repack tensor blk.22.attn_q.weight with q4_K_8x8
repack: repack tensor blk.22.attn_k.weight with q4_K_8x8
repack: repack tensor blk.22.attn_v.weight with q4_K_8x8
.repack: repack tensor blk.22.attn_output.weight with q4_K_8x8
repack: repack tensor blk.22.ffn_gate.weight with q4_K_8x8
repack: repack tensor blk.22.ffn_down.weight with q4_K_8x8
.repack: repack tensor blk.22.ffn_up.weight with q4_K_8x8
.repack: repack tensor blk.23.attn_q.weight with q4_K_8x8
repack: repack tensor blk.23.attn_k.weight with q4_K_8x8
repack: repack tensor blk.23.attn_v.weight with q4_K_8x8
repack: repack tensor blk.23.attn_output.weight with q4_K_8x8
.repack: repack tensor blk.23.ffn_gate.weight with q4_K_8x8
repack: repack tensor blk.23.ffn_down.weight with q4_K_8x8
.repack: repack tensor blk.23.ffn_up.weight with q4_K_8x8
.repack: repack tensor blk.24.attn_q.weight with q4_K_8x8
repack: repack tensor blk.24.attn_k.weight with q4_K_8x8
repack: repack tensor blk.24.attn_output.weight with q4_K_8x8
repack: repack tensor blk.24.ffn_gate.weight with q4_K_8x8
.repack: repack tensor blk.24.ffn_up.weight with q4_K_8x8
.repack: repack tensor blk.25.attn_q.weight with q4_K_8x8
repack: repack tensor blk.25.attn_k.weight with q4_K_8x8
repack: repack tensor blk.25.attn_v.weight with q4_K_8x8
repack: repack tensor blk.25.attn_output.weight with q4_K_8x8
repack: repack tensor blk.25.ffn_gate.weight with q4_K_8x8
.repack: repack tensor blk.25.ffn_down.weight with q4_K_8x8
.repack: repack tensor blk.25.ffn_up.weight with q4_K_8x8
.repack: repack tensor blk.26.attn_q.weight with q4_K_8x8
repack: repack tensor blk.26.attn_k.weight with q4_K_8x8
repack: repack tensor blk.26.attn_v.weight with q4_K_8x8
repack: repack tensor blk.26.attn_output.weight with q4_K_8x8
repack: repack tensor blk.26.ffn_gate.weight with q4_K_8x8
.repack: repack tensor blk.26.ffn_down.weight with q4_K_8x8
.repack: repack tensor blk.26.ffn_up.weight with q4_K_8x8
repack: repack tensor blk.27.attn_q.weight with q4_K_8x8
.repack: repack tensor blk.27.attn_k.weight with q4_K_8x8
repack: repack tensor blk.27.attn_output.weight with q4_K_8x8
repack: repack tensor blk.27.ffn_gate.weight with q4_K_8x8
.repack: repack tensor blk.27.ffn_up.weight with q4_K_8x8
repack: repack tensor blk.28.attn_q.weight with q4_K_8x8
.repack: repack tensor blk.28.attn_k.weight with q4_K_8x8
repack: repack tensor blk.28.attn_output.weight with q4_K_8x8
repack: repack tensor blk.28.ffn_gate.weight with q4_K_8x8
.repack: repack tensor blk.28.ffn_up.weight with q4_K_8x8
repack: repack tensor blk.29.attn_q.weight with q4_K_8x8
.repack: repack tensor blk.29.attn_k.weight with q4_K_8x8
repack: repack tensor blk.29.attn_output.weight with q4_K_8x8
repack: repack tensor blk.29.ffn_gate.weight with q4_K_8x8
.repack: repack tensor blk.29.ffn_up.weight with q4_K_8x8
repack: repack tensor blk.30.attn_q.weight with q4_K_8x8
.repack: repack tensor blk.30.attn_k.weight with q4_K_8x8
repack: repack tensor blk.30.attn_output.weight with q4_K_8x8
repack: repack tensor blk.30.ffn_gate.weight with q4_K_8x8
.repack: repack tensor blk.30.ffn_up.weight with q4_K_8x8
repack: repack tensor blk.31.attn_q.weight with q4_K_8x8
.repack: repack tensor blk.31.attn_k.weight with q4_K_8x8
repack: repack tensor blk.31.attn_output.weight with q4_K_8x8
repack: repack tensor blk.31.ffn_gate.weight with q4_K_8x8
.repack: repack tensor blk.31.ffn_up.weight with q4_K_8x8
...................
llama_context: constructing llama_context
llama_context: n_batch is less than GGML_KQ_MASK_PAD - increasing to 64
llama_context: n_seq_max     = 1
llama_context: n_ctx         = 2048
llama_context: n_ctx_per_seq = 2048
llama_context: n_batch       = 64
llama_context: n_ubatch      = 8
llama_context: causal_attn   = 1
llama_context: flash_attn    = 0
llama_context: kv_unified    = false
llama_context: freq_base     = 1000000.0
llama_context: freq_scale    = 1
llama_context: n_ctx_per_seq (2048) < n_ctx_train (32768) -- the full capacity of the model will not be utilized
set_abort_callback: call
llama_context:        CPU  output buffer size =     0.12 MiB
create_memory: n_ctx = 2048 (padded)
llama_kv_cache_unified: layer   0: dev = CPU
llama_kv_cache_unified: layer   1: dev = CPU
llama_kv_cache_unified: layer   2: dev = CPU
llama_kv_cache_unified: layer   3: dev = CPU
llama_kv_cache_unified: layer   4: dev = CPU
llama_kv_cache_unified: layer   5: dev = CPU
llama_kv_cache_unified: layer   6: dev = CPU
llama_kv_cache_unified: layer   7: dev = CPU
llama_kv_cache_unified: layer   8: dev = CPU
llama_kv_cache_unified: layer   9: dev = CPU
llama_kv_cache_unified: layer  10: dev = CPU
llama_kv_cache_unified: layer  11: dev = CPU
llama_kv_cache_unified: layer  12: dev = CPU
llama_kv_cache_unified: layer  13: dev = CPU
llama_kv_cache_unified: layer  14: dev = CPU
llama_kv_cache_unified: layer  15: dev = CPU
llama_kv_cache_unified: layer  16: dev = CPU
llama_kv_cache_unified: layer  17: dev = CPU
llama_kv_cache_unified: layer  18: dev = CPU
llama_kv_cache_unified: layer  19: dev = CPU
llama_kv_cache_unified: layer  20: dev = CPU
llama_kv_cache_unified: layer  21: dev = CPU
llama_kv_cache_unified: layer  22: dev = CPU
llama_kv_cache_unified: layer  23: dev = CPU
llama_kv_cache_unified: layer  24: dev = CPU
llama_kv_cache_unified: layer  25: dev = CPU
llama_kv_cache_unified: layer  26: dev = CPU
llama_kv_cache_unified: layer  27: dev = CPU
llama_kv_cache_unified: layer  28: dev = CPU
llama_kv_cache_unified: layer  29: dev = CPU
llama_kv_cache_unified: layer  30: dev = CPU
llama_kv_cache_unified: layer  31: dev = CPU
llama_kv_cache_unified:        CPU KV buffer size =   256.00 MiB
llama_kv_cache_unified: size =  256.00 MiB (  2048 cells,  32 layers,  1/1 seqs), K (f16):  128.00 MiB, V (f16):  128.00 MiB
llama_context: enumerating backends
llama_context: backend_ptrs.size() = 1
llama_context: max_nodes = 2328
llama_context: worst-case: n_tokens = 8, n_seqs = 1, n_outputs = 0
graph_reserve: reserving a graph for ubatch with n_tokens =    8, n_seqs =  1, n_outputs =    8
graph_reserve: reserving a graph for ubatch with n_tokens =    1, n_seqs =  1, n_outputs =    1
graph_reserve: reserving a graph for ubatch with n_tokens =    8, n_seqs =  1, n_outputs =    8
llama_context:        CPU compute buffer size =     3.06 MiB
llama_context: graph nodes  = 1126
llama_context: graph splits = 1
CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | LLAMAFILE = 1 | OPENMP = 1 | REPACK = 1 | 
Model metadata: {'general.name': 'mistralai_mistral-7b-instruct-v0.2', 'general.architecture': 'llama', 'llama.context_length': '32768', 'llama.rope.dimension_count': '128', 'llama.embedding_length': '4096', 'llama.block_count': '32', 'llama.feed_forward_length': '14336', 'llama.attention.head_count': '32', 'tokenizer.ggml.eos_token_id': '2', 'general.file_type': '15', 'llama.attention.head_count_kv': '8', 'llama.attention.layer_norm_rms_epsilon': '0.000010', 'llama.rope.freq_base': '1000000.000000', 'tokenizer.ggml.model': 'llama', 'general.quantization_version': '2', 'tokenizer.ggml.bos_token_id': '1', 'tokenizer.ggml.unknown_token_id': '0', 'tokenizer.ggml.padding_token_id': '0', 'tokenizer.ggml.add_bos_token': 'true', 'tokenizer.ggml.add_eos_token': 'false', 'tokenizer.chat_template': "{{ bos_token }}{% for message in messages %}{% if (message['role'] == 'user') != (loop.index0 % 2 == 0) %}{{ raise_exception('Conversation roles must alternate user/assistant/user/assistant/...') }}{% endif %}{% if message['role'] == 'user' %}{{ '[INST] ' + message['content'] + ' [/INST]' }}{% elif message['role'] == 'assistant' %}{{ message['content'] + eos_token}}{% else %}{{ raise_exception('Only user and assistant roles are supported!') }}{% endif %}{% endfor %}"}
Available chat formats from metadata: chat_template.default
Guessed chat format: mistral-instruct
Building index from SQLite database...
Loading embedding model: intfloat/e5-small-v2 on CPU
Index saved to faiss_index
LLM is explicitly disabled. Using MockLLM.
llama_model_loader: loaded meta data with 24 key-value pairs and 291 tensors from C:/Users/Prakhar Srivastava/Desktop/AskQuery/models/Mistral/mistral-7b-instruct-v0.2.Q4_K_M.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = llama
llama_model_loader: - kv   1:                               general.name str              = mistralai_mistral-7b-instruct-v0.2
llama_model_loader: - kv   2:                       llama.context_length u32              = 32768
llama_model_loader: - kv   3:                     llama.embedding_length u32              = 4096
llama_model_loader: - kv   4:                          llama.block_count u32              = 32
llama_model_loader: - kv   5:                  llama.feed_forward_length u32              = 14336
llama_model_loader: - kv   6:                 llama.rope.dimension_count u32              = 128
llama_model_loader: - kv   7:                 llama.attention.head_count u32              = 32
llama_model_loader: - kv   8:              llama.attention.head_count_kv u32              = 8
llama_model_loader: - kv   9:     llama.attention.layer_norm_rms_epsilon f32              = 0.000010
llama_model_loader: - kv  10:                       llama.rope.freq_base f32              = 1000000.000000
llama_model_loader: - kv  11:                          general.file_type u32              = 15
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,32000]   = ["<unk>", "<s>", "</s>", "<0x00>", "<...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,32000]   = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,32000]   = [2, 3, 3, 6, 6, 6, 6, 6, 6, 6, 6, 6, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 1
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 2
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 0
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% for message in mess...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - type  f32:   65 tensors
llama_model_loader: - type q4_K:  193 tensors
llama_model_loader: - type q6_K:   33 tensors
print_info: file format = GGUF V3 (latest)
print_info: file type   = Q4_K - Medium
print_info: file size   = 4.07 GiB (4.83 BPW) 
init_tokenizer: initializing tokenizer for type 1
load: control token:      2 '</s>' is not marked as EOG
load: control token:      1 '<s>' is not marked as EOG
load: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
load: printing all EOG tokens:
load:   - 2 ('</s>')
load: special tokens cache size = 3
load: token to piece cache size = 0.1637 MB
print_info: arch             = llama
print_info: vocab_only       = 0
print_info: n_ctx_train      = 32768
print_info: n_embd           = 4096
print_info: n_layer          = 32
print_info: n_head           = 32
print_info: n_head_kv        = 8
print_info: n_rot            = 128
print_info: n_swa            = 0
print_info: is_swa_any       = 0
print_info: n_embd_head_k    = 128
print_info: n_embd_head_v    = 128
print_info: n_gqa            = 4
print_info: n_embd_k_gqa     = 1024
print_info: n_embd_v_gqa     = 1024
print_info: f_norm_eps       = 0.0e+00
print_info: f_norm_rms_eps   = 1.0e-05
print_info: f_clamp_kqv      = 0.0e+00
print_info: f_max_alibi_bias = 0.0e+00
print_info: f_logit_scale    = 0.0e+00
print_info: f_attn_scale     = 0.0e+00
print_info: n_ff             = 14336
print_info: n_expert         = 0
print_info: n_expert_used    = 0
print_info: causal attn      = 1
print_info: pooling type     = 0
print_info: rope type        = 0
print_info: rope scaling     = linear
print_info: freq_base_train  = 1000000.0
print_info: freq_scale_train = 1
print_info: n_ctx_orig_yarn  = 32768
print_info: rope_finetuned   = unknown
print_info: model type       = 7B
print_info: model params     = 7.24 B
print_info: general.name     = mistralai_mistral-7b-instruct-v0.2
print_info: vocab type       = SPM
print_info: n_vocab          = 32000
print_info: n_merges         = 0
print_info: BOS token        = 1 '<s>'
print_info: EOS token        = 2 '</s>'
print_info: UNK token        = 0 '<unk>'
print_info: PAD token        = 0 '<unk>'
print_info: LF token         = 13 '<0x0A>'
print_info: EOG token        = 2 '</s>'
print_info: max token length = 48
load_tensors: loading model tensors, this can take a while... (mmap = true)
load_tensors: layer   0 assigned to device CPU, is_swa = 0
load_tensors: layer   1 assigned to device CPU, is_swa = 0
load_tensors: layer   2 assigned to device CPU, is_swa = 0
load_tensors: layer   3 assigned to device CPU, is_swa = 0
load_tensors: layer   4 assigned to device CPU, is_swa = 0
load_tensors: layer   5 assigned to device CPU, is_swa = 0
load_tensors: layer   6 assigned to device CPU, is_swa = 0
load_tensors: layer   7 assigned to device CPU, is_swa = 0
load_tensors: layer   8 assigned to device CPU, is_swa = 0
load_tensors: layer   9 assigned to device CPU, is_swa = 0
load_tensors: layer  10 assigned to device CPU, is_swa = 0
load_tensors: layer  11 assigned to device CPU, is_swa = 0
load_tensors: layer  12 assigned to device CPU, is_swa = 0
load_tensors: layer  13 assigned to device CPU, is_swa = 0
load_tensors: layer  14 assigned to device CPU, is_swa = 0
load_tensors: layer  15 assigned to device CPU, is_swa = 0
load_tensors: layer  16 assigned to device CPU, is_swa = 0
load_tensors: layer  17 assigned to device CPU, is_swa = 0
load_tensors: layer  18 assigned to device CPU, is_swa = 0
load_tensors: layer  19 assigned to device CPU, is_swa = 0
load_tensors: layer  20 assigned to device CPU, is_swa = 0
load_tensors: layer  21 assigned to device CPU, is_swa = 0
load_tensors: layer  22 assigned to device CPU, is_swa = 0
load_tensors: layer  23 assigned to device CPU, is_swa = 0
load_tensors: layer  24 assigned to device CPU, is_swa = 0
load_tensors: layer  25 assigned to device CPU, is_swa = 0
load_tensors: layer  26 assigned to device CPU, is_swa = 0
load_tensors: layer  27 assigned to device CPU, is_swa = 0
load_tensors: layer  28 assigned to device CPU, is_swa = 0
load_tensors: layer  29 assigned to device CPU, is_swa = 0
load_tensors: layer  30 assigned to device CPU, is_swa = 0
load_tensors: layer  31 assigned to device CPU, is_swa = 0
load_tensors: layer  32 assigned to device CPU, is_swa = 0
load_tensors: tensor 'token_embd.weight' (q4_K) (and 98 others) cannot be used with preferred buffer type CPU_REPACK, using CPU instead
load_tensors:   CPU_REPACK model buffer size =  3204.00 MiB
load_tensors:   CPU_Mapped model buffer size =  4165.37 MiB
repack: repack tensor blk.0.attn_q.weight with q4_K_8x8
repack: repack tensor blk.0.attn_k.weight with q4_K_8x8
repack: repack tensor blk.0.attn_output.weight with q4_K_8x8
repack: repack tensor blk.0.ffn_gate.weight with q4_K_8x8
.repack: repack tensor blk.0.ffn_up.weight with q4_K_8x8
repack: repack tensor blk.1.attn_q.weight with q4_K_8x8
.repack: repack tensor blk.1.attn_k.weight with q4_K_8x8
repack: repack tensor blk.1.attn_output.weight with q4_K_8x8
repack: repack tensor blk.1.ffn_gate.weight with q4_K_8x8
.repack: repack tensor blk.1.ffn_up.weight with q4_K_8x8
repack: repack tensor blk.2.attn_q.weight with q4_K_8x8
.repack: repack tensor blk.2.attn_k.weight with q4_K_8x8
repack: repack tensor blk.2.attn_output.weight with q4_K_8x8
repack: repack tensor blk.2.ffn_gate.weight with q4_K_8x8
.repack: repack tensor blk.2.ffn_up.weight with q4_K_8x8
repack: repack tensor blk.3.attn_q.weight with q4_K_8x8
.repack: repack tensor blk.3.attn_k.weight with q4_K_8x8
repack: repack tensor blk.3.attn_output.weight with q4_K_8x8
repack: repack tensor blk.3.ffn_gate.weight with q4_K_8x8
.repack: repack tensor blk.3.ffn_up.weight with q4_K_8x8
repack: repack tensor blk.4.attn_q.weight with q4_K_8x8
.repack: repack tensor blk.4.attn_k.weight with q4_K_8x8
repack: repack tensor blk.4.attn_v.weight with q4_K_8x8
repack: repack tensor blk.4.attn_output.weight with q4_K_8x8
repack: repack tensor blk.4.ffn_gate.weight with q4_K_8x8
.repack: repack tensor blk.4.ffn_down.weight with q4_K_8x8
.repack: repack tensor blk.4.ffn_up.weight with q4_K_8x8
repack: repack tensor blk.5.attn_q.weight with q4_K_8x8
.repack: repack tensor blk.5.attn_k.weight with q4_K_8x8
repack: repack tensor blk.5.attn_v.weight with q4_K_8x8
repack: repack tensor blk.5.attn_output.weight with q4_K_8x8
repack: repack tensor blk.5.ffn_gate.weight with q4_K_8x8
.repack: repack tensor blk.5.ffn_down.weight with q4_K_8x8
repack: repack tensor blk.5.ffn_up.weight with q4_K_8x8
.repack: repack tensor blk.6.attn_q.weight with q4_K_8x8
repack: repack tensor blk.6.attn_k.weight with q4_K_8x8
repack: repack tensor blk.6.attn_output.weight with q4_K_8x8
.repack: repack tensor blk.6.ffn_gate.weight with q4_K_8x8
repack: repack tensor blk.6.ffn_up.weight with q4_K_8x8
.repack: repack tensor blk.7.attn_q.weight with q4_K_8x8
repack: repack tensor blk.7.attn_k.weight with q4_K_8x8
repack: repack tensor blk.7.attn_v.weight with q4_K_8x8
repack: repack tensor blk.7.attn_output.weight with q4_K_8x8
.repack: repack tensor blk.7.ffn_gate.weight with q4_K_8x8
repack: repack tensor blk.7.ffn_down.weight with q4_K_8x8
.repack: repack tensor blk.7.ffn_up.weight with q4_K_8x8
.repack: repack tensor blk.8.attn_q.weight with q4_K_8x8
repack: repack tensor blk.8.attn_k.weight with q4_K_8x8
repack: repack tensor blk.8.attn_v.weight with q4_K_8x8
repack: repack tensor blk.8.attn_output.weight with q4_K_8x8
repack: repack tensor blk.8.ffn_gate.weight with q4_K_8x8
.repack: repack tensor blk.8.ffn_down.weight with q4_K_8x8
.repack: repack tensor blk.8.ffn_up.weight with q4_K_8x8
.repack: repack tensor blk.9.attn_q.weight with q4_K_8x8
repack: repack tensor blk.9.attn_k.weight with q4_K_8x8
repack: repack tensor blk.9.attn_output.weight with q4_K_8x8
repack: repack tensor blk.9.ffn_gate.weight with q4_K_8x8
.repack: repack tensor blk.9.ffn_up.weight with q4_K_8x8
.repack: repack tensor blk.10.attn_q.weight with q4_K_8x8
repack: repack tensor blk.10.attn_k.weight with q4_K_8x8
repack: repack tensor blk.10.attn_v.weight with q4_K_8x8
repack: repack tensor blk.10.attn_output.weight with q4_K_8x8
repack: repack tensor blk.10.ffn_gate.weight with q4_K_8x8
.repack: repack tensor blk.10.ffn_down.weight with q4_K_8x8
.repack: repack tensor blk.10.ffn_up.weight with q4_K_8x8
.repack: repack tensor blk.11.attn_q.weight with q4_K_8x8
repack: repack tensor blk.11.attn_k.weight with q4_K_8x8
repack: repack tensor blk.11.attn_v.weight with q4_K_8x8
repack: repack tensor blk.11.attn_output.weight with q4_K_8x8
repack: repack tensor blk.11.ffn_gate.weight with q4_K_8x8
.repack: repack tensor blk.11.ffn_down.weight with q4_K_8x8
.repack: repack tensor blk.11.ffn_up.weight with q4_K_8x8
repack: repack tensor blk.12.attn_q.weight with q4_K_8x8
.repack: repack tensor blk.12.attn_k.weight with q4_K_8x8
repack: repack tensor blk.12.attn_output.weight with q4_K_8x8
repack: repack tensor blk.12.ffn_gate.weight with q4_K_8x8
.repack: repack tensor blk.12.ffn_up.weight with q4_K_8x8
repack: repack tensor blk.13.attn_q.weight with q4_K_8x8
.repack: repack tensor blk.13.attn_k.weight with q4_K_8x8
repack: repack tensor blk.13.attn_v.weight with q4_K_8x8
repack: repack tensor blk.13.attn_output.weight with q4_K_8x8
repack: repack tensor blk.13.ffn_gate.weight with q4_K_8x8
.repack: repack tensor blk.13.ffn_down.weight with q4_K_8x8
repack: repack tensor blk.13.ffn_up.weight with q4_K_8x8
.repack: repack tensor blk.14.attn_q.weight with q4_K_8x8
repack: repack tensor blk.14.attn_k.weight with q4_K_8x8
repack: repack tensor blk.14.attn_v.weight with q4_K_8x8
repack: repack tensor blk.14.attn_output.weight with q4_K_8x8
.repack: repack tensor blk.14.ffn_gate.weight with q4_K_8x8
repack: repack tensor blk.14.ffn_down.weight with q4_K_8x8
.repack: repack tensor blk.14.ffn_up.weight with q4_K_8x8
.repack: repack tensor blk.15.attn_q.weight with q4_K_8x8
repack: repack tensor blk.15.attn_k.weight with q4_K_8x8
repack: repack tensor blk.15.attn_output.weight with q4_K_8x8
repack: repack tensor blk.15.ffn_gate.weight with q4_K_8x8
.repack: repack tensor blk.15.ffn_up.weight with q4_K_8x8
.repack: repack tensor blk.16.attn_q.weight with q4_K_8x8
repack: repack tensor blk.16.attn_k.weight with q4_K_8x8
repack: repack tensor blk.16.attn_v.weight with q4_K_8x8
repack: repack tensor blk.16.attn_output.weight with q4_K_8x8
.repack: repack tensor blk.16.ffn_gate.weight with q4_K_8x8
repack: repack tensor blk.16.ffn_down.weight with q4_K_8x8
.repack: repack tensor blk.16.ffn_up.weight with q4_K_8x8
.repack: repack tensor blk.17.attn_q.weight with q4_K_8x8
repack: repack tensor blk.17.attn_k.weight with q4_K_8x8
repack: repack tensor blk.17.attn_v.weight with q4_K_8x8
repack: repack tensor blk.17.attn_output.weight with q4_K_8x8
repack: repack tensor blk.17.ffn_gate.weight with q4_K_8x8
.repack: repack tensor blk.17.ffn_down.weight with q4_K_8x8
.repack: repack tensor blk.17.ffn_up.weight with q4_K_8x8
.repack: repack tensor blk.18.attn_q.weight with q4_K_8x8
repack: repack tensor blk.18.attn_k.weight with q4_K_8x8
repack: repack tensor blk.18.attn_output.weight with q4_K_8x8
repack: repack tensor blk.18.ffn_gate.weight with q4_K_8x8
.repack: repack tensor blk.18.ffn_up.weight with q4_K_8x8
.repack: repack tensor blk.19.attn_q.weight with q4_K_8x8
repack: repack tensor blk.19.attn_k.weight with q4_K_8x8
repack: repack tensor blk.19.attn_v.weight with q4_K_8x8
repack: repack tensor blk.19.attn_output.weight with q4_K_8x8
repack: repack tensor blk.19.ffn_gate.weight with q4_K_8x8
.repack: repack tensor blk.19.ffn_down.weight with q4_K_8x8
.repack: repack tensor blk.19.ffn_up.weight with q4_K_8x8
repack: repack tensor blk.20.attn_q.weight with q4_K_8x8
.repack: repack tensor blk.20.attn_k.weight with q4_K_8x8
repack: repack tensor blk.20.attn_v.weight with q4_K_8x8
repack: repack tensor blk.20.attn_output.weight with q4_K_8x8
repack: repack tensor blk.20.ffn_gate.weight with q4_K_8x8
.repack: repack tensor blk.20.ffn_down.weight with q4_K_8x8
repack: repack tensor blk.20.ffn_up.weight with q4_K_8x8
.repack: repack tensor blk.21.attn_q.weight with q4_K_8x8
repack: repack tensor blk.21.attn_k.weight with q4_K_8x8
repack: repack tensor blk.21.attn_output.weight with q4_K_8x8
.repack: repack tensor blk.21.ffn_gate.weight with q4_K_8x8
repack: repack tensor blk.21.ffn_up.weight with q4_K_8x8
.repack: repack tensor blk.22.attn_q.weight with q4_K_8x8
repack: repack tensor blk.22.attn_k.weight with q4_K_8x8
repack: repack tensor blk.22.attn_v.weight with q4_K_8x8
.repack: repack tensor blk.22.attn_output.weight with q4_K_8x8
repack: repack tensor blk.22.ffn_gate.weight with q4_K_8x8
repack: repack tensor blk.22.ffn_down.weight with q4_K_8x8
.repack: repack tensor blk.22.ffn_up.weight with q4_K_8x8
.repack: repack tensor blk.23.attn_q.weight with q4_K_8x8
repack: repack tensor blk.23.attn_k.weight with q4_K_8x8
repack: repack tensor blk.23.attn_v.weight with q4_K_8x8
repack: repack tensor blk.23.attn_output.weight with q4_K_8x8
.repack: repack tensor blk.23.ffn_gate.weight with q4_K_8x8
repack: repack tensor blk.23.ffn_down.weight with q4_K_8x8
.repack: repack tensor blk.23.ffn_up.weight with q4_K_8x8
.repack: repack tensor blk.24.attn_q.weight with q4_K_8x8
repack: repack tensor blk.24.attn_k.weight with q4_K_8x8
repack: repack tensor blk.24.attn_output.weight with q4_K_8x8
repack: repack tensor blk.24.ffn_gate.weight with q4_K_8x8
.repack: repack tensor blk.24.ffn_up.weight with q4_K_8x8
.repack: repack tensor blk.25.attn_q.weight with q4_K_8x8
repack: repack tensor blk.25.attn_k.weight with q4_K_8x8
repack: repack tensor blk.25.attn_v.weight with q4_K_8x8
repack: repack tensor blk.25.attn_output.weight with q4_K_8x8
repack: repack tensor blk.25.ffn_gate.weight with q4_K_8x8
.repack: repack tensor blk.25.ffn_down.weight with q4_K_8x8
.repack: repack tensor blk.25.ffn_up.weight with q4_K_8x8
.repack: repack tensor blk.26.attn_q.weight with q4_K_8x8
repack: repack tensor blk.26.attn_k.weight with q4_K_8x8
repack: repack tensor blk.26.attn_v.weight with q4_K_8x8
repack: repack tensor blk.26.attn_output.weight with q4_K_8x8
repack: repack tensor blk.26.ffn_gate.weight with q4_K_8x8
.repack: repack tensor blk.26.ffn_down.weight with q4_K_8x8
.repack: repack tensor blk.26.ffn_up.weight with q4_K_8x8
repack: repack tensor blk.27.attn_q.weight with q4_K_8x8
.repack: repack tensor blk.27.attn_k.weight with q4_K_8x8
repack: repack tensor blk.27.attn_output.weight with q4_K_8x8
repack: repack tensor blk.27.ffn_gate.weight with q4_K_8x8
.repack: repack tensor blk.27.ffn_up.weight with q4_K_8x8
repack: repack tensor blk.28.attn_q.weight with q4_K_8x8
.repack: repack tensor blk.28.attn_k.weight with q4_K_8x8
repack: repack tensor blk.28.attn_output.weight with q4_K_8x8
repack: repack tensor blk.28.ffn_gate.weight with q4_K_8x8
.repack: repack tensor blk.28.ffn_up.weight with q4_K_8x8
repack: repack tensor blk.29.attn_q.weight with q4_K_8x8
.repack: repack tensor blk.29.attn_k.weight with q4_K_8x8
repack: repack tensor blk.29.attn_output.weight with q4_K_8x8
repack: repack tensor blk.29.ffn_gate.weight with q4_K_8x8
.repack: repack tensor blk.29.ffn_up.weight with q4_K_8x8
repack: repack tensor blk.30.attn_q.weight with q4_K_8x8
.repack: repack tensor blk.30.attn_k.weight with q4_K_8x8
repack: repack tensor blk.30.attn_output.weight with q4_K_8x8
repack: repack tensor blk.30.ffn_gate.weight with q4_K_8x8
.repack: repack tensor blk.30.ffn_up.weight with q4_K_8x8
repack: repack tensor blk.31.attn_q.weight with q4_K_8x8
.repack: repack tensor blk.31.attn_k.weight with q4_K_8x8
repack: repack tensor blk.31.attn_output.weight with q4_K_8x8
repack: repack tensor blk.31.ffn_gate.weight with q4_K_8x8
.repack: repack tensor blk.31.ffn_up.weight with q4_K_8x8
...................
llama_context: constructing llama_context
llama_context: n_batch is less than GGML_KQ_MASK_PAD - increasing to 64
llama_context: n_seq_max     = 1
llama_context: n_ctx         = 2048
llama_context: n_ctx_per_seq = 2048
llama_context: n_batch       = 64
llama_context: n_ubatch      = 8
llama_context: causal_attn   = 1
llama_context: flash_attn    = 0
llama_context: kv_unified    = false
llama_context: freq_base     = 1000000.0
llama_context: freq_scale    = 1
llama_context: n_ctx_per_seq (2048) < n_ctx_train (32768) -- the full capacity of the model will not be utilized
set_abort_callback: call
llama_context:        CPU  output buffer size =     0.12 MiB
create_memory: n_ctx = 2048 (padded)
llama_kv_cache_unified: layer   0: dev = CPU
llama_kv_cache_unified: layer   1: dev = CPU
llama_kv_cache_unified: layer   2: dev = CPU
llama_kv_cache_unified: layer   3: dev = CPU
llama_kv_cache_unified: layer   4: dev = CPU
llama_kv_cache_unified: layer   5: dev = CPU
llama_kv_cache_unified: layer   6: dev = CPU
llama_kv_cache_unified: layer   7: dev = CPU
llama_kv_cache_unified: layer   8: dev = CPU
llama_kv_cache_unified: layer   9: dev = CPU
llama_kv_cache_unified: layer  10: dev = CPU
llama_kv_cache_unified: layer  11: dev = CPU
llama_kv_cache_unified: layer  12: dev = CPU
llama_kv_cache_unified: layer  13: dev = CPU
llama_kv_cache_unified: layer  14: dev = CPU
llama_kv_cache_unified: layer  15: dev = CPU
llama_kv_cache_unified: layer  16: dev = CPU
llama_kv_cache_unified: layer  17: dev = CPU
llama_kv_cache_unified: layer  18: dev = CPU
llama_kv_cache_unified: layer  19: dev = CPU
llama_kv_cache_unified: layer  20: dev = CPU
llama_kv_cache_unified: layer  21: dev = CPU
llama_kv_cache_unified: layer  22: dev = CPU
llama_kv_cache_unified: layer  23: dev = CPU
llama_kv_cache_unified: layer  24: dev = CPU
llama_kv_cache_unified: layer  25: dev = CPU
llama_kv_cache_unified: layer  26: dev = CPU
llama_kv_cache_unified: layer  27: dev = CPU
llama_kv_cache_unified: layer  28: dev = CPU
llama_kv_cache_unified: layer  29: dev = CPU
llama_kv_cache_unified: layer  30: dev = CPU
llama_kv_cache_unified: layer  31: dev = CPU
llama_kv_cache_unified:        CPU KV buffer size =   256.00 MiB
llama_kv_cache_unified: size =  256.00 MiB (  2048 cells,  32 layers,  1/1 seqs), K (f16):  128.00 MiB, V (f16):  128.00 MiB
llama_context: enumerating backends
llama_context: backend_ptrs.size() = 1
llama_context: max_nodes = 2328
llama_context: worst-case: n_tokens = 8, n_seqs = 1, n_outputs = 0
graph_reserve: reserving a graph for ubatch with n_tokens =    8, n_seqs =  1, n_outputs =    8
graph_reserve: reserving a graph for ubatch with n_tokens =    1, n_seqs =  1, n_outputs =    1
graph_reserve: reserving a graph for ubatch with n_tokens =    8, n_seqs =  1, n_outputs =    8
llama_context:        CPU compute buffer size =     3.06 MiB
llama_context: graph nodes  = 1126
llama_context: graph splits = 1
CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | LLAMAFILE = 1 | OPENMP = 1 | REPACK = 1 | 
Model metadata: {'general.name': 'mistralai_mistral-7b-instruct-v0.2', 'general.architecture': 'llama', 'llama.context_length': '32768', 'llama.rope.dimension_count': '128', 'llama.embedding_length': '4096', 'llama.block_count': '32', 'llama.feed_forward_length': '14336', 'llama.attention.head_count': '32', 'tokenizer.ggml.eos_token_id': '2', 'general.file_type': '15', 'llama.attention.head_count_kv': '8', 'llama.attention.layer_norm_rms_epsilon': '0.000010', 'llama.rope.freq_base': '1000000.000000', 'tokenizer.ggml.model': 'llama', 'general.quantization_version': '2', 'tokenizer.ggml.bos_token_id': '1', 'tokenizer.ggml.unknown_token_id': '0', 'tokenizer.ggml.padding_token_id': '0', 'tokenizer.ggml.add_bos_token': 'true', 'tokenizer.ggml.add_eos_token': 'false', 'tokenizer.chat_template': "{{ bos_token }}{% for message in messages %}{% if (message['role'] == 'user') != (loop.index0 % 2 == 0) %}{{ raise_exception('Conversation roles must alternate user/assistant/user/assistant/...') }}{% endif %}{% if message['role'] == 'user' %}{{ '[INST] ' + message['content'] + ' [/INST]' }}{% elif message['role'] == 'assistant' %}{{ message['content'] + eos_token}}{% else %}{{ raise_exception('Only user and assistant roles are supported!') }}{% endif %}{% endfor %}"}
Available chat formats from metadata: chat_template.default
Guessed chat format: mistral-instruct
Building index from SQLite database...
Loading embedding model: intfloat/e5-small-v2 on CPU
Index saved to faiss_index
llama_model_loader: loaded meta data with 24 key-value pairs and 291 tensors from C:/Users/Prakhar Srivastava/Desktop/AskQuery/models/Mistral/mistral-7b-instruct-v0.2.Q4_K_M.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = llama
llama_model_loader: - kv   1:                               general.name str              = mistralai_mistral-7b-instruct-v0.2
llama_model_loader: - kv   2:                       llama.context_length u32              = 32768
llama_model_loader: - kv   3:                     llama.embedding_length u32              = 4096
llama_model_loader: - kv   4:                          llama.block_count u32              = 32
llama_model_loader: - kv   5:                  llama.feed_forward_length u32              = 14336
llama_model_loader: - kv   6:                 llama.rope.dimension_count u32              = 128
llama_model_loader: - kv   7:                 llama.attention.head_count u32              = 32
llama_model_loader: - kv   8:              llama.attention.head_count_kv u32              = 8
llama_model_loader: - kv   9:     llama.attention.layer_norm_rms_epsilon f32              = 0.000010
llama_model_loader: - kv  10:                       llama.rope.freq_base f32              = 1000000.000000
llama_model_loader: - kv  11:                          general.file_type u32              = 15
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,32000]   = ["<unk>", "<s>", "</s>", "<0x00>", "<...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,32000]   = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,32000]   = [2, 3, 3, 6, 6, 6, 6, 6, 6, 6, 6, 6, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 1
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 2
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 0
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% for message in mess...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - type  f32:   65 tensors
llama_model_loader: - type q4_K:  193 tensors
llama_model_loader: - type q6_K:   33 tensors
print_info: file format = GGUF V3 (latest)
print_info: file type   = Q4_K - Medium
print_info: file size   = 4.07 GiB (4.83 BPW) 
init_tokenizer: initializing tokenizer for type 1
load: control token:      2 '</s>' is not marked as EOG
load: control token:      1 '<s>' is not marked as EOG
load: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
load: printing all EOG tokens:
load:   - 2 ('</s>')
load: special tokens cache size = 3
load: token to piece cache size = 0.1637 MB
print_info: arch             = llama
print_info: vocab_only       = 0
print_info: n_ctx_train      = 32768
print_info: n_embd           = 4096
print_info: n_layer          = 32
print_info: n_head           = 32
print_info: n_head_kv        = 8
print_info: n_rot            = 128
print_info: n_swa            = 0
print_info: is_swa_any       = 0
print_info: n_embd_head_k    = 128
print_info: n_embd_head_v    = 128
print_info: n_gqa            = 4
print_info: n_embd_k_gqa     = 1024
print_info: n_embd_v_gqa     = 1024
print_info: f_norm_eps       = 0.0e+00
print_info: f_norm_rms_eps   = 1.0e-05
print_info: f_clamp_kqv      = 0.0e+00
print_info: f_max_alibi_bias = 0.0e+00
print_info: f_logit_scale    = 0.0e+00
print_info: f_attn_scale     = 0.0e+00
print_info: n_ff             = 14336
print_info: n_expert         = 0
print_info: n_expert_used    = 0
print_info: causal attn      = 1
print_info: pooling type     = 0
print_info: rope type        = 0
print_info: rope scaling     = linear
print_info: freq_base_train  = 1000000.0
print_info: freq_scale_train = 1
print_info: n_ctx_orig_yarn  = 32768
print_info: rope_finetuned   = unknown
print_info: model type       = 7B
print_info: model params     = 7.24 B
print_info: general.name     = mistralai_mistral-7b-instruct-v0.2
print_info: vocab type       = SPM
print_info: n_vocab          = 32000
print_info: n_merges         = 0
print_info: BOS token        = 1 '<s>'
print_info: EOS token        = 2 '</s>'
print_info: UNK token        = 0 '<unk>'
print_info: PAD token        = 0 '<unk>'
print_info: LF token         = 13 '<0x0A>'
print_info: EOG token        = 2 '</s>'
print_info: max token length = 48
load_tensors: loading model tensors, this can take a while... (mmap = true)
load_tensors: layer   0 assigned to device CPU, is_swa = 0
load_tensors: layer   1 assigned to device CPU, is_swa = 0
load_tensors: layer   2 assigned to device CPU, is_swa = 0
load_tensors: layer   3 assigned to device CPU, is_swa = 0
load_tensors: layer   4 assigned to device CPU, is_swa = 0
load_tensors: layer   5 assigned to device CPU, is_swa = 0
load_tensors: layer   6 assigned to device CPU, is_swa = 0
load_tensors: layer   7 assigned to device CPU, is_swa = 0
load_tensors: layer   8 assigned to device CPU, is_swa = 0
load_tensors: layer   9 assigned to device CPU, is_swa = 0
load_tensors: layer  10 assigned to device CPU, is_swa = 0
load_tensors: layer  11 assigned to device CPU, is_swa = 0
load_tensors: layer  12 assigned to device CPU, is_swa = 0
load_tensors: layer  13 assigned to device CPU, is_swa = 0
load_tensors: layer  14 assigned to device CPU, is_swa = 0
load_tensors: layer  15 assigned to device CPU, is_swa = 0
load_tensors: layer  16 assigned to device CPU, is_swa = 0
load_tensors: layer  17 assigned to device CPU, is_swa = 0
load_tensors: layer  18 assigned to device CPU, is_swa = 0
load_tensors: layer  19 assigned to device CPU, is_swa = 0
load_tensors: layer  20 assigned to device CPU, is_swa = 0
load_tensors: layer  21 assigned to device CPU, is_swa = 0
load_tensors: layer  22 assigned to device CPU, is_swa = 0
load_tensors: layer  23 assigned to device CPU, is_swa = 0
load_tensors: layer  24 assigned to device CPU, is_swa = 0
load_tensors: layer  25 assigned to device CPU, is_swa = 0
load_tensors: layer  26 assigned to device CPU, is_swa = 0
load_tensors: layer  27 assigned to device CPU, is_swa = 0
load_tensors: layer  28 assigned to device CPU, is_swa = 0
load_tensors: layer  29 assigned to device CPU, is_swa = 0
load_tensors: layer  30 assigned to device CPU, is_swa = 0
load_tensors: layer  31 assigned to device CPU, is_swa = 0
load_tensors: layer  32 assigned to device CPU, is_swa = 0
load_tensors: tensor 'token_embd.weight' (q4_K) (and 98 others) cannot be used with preferred buffer type CPU_REPACK, using CPU instead
load_tensors:   CPU_REPACK model buffer size =  3204.00 MiB
load_tensors:   CPU_Mapped model buffer size =  4165.37 MiB
repack: repack tensor blk.0.attn_q.weight with q4_K_8x8
repack: repack tensor blk.0.attn_k.weight with q4_K_8x8
repack: repack tensor blk.0.attn_output.weight with q4_K_8x8
repack: repack tensor blk.0.ffn_gate.weight with q4_K_8x8
.repack: repack tensor blk.0.ffn_up.weight with q4_K_8x8
repack: repack tensor blk.1.attn_q.weight with q4_K_8x8
.repack: repack tensor blk.1.attn_k.weight with q4_K_8x8
repack: repack tensor blk.1.attn_output.weight with q4_K_8x8
repack: repack tensor blk.1.ffn_gate.weight with q4_K_8x8
.repack: repack tensor blk.1.ffn_up.weight with q4_K_8x8
repack: repack tensor blk.2.attn_q.weight with q4_K_8x8
.repack: repack tensor blk.2.attn_k.weight with q4_K_8x8
repack: repack tensor blk.2.attn_output.weight with q4_K_8x8
repack: repack tensor blk.2.ffn_gate.weight with q4_K_8x8
.repack: repack tensor blk.2.ffn_up.weight with q4_K_8x8
repack: repack tensor blk.3.attn_q.weight with q4_K_8x8
.repack: repack tensor blk.3.attn_k.weight with q4_K_8x8
repack: repack tensor blk.3.attn_output.weight with q4_K_8x8
repack: repack tensor blk.3.ffn_gate.weight with q4_K_8x8
.repack: repack tensor blk.3.ffn_up.weight with q4_K_8x8
repack: repack tensor blk.4.attn_q.weight with q4_K_8x8
.repack: repack tensor blk.4.attn_k.weight with q4_K_8x8
repack: repack tensor blk.4.attn_v.weight with q4_K_8x8
repack: repack tensor blk.4.attn_output.weight with q4_K_8x8
repack: repack tensor blk.4.ffn_gate.weight with q4_K_8x8
.repack: repack tensor blk.4.ffn_down.weight with q4_K_8x8
.repack: repack tensor blk.4.ffn_up.weight with q4_K_8x8
repack: repack tensor blk.5.attn_q.weight with q4_K_8x8
.repack: repack tensor blk.5.attn_k.weight with q4_K_8x8
repack: repack tensor blk.5.attn_v.weight with q4_K_8x8
repack: repack tensor blk.5.attn_output.weight with q4_K_8x8
repack: repack tensor blk.5.ffn_gate.weight with q4_K_8x8
.repack: repack tensor blk.5.ffn_down.weight with q4_K_8x8
repack: repack tensor blk.5.ffn_up.weight with q4_K_8x8
.repack: repack tensor blk.6.attn_q.weight with q4_K_8x8
repack: repack tensor blk.6.attn_k.weight with q4_K_8x8
repack: repack tensor blk.6.attn_output.weight with q4_K_8x8
.repack: repack tensor blk.6.ffn_gate.weight with q4_K_8x8
repack: repack tensor blk.6.ffn_up.weight with q4_K_8x8
.repack: repack tensor blk.7.attn_q.weight with q4_K_8x8
repack: repack tensor blk.7.attn_k.weight with q4_K_8x8
repack: repack tensor blk.7.attn_v.weight with q4_K_8x8
repack: repack tensor blk.7.attn_output.weight with q4_K_8x8
.repack: repack tensor blk.7.ffn_gate.weight with q4_K_8x8
repack: repack tensor blk.7.ffn_down.weight with q4_K_8x8
.repack: repack tensor blk.7.ffn_up.weight with q4_K_8x8
.repack: repack tensor blk.8.attn_q.weight with q4_K_8x8
repack: repack tensor blk.8.attn_k.weight with q4_K_8x8
repack: repack tensor blk.8.attn_v.weight with q4_K_8x8
repack: repack tensor blk.8.attn_output.weight with q4_K_8x8
repack: repack tensor blk.8.ffn_gate.weight with q4_K_8x8
.repack: repack tensor blk.8.ffn_down.weight with q4_K_8x8
.repack: repack tensor blk.8.ffn_up.weight with q4_K_8x8
.repack: repack tensor blk.9.attn_q.weight with q4_K_8x8
repack: repack tensor blk.9.attn_k.weight with q4_K_8x8
repack: repack tensor blk.9.attn_output.weight with q4_K_8x8
repack: repack tensor blk.9.ffn_gate.weight with q4_K_8x8
.repack: repack tensor blk.9.ffn_up.weight with q4_K_8x8
.repack: repack tensor blk.10.attn_q.weight with q4_K_8x8
repack: repack tensor blk.10.attn_k.weight with q4_K_8x8
repack: repack tensor blk.10.attn_v.weight with q4_K_8x8
repack: repack tensor blk.10.attn_output.weight with q4_K_8x8
repack: repack tensor blk.10.ffn_gate.weight with q4_K_8x8
.repack: repack tensor blk.10.ffn_down.weight with q4_K_8x8
.repack: repack tensor blk.10.ffn_up.weight with q4_K_8x8
.repack: repack tensor blk.11.attn_q.weight with q4_K_8x8
repack: repack tensor blk.11.attn_k.weight with q4_K_8x8
repack: repack tensor blk.11.attn_v.weight with q4_K_8x8
repack: repack tensor blk.11.attn_output.weight with q4_K_8x8
repack: repack tensor blk.11.ffn_gate.weight with q4_K_8x8
.repack: repack tensor blk.11.ffn_down.weight with q4_K_8x8
.repack: repack tensor blk.11.ffn_up.weight with q4_K_8x8
repack: repack tensor blk.12.attn_q.weight with q4_K_8x8
.repack: repack tensor blk.12.attn_k.weight with q4_K_8x8
repack: repack tensor blk.12.attn_output.weight with q4_K_8x8
repack: repack tensor blk.12.ffn_gate.weight with q4_K_8x8
.repack: repack tensor blk.12.ffn_up.weight with q4_K_8x8
repack: repack tensor blk.13.attn_q.weight with q4_K_8x8
.repack: repack tensor blk.13.attn_k.weight with q4_K_8x8
repack: repack tensor blk.13.attn_v.weight with q4_K_8x8
repack: repack tensor blk.13.attn_output.weight with q4_K_8x8
repack: repack tensor blk.13.ffn_gate.weight with q4_K_8x8
.repack: repack tensor blk.13.ffn_down.weight with q4_K_8x8
repack: repack tensor blk.13.ffn_up.weight with q4_K_8x8
.repack: repack tensor blk.14.attn_q.weight with q4_K_8x8
repack: repack tensor blk.14.attn_k.weight with q4_K_8x8
repack: repack tensor blk.14.attn_v.weight with q4_K_8x8
repack: repack tensor blk.14.attn_output.weight with q4_K_8x8
.repack: repack tensor blk.14.ffn_gate.weight with q4_K_8x8
repack: repack tensor blk.14.ffn_down.weight with q4_K_8x8
.repack: repack tensor blk.14.ffn_up.weight with q4_K_8x8
.repack: repack tensor blk.15.attn_q.weight with q4_K_8x8
repack: repack tensor blk.15.attn_k.weight with q4_K_8x8
repack: repack tensor blk.15.attn_output.weight with q4_K_8x8
repack: repack tensor blk.15.ffn_gate.weight with q4_K_8x8
.repack: repack tensor blk.15.ffn_up.weight with q4_K_8x8
.repack: repack tensor blk.16.attn_q.weight with q4_K_8x8
repack: repack tensor blk.16.attn_k.weight with q4_K_8x8
repack: repack tensor blk.16.attn_v.weight with q4_K_8x8
repack: repack tensor blk.16.attn_output.weight with q4_K_8x8
.repack: repack tensor blk.16.ffn_gate.weight with q4_K_8x8
repack: repack tensor blk.16.ffn_down.weight with q4_K_8x8
.repack: repack tensor blk.16.ffn_up.weight with q4_K_8x8
.repack: repack tensor blk.17.attn_q.weight with q4_K_8x8
repack: repack tensor blk.17.attn_k.weight with q4_K_8x8
repack: repack tensor blk.17.attn_v.weight with q4_K_8x8
repack: repack tensor blk.17.attn_output.weight with q4_K_8x8
repack: repack tensor blk.17.ffn_gate.weight with q4_K_8x8
.repack: repack tensor blk.17.ffn_down.weight with q4_K_8x8
.repack: repack tensor blk.17.ffn_up.weight with q4_K_8x8
.repack: repack tensor blk.18.attn_q.weight with q4_K_8x8
repack: repack tensor blk.18.attn_k.weight with q4_K_8x8
repack: repack tensor blk.18.attn_output.weight with q4_K_8x8
repack: repack tensor blk.18.ffn_gate.weight with q4_K_8x8
.repack: repack tensor blk.18.ffn_up.weight with q4_K_8x8
.repack: repack tensor blk.19.attn_q.weight with q4_K_8x8
repack: repack tensor blk.19.attn_k.weight with q4_K_8x8
repack: repack tensor blk.19.attn_v.weight with q4_K_8x8
repack: repack tensor blk.19.attn_output.weight with q4_K_8x8
repack: repack tensor blk.19.ffn_gate.weight with q4_K_8x8
.repack: repack tensor blk.19.ffn_down.weight with q4_K_8x8
.repack: repack tensor blk.19.ffn_up.weight with q4_K_8x8
repack: repack tensor blk.20.attn_q.weight with q4_K_8x8
.repack: repack tensor blk.20.attn_k.weight with q4_K_8x8
repack: repack tensor blk.20.attn_v.weight with q4_K_8x8
repack: repack tensor blk.20.attn_output.weight with q4_K_8x8
repack: repack tensor blk.20.ffn_gate.weight with q4_K_8x8
.repack: repack tensor blk.20.ffn_down.weight with q4_K_8x8
repack: repack tensor blk.20.ffn_up.weight with q4_K_8x8
.repack: repack tensor blk.21.attn_q.weight with q4_K_8x8
repack: repack tensor blk.21.attn_k.weight with q4_K_8x8
repack: repack tensor blk.21.attn_output.weight with q4_K_8x8
.repack: repack tensor blk.21.ffn_gate.weight with q4_K_8x8
repack: repack tensor blk.21.ffn_up.weight with q4_K_8x8
.repack: repack tensor blk.22.attn_q.weight with q4_K_8x8
repack: repack tensor blk.22.attn_k.weight with q4_K_8x8
repack: repack tensor blk.22.attn_v.weight with q4_K_8x8
.repack: repack tensor blk.22.attn_output.weight with q4_K_8x8
repack: repack tensor blk.22.ffn_gate.weight with q4_K_8x8
repack: repack tensor blk.22.ffn_down.weight with q4_K_8x8
.repack: repack tensor blk.22.ffn_up.weight with q4_K_8x8
.repack: repack tensor blk.23.attn_q.weight with q4_K_8x8
repack: repack tensor blk.23.attn_k.weight with q4_K_8x8
repack: repack tensor blk.23.attn_v.weight with q4_K_8x8
repack: repack tensor blk.23.attn_output.weight with q4_K_8x8
.repack: repack tensor blk.23.ffn_gate.weight with q4_K_8x8
repack: repack tensor blk.23.ffn_down.weight with q4_K_8x8
.repack: repack tensor blk.23.ffn_up.weight with q4_K_8x8
.repack: repack tensor blk.24.attn_q.weight with q4_K_8x8
repack: repack tensor blk.24.attn_k.weight with q4_K_8x8
repack: repack tensor blk.24.attn_output.weight with q4_K_8x8
repack: repack tensor blk.24.ffn_gate.weight with q4_K_8x8
.repack: repack tensor blk.24.ffn_up.weight with q4_K_8x8
.repack: repack tensor blk.25.attn_q.weight with q4_K_8x8
repack: repack tensor blk.25.attn_k.weight with q4_K_8x8
repack: repack tensor blk.25.attn_v.weight with q4_K_8x8
repack: repack tensor blk.25.attn_output.weight with q4_K_8x8
repack: repack tensor blk.25.ffn_gate.weight with q4_K_8x8
.repack: repack tensor blk.25.ffn_down.weight with q4_K_8x8
.repack: repack tensor blk.25.ffn_up.weight with q4_K_8x8
.repack: repack tensor blk.26.attn_q.weight with q4_K_8x8
repack: repack tensor blk.26.attn_k.weight with q4_K_8x8
repack: repack tensor blk.26.attn_v.weight with q4_K_8x8
repack: repack tensor blk.26.attn_output.weight with q4_K_8x8
repack: repack tensor blk.26.ffn_gate.weight with q4_K_8x8
.repack: repack tensor blk.26.ffn_down.weight with q4_K_8x8
.repack: repack tensor blk.26.ffn_up.weight with q4_K_8x8
repack: repack tensor blk.27.attn_q.weight with q4_K_8x8
.repack: repack tensor blk.27.attn_k.weight with q4_K_8x8
repack: repack tensor blk.27.attn_output.weight with q4_K_8x8
repack: repack tensor blk.27.ffn_gate.weight with q4_K_8x8
.repack: repack tensor blk.27.ffn_up.weight with q4_K_8x8
repack: repack tensor blk.28.attn_q.weight with q4_K_8x8
.repack: repack tensor blk.28.attn_k.weight with q4_K_8x8
repack: repack tensor blk.28.attn_output.weight with q4_K_8x8
repack: repack tensor blk.28.ffn_gate.weight with q4_K_8x8
.repack: repack tensor blk.28.ffn_up.weight with q4_K_8x8
repack: repack tensor blk.29.attn_q.weight with q4_K_8x8
.repack: repack tensor blk.29.attn_k.weight with q4_K_8x8
repack: repack tensor blk.29.attn_output.weight with q4_K_8x8
repack: repack tensor blk.29.ffn_gate.weight with q4_K_8x8
.repack: repack tensor blk.29.ffn_up.weight with q4_K_8x8
repack: repack tensor blk.30.attn_q.weight with q4_K_8x8
.repack: repack tensor blk.30.attn_k.weight with q4_K_8x8
repack: repack tensor blk.30.attn_output.weight with q4_K_8x8
repack: repack tensor blk.30.ffn_gate.weight with q4_K_8x8
.repack: repack tensor blk.30.ffn_up.weight with q4_K_8x8
repack: repack tensor blk.31.attn_q.weight with q4_K_8x8
.repack: repack tensor blk.31.attn_k.weight with q4_K_8x8
repack: repack tensor blk.31.attn_output.weight with q4_K_8x8
repack: repack tensor blk.31.ffn_gate.weight with q4_K_8x8
.repack: repack tensor blk.31.ffn_up.weight with q4_K_8x8
...................
llama_context: constructing llama_context
llama_context: n_batch is less than GGML_KQ_MASK_PAD - increasing to 64
llama_context: n_seq_max     = 1
llama_context: n_ctx         = 2048
llama_context: n_ctx_per_seq = 2048
llama_context: n_batch       = 64
llama_context: n_ubatch      = 8
llama_context: causal_attn   = 1
llama_context: flash_attn    = 0
llama_context: kv_unified    = false
llama_context: freq_base     = 1000000.0
llama_context: freq_scale    = 1
llama_context: n_ctx_per_seq (2048) < n_ctx_train (32768) -- the full capacity of the model will not be utilized
set_abort_callback: call
llama_context:        CPU  output buffer size =     0.12 MiB
create_memory: n_ctx = 2048 (padded)
llama_kv_cache_unified: layer   0: dev = CPU
llama_kv_cache_unified: layer   1: dev = CPU
llama_kv_cache_unified: layer   2: dev = CPU
llama_kv_cache_unified: layer   3: dev = CPU
llama_kv_cache_unified: layer   4: dev = CPU
llama_kv_cache_unified: layer   5: dev = CPU
llama_kv_cache_unified: layer   6: dev = CPU
llama_kv_cache_unified: layer   7: dev = CPU
llama_kv_cache_unified: layer   8: dev = CPU
llama_kv_cache_unified: layer   9: dev = CPU
llama_kv_cache_unified: layer  10: dev = CPU
llama_kv_cache_unified: layer  11: dev = CPU
llama_kv_cache_unified: layer  12: dev = CPU
llama_kv_cache_unified: layer  13: dev = CPU
llama_kv_cache_unified: layer  14: dev = CPU
llama_kv_cache_unified: layer  15: dev = CPU
llama_kv_cache_unified: layer  16: dev = CPU
llama_kv_cache_unified: layer  17: dev = CPU
llama_kv_cache_unified: layer  18: dev = CPU
llama_kv_cache_unified: layer  19: dev = CPU
llama_kv_cache_unified: layer  20: dev = CPU
llama_kv_cache_unified: layer  21: dev = CPU
llama_kv_cache_unified: layer  22: dev = CPU
llama_kv_cache_unified: layer  23: dev = CPU
llama_kv_cache_unified: layer  24: dev = CPU
llama_kv_cache_unified: layer  25: dev = CPU
llama_kv_cache_unified: layer  26: dev = CPU
llama_kv_cache_unified: layer  27: dev = CPU
llama_kv_cache_unified: layer  28: dev = CPU
llama_kv_cache_unified: layer  29: dev = CPU
llama_kv_cache_unified: layer  30: dev = CPU
llama_kv_cache_unified: layer  31: dev = CPU
llama_kv_cache_unified:        CPU KV buffer size =   256.00 MiB
llama_kv_cache_unified: size =  256.00 MiB (  2048 cells,  32 layers,  1/1 seqs), K (f16):  128.00 MiB, V (f16):  128.00 MiB
llama_context: enumerating backends
llama_context: backend_ptrs.size() = 1
llama_context: max_nodes = 2328
llama_context: worst-case: n_tokens = 8, n_seqs = 1, n_outputs = 0
graph_reserve: reserving a graph for ubatch with n_tokens =    8, n_seqs =  1, n_outputs =    8
graph_reserve: reserving a graph for ubatch with n_tokens =    1, n_seqs =  1, n_outputs =    1
graph_reserve: reserving a graph for ubatch with n_tokens =    8, n_seqs =  1, n_outputs =    8
llama_context:        CPU compute buffer size =     3.06 MiB
llama_context: graph nodes  = 1126
llama_context: graph splits = 1
CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | LLAMAFILE = 1 | OPENMP = 1 | REPACK = 1 | 
Model metadata: {'general.name': 'mistralai_mistral-7b-instruct-v0.2', 'general.architecture': 'llama', 'llama.context_length': '32768', 'llama.rope.dimension_count': '128', 'llama.embedding_length': '4096', 'llama.block_count': '32', 'llama.feed_forward_length': '14336', 'llama.attention.head_count': '32', 'tokenizer.ggml.eos_token_id': '2', 'general.file_type': '15', 'llama.attention.head_count_kv': '8', 'llama.attention.layer_norm_rms_epsilon': '0.000010', 'llama.rope.freq_base': '1000000.000000', 'tokenizer.ggml.model': 'llama', 'general.quantization_version': '2', 'tokenizer.ggml.bos_token_id': '1', 'tokenizer.ggml.unknown_token_id': '0', 'tokenizer.ggml.padding_token_id': '0', 'tokenizer.ggml.add_bos_token': 'true', 'tokenizer.ggml.add_eos_token': 'false', 'tokenizer.chat_template': "{{ bos_token }}{% for message in messages %}{% if (message['role'] == 'user') != (loop.index0 % 2 == 0) %}{{ raise_exception('Conversation roles must alternate user/assistant/user/assistant/...') }}{% endif %}{% if message['role'] == 'user' %}{{ '[INST] ' + message['content'] + ' [/INST]' }}{% elif message['role'] == 'assistant' %}{{ message['content'] + eos_token}}{% else %}{{ raise_exception('Only user and assistant roles are supported!') }}{% endif %}{% endfor %}"}
Available chat formats from metadata: chat_template.default
Guessed chat format: mistral-instruct
Building index from SQLite database...
Loading embedding model: intfloat/e5-small-v2 on CPU
Index saved to faiss_index
LLM is explicitly disabled. Using MockLLM.
llama_model_loader: loaded meta data with 24 key-value pairs and 291 tensors from C:/Users/Prakhar Srivastava/Desktop/AskQuery/models/Mistral/mistral-7b-instruct-v0.2.Q4_K_M.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = llama
llama_model_loader: - kv   1:                               general.name str              = mistralai_mistral-7b-instruct-v0.2
llama_model_loader: - kv   2:                       llama.context_length u32              = 32768
llama_model_loader: - kv   3:                     llama.embedding_length u32              = 4096
llama_model_loader: - kv   4:                          llama.block_count u32              = 32
llama_model_loader: - kv   5:                  llama.feed_forward_length u32              = 14336
llama_model_loader: - kv   6:                 llama.rope.dimension_count u32              = 128
llama_model_loader: - kv   7:                 llama.attention.head_count u32              = 32
llama_model_loader: - kv   8:              llama.attention.head_count_kv u32              = 8
llama_model_loader: - kv   9:     llama.attention.layer_norm_rms_epsilon f32              = 0.000010
llama_model_loader: - kv  10:                       llama.rope.freq_base f32              = 1000000.000000
llama_model_loader: - kv  11:                          general.file_type u32              = 15
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,32000]   = ["<unk>", "<s>", "</s>", "<0x00>", "<...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,32000]   = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,32000]   = [2, 3, 3, 6, 6, 6, 6, 6, 6, 6, 6, 6, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 1
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 2
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 0
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% for message in mess...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - type  f32:   65 tensors
llama_model_loader: - type q4_K:  193 tensors
llama_model_loader: - type q6_K:   33 tensors
print_info: file format = GGUF V3 (latest)
print_info: file type   = Q4_K - Medium
print_info: file size   = 4.07 GiB (4.83 BPW) 
init_tokenizer: initializing tokenizer for type 1
load: control token:      2 '</s>' is not marked as EOG
load: control token:      1 '<s>' is not marked as EOG
load: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
load: printing all EOG tokens:
load:   - 2 ('</s>')
load: special tokens cache size = 3
load: token to piece cache size = 0.1637 MB
print_info: arch             = llama
print_info: vocab_only       = 0
print_info: n_ctx_train      = 32768
print_info: n_embd           = 4096
print_info: n_layer          = 32
print_info: n_head           = 32
print_info: n_head_kv        = 8
print_info: n_rot            = 128
print_info: n_swa            = 0
print_info: is_swa_any       = 0
print_info: n_embd_head_k    = 128
print_info: n_embd_head_v    = 128
print_info: n_gqa            = 4
print_info: n_embd_k_gqa     = 1024
print_info: n_embd_v_gqa     = 1024
print_info: f_norm_eps       = 0.0e+00
print_info: f_norm_rms_eps   = 1.0e-05
print_info: f_clamp_kqv      = 0.0e+00
print_info: f_max_alibi_bias = 0.0e+00
print_info: f_logit_scale    = 0.0e+00
print_info: f_attn_scale     = 0.0e+00
print_info: n_ff             = 14336
print_info: n_expert         = 0
print_info: n_expert_used    = 0
print_info: causal attn      = 1
print_info: pooling type     = 0
print_info: rope type        = 0
print_info: rope scaling     = linear
print_info: freq_base_train  = 1000000.0
print_info: freq_scale_train = 1
print_info: n_ctx_orig_yarn  = 32768
print_info: rope_finetuned   = unknown
print_info: model type       = 7B
print_info: model params     = 7.24 B
print_info: general.name     = mistralai_mistral-7b-instruct-v0.2
print_info: vocab type       = SPM
print_info: n_vocab          = 32000
print_info: n_merges         = 0
print_info: BOS token        = 1 '<s>'
print_info: EOS token        = 2 '</s>'
print_info: UNK token        = 0 '<unk>'
print_info: PAD token        = 0 '<unk>'
print_info: LF token         = 13 '<0x0A>'
print_info: EOG token        = 2 '</s>'
print_info: max token length = 48
load_tensors: loading model tensors, this can take a while... (mmap = true)
load_tensors: layer   0 assigned to device CPU, is_swa = 0
load_tensors: layer   1 assigned to device CPU, is_swa = 0
load_tensors: layer   2 assigned to device CPU, is_swa = 0
load_tensors: layer   3 assigned to device CPU, is_swa = 0
load_tensors: layer   4 assigned to device CPU, is_swa = 0
load_tensors: layer   5 assigned to device CPU, is_swa = 0
load_tensors: layer   6 assigned to device CPU, is_swa = 0
load_tensors: layer   7 assigned to device CPU, is_swa = 0
load_tensors: layer   8 assigned to device CPU, is_swa = 0
load_tensors: layer   9 assigned to device CPU, is_swa = 0
load_tensors: layer  10 assigned to device CPU, is_swa = 0
load_tensors: layer  11 assigned to device CPU, is_swa = 0
load_tensors: layer  12 assigned to device CPU, is_swa = 0
load_tensors: layer  13 assigned to device CPU, is_swa = 0
load_tensors: layer  14 assigned to device CPU, is_swa = 0
load_tensors: layer  15 assigned to device CPU, is_swa = 0
load_tensors: layer  16 assigned to device CPU, is_swa = 0
load_tensors: layer  17 assigned to device CPU, is_swa = 0
load_tensors: layer  18 assigned to device CPU, is_swa = 0
load_tensors: layer  19 assigned to device CPU, is_swa = 0
load_tensors: layer  20 assigned to device CPU, is_swa = 0
load_tensors: layer  21 assigned to device CPU, is_swa = 0
load_tensors: layer  22 assigned to device CPU, is_swa = 0
load_tensors: layer  23 assigned to device CPU, is_swa = 0
load_tensors: layer  24 assigned to device CPU, is_swa = 0
load_tensors: layer  25 assigned to device CPU, is_swa = 0
load_tensors: layer  26 assigned to device CPU, is_swa = 0
load_tensors: layer  27 assigned to device CPU, is_swa = 0
load_tensors: layer  28 assigned to device CPU, is_swa = 0
load_tensors: layer  29 assigned to device CPU, is_swa = 0
load_tensors: layer  30 assigned to device CPU, is_swa = 0
load_tensors: layer  31 assigned to device CPU, is_swa = 0
load_tensors: layer  32 assigned to device CPU, is_swa = 0
load_tensors: tensor 'token_embd.weight' (q4_K) (and 98 others) cannot be used with preferred buffer type CPU_REPACK, using CPU instead
load_tensors:   CPU_REPACK model buffer size =  3204.00 MiB
load_tensors:   CPU_Mapped model buffer size =  4165.37 MiB
repack: repack tensor blk.0.attn_q.weight with q4_K_8x8
repack: repack tensor blk.0.attn_k.weight with q4_K_8x8
repack: repack tensor blk.0.attn_output.weight with q4_K_8x8
repack: repack tensor blk.0.ffn_gate.weight with q4_K_8x8
.repack: repack tensor blk.0.ffn_up.weight with q4_K_8x8
repack: repack tensor blk.1.attn_q.weight with q4_K_8x8
.repack: repack tensor blk.1.attn_k.weight with q4_K_8x8
repack: repack tensor blk.1.attn_output.weight with q4_K_8x8
repack: repack tensor blk.1.ffn_gate.weight with q4_K_8x8
.repack: repack tensor blk.1.ffn_up.weight with q4_K_8x8
repack: repack tensor blk.2.attn_q.weight with q4_K_8x8
.repack: repack tensor blk.2.attn_k.weight with q4_K_8x8
repack: repack tensor blk.2.attn_output.weight with q4_K_8x8
repack: repack tensor blk.2.ffn_gate.weight with q4_K_8x8
.repack: repack tensor blk.2.ffn_up.weight with q4_K_8x8
repack: repack tensor blk.3.attn_q.weight with q4_K_8x8
.repack: repack tensor blk.3.attn_k.weight with q4_K_8x8
repack: repack tensor blk.3.attn_output.weight with q4_K_8x8
repack: repack tensor blk.3.ffn_gate.weight with q4_K_8x8
.repack: repack tensor blk.3.ffn_up.weight with q4_K_8x8
repack: repack tensor blk.4.attn_q.weight with q4_K_8x8
.repack: repack tensor blk.4.attn_k.weight with q4_K_8x8
repack: repack tensor blk.4.attn_v.weight with q4_K_8x8
repack: repack tensor blk.4.attn_output.weight with q4_K_8x8
repack: repack tensor blk.4.ffn_gate.weight with q4_K_8x8
.repack: repack tensor blk.4.ffn_down.weight with q4_K_8x8
.repack: repack tensor blk.4.ffn_up.weight with q4_K_8x8
repack: repack tensor blk.5.attn_q.weight with q4_K_8x8
.repack: repack tensor blk.5.attn_k.weight with q4_K_8x8
repack: repack tensor blk.5.attn_v.weight with q4_K_8x8
repack: repack tensor blk.5.attn_output.weight with q4_K_8x8
repack: repack tensor blk.5.ffn_gate.weight with q4_K_8x8
.repack: repack tensor blk.5.ffn_down.weight with q4_K_8x8
repack: repack tensor blk.5.ffn_up.weight with q4_K_8x8
.repack: repack tensor blk.6.attn_q.weight with q4_K_8x8
repack: repack tensor blk.6.attn_k.weight with q4_K_8x8
repack: repack tensor blk.6.attn_output.weight with q4_K_8x8
.repack: repack tensor blk.6.ffn_gate.weight with q4_K_8x8
repack: repack tensor blk.6.ffn_up.weight with q4_K_8x8
.repack: repack tensor blk.7.attn_q.weight with q4_K_8x8
repack: repack tensor blk.7.attn_k.weight with q4_K_8x8
repack: repack tensor blk.7.attn_v.weight with q4_K_8x8
repack: repack tensor blk.7.attn_output.weight with q4_K_8x8
.repack: repack tensor blk.7.ffn_gate.weight with q4_K_8x8
repack: repack tensor blk.7.ffn_down.weight with q4_K_8x8
.repack: repack tensor blk.7.ffn_up.weight with q4_K_8x8
.repack: repack tensor blk.8.attn_q.weight with q4_K_8x8
repack: repack tensor blk.8.attn_k.weight with q4_K_8x8
repack: repack tensor blk.8.attn_v.weight with q4_K_8x8
repack: repack tensor blk.8.attn_output.weight with q4_K_8x8
repack: repack tensor blk.8.ffn_gate.weight with q4_K_8x8
.repack: repack tensor blk.8.ffn_down.weight with q4_K_8x8
.repack: repack tensor blk.8.ffn_up.weight with q4_K_8x8
.repack: repack tensor blk.9.attn_q.weight with q4_K_8x8
repack: repack tensor blk.9.attn_k.weight with q4_K_8x8
repack: repack tensor blk.9.attn_output.weight with q4_K_8x8
repack: repack tensor blk.9.ffn_gate.weight with q4_K_8x8
.repack: repack tensor blk.9.ffn_up.weight with q4_K_8x8
.repack: repack tensor blk.10.attn_q.weight with q4_K_8x8
repack: repack tensor blk.10.attn_k.weight with q4_K_8x8
repack: repack tensor blk.10.attn_v.weight with q4_K_8x8
repack: repack tensor blk.10.attn_output.weight with q4_K_8x8
repack: repack tensor blk.10.ffn_gate.weight with q4_K_8x8
.repack: repack tensor blk.10.ffn_down.weight with q4_K_8x8
.repack: repack tensor blk.10.ffn_up.weight with q4_K_8x8
.repack: repack tensor blk.11.attn_q.weight with q4_K_8x8
repack: repack tensor blk.11.attn_k.weight with q4_K_8x8
repack: repack tensor blk.11.attn_v.weight with q4_K_8x8
repack: repack tensor blk.11.attn_output.weight with q4_K_8x8
repack: repack tensor blk.11.ffn_gate.weight with q4_K_8x8
.repack: repack tensor blk.11.ffn_down.weight with q4_K_8x8
.repack: repack tensor blk.11.ffn_up.weight with q4_K_8x8
repack: repack tensor blk.12.attn_q.weight with q4_K_8x8
.repack: repack tensor blk.12.attn_k.weight with q4_K_8x8
repack: repack tensor blk.12.attn_output.weight with q4_K_8x8
repack: repack tensor blk.12.ffn_gate.weight with q4_K_8x8
.repack: repack tensor blk.12.ffn_up.weight with q4_K_8x8
repack: repack tensor blk.13.attn_q.weight with q4_K_8x8
.repack: repack tensor blk.13.attn_k.weight with q4_K_8x8
repack: repack tensor blk.13.attn_v.weight with q4_K_8x8
repack: repack tensor blk.13.attn_output.weight with q4_K_8x8
repack: repack tensor blk.13.ffn_gate.weight with q4_K_8x8
.repack: repack tensor blk.13.ffn_down.weight with q4_K_8x8
repack: repack tensor blk.13.ffn_up.weight with q4_K_8x8
.repack: repack tensor blk.14.attn_q.weight with q4_K_8x8
repack: repack tensor blk.14.attn_k.weight with q4_K_8x8
repack: repack tensor blk.14.attn_v.weight with q4_K_8x8
repack: repack tensor blk.14.attn_output.weight with q4_K_8x8
.repack: repack tensor blk.14.ffn_gate.weight with q4_K_8x8
repack: repack tensor blk.14.ffn_down.weight with q4_K_8x8
.repack: repack tensor blk.14.ffn_up.weight with q4_K_8x8
.repack: repack tensor blk.15.attn_q.weight with q4_K_8x8
repack: repack tensor blk.15.attn_k.weight with q4_K_8x8
repack: repack tensor blk.15.attn_output.weight with q4_K_8x8
repack: repack tensor blk.15.ffn_gate.weight with q4_K_8x8
.repack: repack tensor blk.15.ffn_up.weight with q4_K_8x8
.repack: repack tensor blk.16.attn_q.weight with q4_K_8x8
repack: repack tensor blk.16.attn_k.weight with q4_K_8x8
repack: repack tensor blk.16.attn_v.weight with q4_K_8x8
repack: repack tensor blk.16.attn_output.weight with q4_K_8x8
.repack: repack tensor blk.16.ffn_gate.weight with q4_K_8x8
repack: repack tensor blk.16.ffn_down.weight with q4_K_8x8
.repack: repack tensor blk.16.ffn_up.weight with q4_K_8x8
.repack: repack tensor blk.17.attn_q.weight with q4_K_8x8
repack: repack tensor blk.17.attn_k.weight with q4_K_8x8
repack: repack tensor blk.17.attn_v.weight with q4_K_8x8
repack: repack tensor blk.17.attn_output.weight with q4_K_8x8
repack: repack tensor blk.17.ffn_gate.weight with q4_K_8x8
.repack: repack tensor blk.17.ffn_down.weight with q4_K_8x8
.repack: repack tensor blk.17.ffn_up.weight with q4_K_8x8
.repack: repack tensor blk.18.attn_q.weight with q4_K_8x8
repack: repack tensor blk.18.attn_k.weight with q4_K_8x8
repack: repack tensor blk.18.attn_output.weight with q4_K_8x8
repack: repack tensor blk.18.ffn_gate.weight with q4_K_8x8
.repack: repack tensor blk.18.ffn_up.weight with q4_K_8x8
.repack: repack tensor blk.19.attn_q.weight with q4_K_8x8
repack: repack tensor blk.19.attn_k.weight with q4_K_8x8
repack: repack tensor blk.19.attn_v.weight with q4_K_8x8
repack: repack tensor blk.19.attn_output.weight with q4_K_8x8
repack: repack tensor blk.19.ffn_gate.weight with q4_K_8x8
.repack: repack tensor blk.19.ffn_down.weight with q4_K_8x8
.repack: repack tensor blk.19.ffn_up.weight with q4_K_8x8
repack: repack tensor blk.20.attn_q.weight with q4_K_8x8
.repack: repack tensor blk.20.attn_k.weight with q4_K_8x8
repack: repack tensor blk.20.attn_v.weight with q4_K_8x8
repack: repack tensor blk.20.attn_output.weight with q4_K_8x8
repack: repack tensor blk.20.ffn_gate.weight with q4_K_8x8
.repack: repack tensor blk.20.ffn_down.weight with q4_K_8x8
repack: repack tensor blk.20.ffn_up.weight with q4_K_8x8
.repack: repack tensor blk.21.attn_q.weight with q4_K_8x8
repack: repack tensor blk.21.attn_k.weight with q4_K_8x8
repack: repack tensor blk.21.attn_output.weight with q4_K_8x8
.repack: repack tensor blk.21.ffn_gate.weight with q4_K_8x8
repack: repack tensor blk.21.ffn_up.weight with q4_K_8x8
.repack: repack tensor blk.22.attn_q.weight with q4_K_8x8
repack: repack tensor blk.22.attn_k.weight with q4_K_8x8
repack: repack tensor blk.22.attn_v.weight with q4_K_8x8
.repack: repack tensor blk.22.attn_output.weight with q4_K_8x8
repack: repack tensor blk.22.ffn_gate.weight with q4_K_8x8
repack: repack tensor blk.22.ffn_down.weight with q4_K_8x8
.repack: repack tensor blk.22.ffn_up.weight with q4_K_8x8
.repack: repack tensor blk.23.attn_q.weight with q4_K_8x8
repack: repack tensor blk.23.attn_k.weight with q4_K_8x8
repack: repack tensor blk.23.attn_v.weight with q4_K_8x8
repack: repack tensor blk.23.attn_output.weight with q4_K_8x8
.repack: repack tensor blk.23.ffn_gate.weight with q4_K_8x8
repack: repack tensor blk.23.ffn_down.weight with q4_K_8x8
.repack: repack tensor blk.23.ffn_up.weight with q4_K_8x8
.repack: repack tensor blk.24.attn_q.weight with q4_K_8x8
repack: repack tensor blk.24.attn_k.weight with q4_K_8x8
repack: repack tensor blk.24.attn_output.weight with q4_K_8x8
repack: repack tensor blk.24.ffn_gate.weight with q4_K_8x8
.repack: repack tensor blk.24.ffn_up.weight with q4_K_8x8
.repack: repack tensor blk.25.attn_q.weight with q4_K_8x8
repack: repack tensor blk.25.attn_k.weight with q4_K_8x8
repack: repack tensor blk.25.attn_v.weight with q4_K_8x8
repack: repack tensor blk.25.attn_output.weight with q4_K_8x8
repack: repack tensor blk.25.ffn_gate.weight with q4_K_8x8
.repack: repack tensor blk.25.ffn_down.weight with q4_K_8x8
.repack: repack tensor blk.25.ffn_up.weight with q4_K_8x8
.repack: repack tensor blk.26.attn_q.weight with q4_K_8x8
repack: repack tensor blk.26.attn_k.weight with q4_K_8x8
repack: repack tensor blk.26.attn_v.weight with q4_K_8x8
repack: repack tensor blk.26.attn_output.weight with q4_K_8x8
repack: repack tensor blk.26.ffn_gate.weight with q4_K_8x8
.repack: repack tensor blk.26.ffn_down.weight with q4_K_8x8
.repack: repack tensor blk.26.ffn_up.weight with q4_K_8x8
repack: repack tensor blk.27.attn_q.weight with q4_K_8x8
.repack: repack tensor blk.27.attn_k.weight with q4_K_8x8
repack: repack tensor blk.27.attn_output.weight with q4_K_8x8
repack: repack tensor blk.27.ffn_gate.weight with q4_K_8x8
.repack: repack tensor blk.27.ffn_up.weight with q4_K_8x8
repack: repack tensor blk.28.attn_q.weight with q4_K_8x8
.repack: repack tensor blk.28.attn_k.weight with q4_K_8x8
repack: repack tensor blk.28.attn_output.weight with q4_K_8x8
repack: repack tensor blk.28.ffn_gate.weight with q4_K_8x8
.repack: repack tensor blk.28.ffn_up.weight with q4_K_8x8
repack: repack tensor blk.29.attn_q.weight with q4_K_8x8
.repack: repack tensor blk.29.attn_k.weight with q4_K_8x8
repack: repack tensor blk.29.attn_output.weight with q4_K_8x8
repack: repack tensor blk.29.ffn_gate.weight with q4_K_8x8
.repack: repack tensor blk.29.ffn_up.weight with q4_K_8x8
repack: repack tensor blk.30.attn_q.weight with q4_K_8x8
.repack: repack tensor blk.30.attn_k.weight with q4_K_8x8
repack: repack tensor blk.30.attn_output.weight with q4_K_8x8
repack: repack tensor blk.30.ffn_gate.weight with q4_K_8x8
.repack: repack tensor blk.30.ffn_up.weight with q4_K_8x8
repack: repack tensor blk.31.attn_q.weight with q4_K_8x8
.repack: repack tensor blk.31.attn_k.weight with q4_K_8x8
repack: repack tensor blk.31.attn_output.weight with q4_K_8x8
repack: repack tensor blk.31.ffn_gate.weight with q4_K_8x8
.repack: repack tensor blk.31.ffn_up.weight with q4_K_8x8
...................
llama_context: constructing llama_context
llama_context: n_batch is less than GGML_KQ_MASK_PAD - increasing to 64
llama_context: n_seq_max     = 1
llama_context: n_ctx         = 2048
llama_context: n_ctx_per_seq = 2048
llama_context: n_batch       = 64
llama_context: n_ubatch      = 8
llama_context: causal_attn   = 1
llama_context: flash_attn    = 0
llama_context: kv_unified    = false
llama_context: freq_base     = 1000000.0
llama_context: freq_scale    = 1
llama_context: n_ctx_per_seq (2048) < n_ctx_train (32768) -- the full capacity of the model will not be utilized
set_abort_callback: call
llama_context:        CPU  output buffer size =     0.12 MiB
create_memory: n_ctx = 2048 (padded)
llama_kv_cache_unified: layer   0: dev = CPU
llama_kv_cache_unified: layer   1: dev = CPU
llama_kv_cache_unified: layer   2: dev = CPU
llama_kv_cache_unified: layer   3: dev = CPU
llama_kv_cache_unified: layer   4: dev = CPU
llama_kv_cache_unified: layer   5: dev = CPU
llama_kv_cache_unified: layer   6: dev = CPU
llama_kv_cache_unified: layer   7: dev = CPU
llama_kv_cache_unified: layer   8: dev = CPU
llama_kv_cache_unified: layer   9: dev = CPU
llama_kv_cache_unified: layer  10: dev = CPU
llama_kv_cache_unified: layer  11: dev = CPU
llama_kv_cache_unified: layer  12: dev = CPU
llama_kv_cache_unified: layer  13: dev = CPU
llama_kv_cache_unified: layer  14: dev = CPU
llama_kv_cache_unified: layer  15: dev = CPU
llama_kv_cache_unified: layer  16: dev = CPU
llama_kv_cache_unified: layer  17: dev = CPU
llama_kv_cache_unified: layer  18: dev = CPU
llama_kv_cache_unified: layer  19: dev = CPU
llama_kv_cache_unified: layer  20: dev = CPU
llama_kv_cache_unified: layer  21: dev = CPU
llama_kv_cache_unified: layer  22: dev = CPU
llama_kv_cache_unified: layer  23: dev = CPU
llama_kv_cache_unified: layer  24: dev = CPU
llama_kv_cache_unified: layer  25: dev = CPU
llama_kv_cache_unified: layer  26: dev = CPU
llama_kv_cache_unified: layer  27: dev = CPU
llama_kv_cache_unified: layer  28: dev = CPU
llama_kv_cache_unified: layer  29: dev = CPU
llama_kv_cache_unified: layer  30: dev = CPU
llama_kv_cache_unified: layer  31: dev = CPU
llama_kv_cache_unified:        CPU KV buffer size =   256.00 MiB
llama_kv_cache_unified: size =  256.00 MiB (  2048 cells,  32 layers,  1/1 seqs), K (f16):  128.00 MiB, V (f16):  128.00 MiB
llama_context: enumerating backends
llama_context: backend_ptrs.size() = 1
llama_context: max_nodes = 2328
llama_context: worst-case: n_tokens = 8, n_seqs = 1, n_outputs = 0
graph_reserve: reserving a graph for ubatch with n_tokens =    8, n_seqs =  1, n_outputs =    8
graph_reserve: reserving a graph for ubatch with n_tokens =    1, n_seqs =  1, n_outputs =    1
graph_reserve: reserving a graph for ubatch with n_tokens =    8, n_seqs =  1, n_outputs =    8
llama_context:        CPU compute buffer size =     3.06 MiB
llama_context: graph nodes  = 1126
llama_context: graph splits = 1
CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | LLAMAFILE = 1 | OPENMP = 1 | REPACK = 1 | 
Model metadata: {'general.name': 'mistralai_mistral-7b-instruct-v0.2', 'general.architecture': 'llama', 'llama.context_length': '32768', 'llama.rope.dimension_count': '128', 'llama.embedding_length': '4096', 'llama.block_count': '32', 'llama.feed_forward_length': '14336', 'llama.attention.head_count': '32', 'tokenizer.ggml.eos_token_id': '2', 'general.file_type': '15', 'llama.attention.head_count_kv': '8', 'llama.attention.layer_norm_rms_epsilon': '0.000010', 'llama.rope.freq_base': '1000000.000000', 'tokenizer.ggml.model': 'llama', 'general.quantization_version': '2', 'tokenizer.ggml.bos_token_id': '1', 'tokenizer.ggml.unknown_token_id': '0', 'tokenizer.ggml.padding_token_id': '0', 'tokenizer.ggml.add_bos_token': 'true', 'tokenizer.ggml.add_eos_token': 'false', 'tokenizer.chat_template': "{{ bos_token }}{% for message in messages %}{% if (message['role'] == 'user') != (loop.index0 % 2 == 0) %}{{ raise_exception('Conversation roles must alternate user/assistant/user/assistant/...') }}{% endif %}{% if message['role'] == 'user' %}{{ '[INST] ' + message['content'] + ' [/INST]' }}{% elif message['role'] == 'assistant' %}{{ message['content'] + eos_token}}{% else %}{{ raise_exception('Only user and assistant roles are supported!') }}{% endif %}{% endfor %}"}
Available chat formats from metadata: chat_template.default
Guessed chat format: mistral-instruct
Building index from SQLite database...
Loading embedding model: intfloat/e5-small-v2 on CPU
Index saved to faiss_index
llama_model_loader: loaded meta data with 24 key-value pairs and 291 tensors from C:/Users/Prakhar Srivastava/Desktop/AskQuery/models/Mistral/mistral-7b-instruct-v0.2.Q4_K_M.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = llama
llama_model_loader: - kv   1:                               general.name str              = mistralai_mistral-7b-instruct-v0.2
llama_model_loader: - kv   2:                       llama.context_length u32              = 32768
llama_model_loader: - kv   3:                     llama.embedding_length u32              = 4096
llama_model_loader: - kv   4:                          llama.block_count u32              = 32
llama_model_loader: - kv   5:                  llama.feed_forward_length u32              = 14336
llama_model_loader: - kv   6:                 llama.rope.dimension_count u32              = 128
llama_model_loader: - kv   7:                 llama.attention.head_count u32              = 32
llama_model_loader: - kv   8:              llama.attention.head_count_kv u32              = 8
llama_model_loader: - kv   9:     llama.attention.layer_norm_rms_epsilon f32              = 0.000010
llama_model_loader: - kv  10:                       llama.rope.freq_base f32              = 1000000.000000
llama_model_loader: - kv  11:                          general.file_type u32              = 15
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,32000]   = ["<unk>", "<s>", "</s>", "<0x00>", "<...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,32000]   = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,32000]   = [2, 3, 3, 6, 6, 6, 6, 6, 6, 6, 6, 6, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 1
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 2
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 0
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% for message in mess...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - type  f32:   65 tensors
llama_model_loader: - type q4_K:  193 tensors
llama_model_loader: - type q6_K:   33 tensors
print_info: file format = GGUF V3 (latest)
print_info: file type   = Q4_K - Medium
print_info: file size   = 4.07 GiB (4.83 BPW) 
init_tokenizer: initializing tokenizer for type 1
load: control token:      2 '</s>' is not marked as EOG
load: control token:      1 '<s>' is not marked as EOG
load: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
load: printing all EOG tokens:
load:   - 2 ('</s>')
load: special tokens cache size = 3
load: token to piece cache size = 0.1637 MB
print_info: arch             = llama
print_info: vocab_only       = 0
print_info: n_ctx_train      = 32768
print_info: n_embd           = 4096
print_info: n_layer          = 32
print_info: n_head           = 32
print_info: n_head_kv        = 8
print_info: n_rot            = 128
print_info: n_swa            = 0
print_info: is_swa_any       = 0
print_info: n_embd_head_k    = 128
print_info: n_embd_head_v    = 128
print_info: n_gqa            = 4
print_info: n_embd_k_gqa     = 1024
print_info: n_embd_v_gqa     = 1024
print_info: f_norm_eps       = 0.0e+00
print_info: f_norm_rms_eps   = 1.0e-05
print_info: f_clamp_kqv      = 0.0e+00
print_info: f_max_alibi_bias = 0.0e+00
print_info: f_logit_scale    = 0.0e+00
print_info: f_attn_scale     = 0.0e+00
print_info: n_ff             = 14336
print_info: n_expert         = 0
print_info: n_expert_used    = 0
print_info: causal attn      = 1
print_info: pooling type     = 0
print_info: rope type        = 0
print_info: rope scaling     = linear
print_info: freq_base_train  = 1000000.0
print_info: freq_scale_train = 1
print_info: n_ctx_orig_yarn  = 32768
print_info: rope_finetuned   = unknown
print_info: model type       = 7B
print_info: model params     = 7.24 B
print_info: general.name     = mistralai_mistral-7b-instruct-v0.2
print_info: vocab type       = SPM
print_info: n_vocab          = 32000
print_info: n_merges         = 0
print_info: BOS token        = 1 '<s>'
print_info: EOS token        = 2 '</s>'
print_info: UNK token        = 0 '<unk>'
print_info: PAD token        = 0 '<unk>'
print_info: LF token         = 13 '<0x0A>'
print_info: EOG token        = 2 '</s>'
print_info: max token length = 48
load_tensors: loading model tensors, this can take a while... (mmap = true)
load_tensors: layer   0 assigned to device CPU, is_swa = 0
load_tensors: layer   1 assigned to device CPU, is_swa = 0
load_tensors: layer   2 assigned to device CPU, is_swa = 0
load_tensors: layer   3 assigned to device CPU, is_swa = 0
load_tensors: layer   4 assigned to device CPU, is_swa = 0
load_tensors: layer   5 assigned to device CPU, is_swa = 0
load_tensors: layer   6 assigned to device CPU, is_swa = 0
load_tensors: layer   7 assigned to device CPU, is_swa = 0
load_tensors: layer   8 assigned to device CPU, is_swa = 0
load_tensors: layer   9 assigned to device CPU, is_swa = 0
load_tensors: layer  10 assigned to device CPU, is_swa = 0
load_tensors: layer  11 assigned to device CPU, is_swa = 0
load_tensors: layer  12 assigned to device CPU, is_swa = 0
load_tensors: layer  13 assigned to device CPU, is_swa = 0
load_tensors: layer  14 assigned to device CPU, is_swa = 0
load_tensors: layer  15 assigned to device CPU, is_swa = 0
load_tensors: layer  16 assigned to device CPU, is_swa = 0
load_tensors: layer  17 assigned to device CPU, is_swa = 0
load_tensors: layer  18 assigned to device CPU, is_swa = 0
load_tensors: layer  19 assigned to device CPU, is_swa = 0
load_tensors: layer  20 assigned to device CPU, is_swa = 0
load_tensors: layer  21 assigned to device CPU, is_swa = 0
load_tensors: layer  22 assigned to device CPU, is_swa = 0
load_tensors: layer  23 assigned to device CPU, is_swa = 0
load_tensors: layer  24 assigned to device CPU, is_swa = 0
load_tensors: layer  25 assigned to device CPU, is_swa = 0
load_tensors: layer  26 assigned to device CPU, is_swa = 0
load_tensors: layer  27 assigned to device CPU, is_swa = 0
load_tensors: layer  28 assigned to device CPU, is_swa = 0
load_tensors: layer  29 assigned to device CPU, is_swa = 0
load_tensors: layer  30 assigned to device CPU, is_swa = 0
load_tensors: layer  31 assigned to device CPU, is_swa = 0
load_tensors: layer  32 assigned to device CPU, is_swa = 0
load_tensors: tensor 'token_embd.weight' (q4_K) (and 98 others) cannot be used with preferred buffer type CPU_REPACK, using CPU instead
load_tensors:   CPU_REPACK model buffer size =  3204.00 MiB
load_tensors:   CPU_Mapped model buffer size =  4165.37 MiB
repack: repack tensor blk.0.attn_q.weight with q4_K_8x8
repack: repack tensor blk.0.attn_k.weight with q4_K_8x8
repack: repack tensor blk.0.attn_output.weight with q4_K_8x8
repack: repack tensor blk.0.ffn_gate.weight with q4_K_8x8
.repack: repack tensor blk.0.ffn_up.weight with q4_K_8x8
repack: repack tensor blk.1.attn_q.weight with q4_K_8x8
.repack: repack tensor blk.1.attn_k.weight with q4_K_8x8
repack: repack tensor blk.1.attn_output.weight with q4_K_8x8
repack: repack tensor blk.1.ffn_gate.weight with q4_K_8x8
.repack: repack tensor blk.1.ffn_up.weight with q4_K_8x8
repack: repack tensor blk.2.attn_q.weight with q4_K_8x8
.repack: repack tensor blk.2.attn_k.weight with q4_K_8x8
repack: repack tensor blk.2.attn_output.weight with q4_K_8x8
repack: repack tensor blk.2.ffn_gate.weight with q4_K_8x8
.repack: repack tensor blk.2.ffn_up.weight with q4_K_8x8
repack: repack tensor blk.3.attn_q.weight with q4_K_8x8
.repack: repack tensor blk.3.attn_k.weight with q4_K_8x8
repack: repack tensor blk.3.attn_output.weight with q4_K_8x8
repack: repack tensor blk.3.ffn_gate.weight with q4_K_8x8
.repack: repack tensor blk.3.ffn_up.weight with q4_K_8x8
repack: repack tensor blk.4.attn_q.weight with q4_K_8x8
.repack: repack tensor blk.4.attn_k.weight with q4_K_8x8
repack: repack tensor blk.4.attn_v.weight with q4_K_8x8
repack: repack tensor blk.4.attn_output.weight with q4_K_8x8
repack: repack tensor blk.4.ffn_gate.weight with q4_K_8x8
.repack: repack tensor blk.4.ffn_down.weight with q4_K_8x8
.repack: repack tensor blk.4.ffn_up.weight with q4_K_8x8
repack: repack tensor blk.5.attn_q.weight with q4_K_8x8
.repack: repack tensor blk.5.attn_k.weight with q4_K_8x8
repack: repack tensor blk.5.attn_v.weight with q4_K_8x8
repack: repack tensor blk.5.attn_output.weight with q4_K_8x8
repack: repack tensor blk.5.ffn_gate.weight with q4_K_8x8
.repack: repack tensor blk.5.ffn_down.weight with q4_K_8x8
repack: repack tensor blk.5.ffn_up.weight with q4_K_8x8
.repack: repack tensor blk.6.attn_q.weight with q4_K_8x8
repack: repack tensor blk.6.attn_k.weight with q4_K_8x8
repack: repack tensor blk.6.attn_output.weight with q4_K_8x8
.repack: repack tensor blk.6.ffn_gate.weight with q4_K_8x8
repack: repack tensor blk.6.ffn_up.weight with q4_K_8x8
.repack: repack tensor blk.7.attn_q.weight with q4_K_8x8
repack: repack tensor blk.7.attn_k.weight with q4_K_8x8
repack: repack tensor blk.7.attn_v.weight with q4_K_8x8
repack: repack tensor blk.7.attn_output.weight with q4_K_8x8
.repack: repack tensor blk.7.ffn_gate.weight with q4_K_8x8
repack: repack tensor blk.7.ffn_down.weight with q4_K_8x8
.repack: repack tensor blk.7.ffn_up.weight with q4_K_8x8
.repack: repack tensor blk.8.attn_q.weight with q4_K_8x8
repack: repack tensor blk.8.attn_k.weight with q4_K_8x8
repack: repack tensor blk.8.attn_v.weight with q4_K_8x8
repack: repack tensor blk.8.attn_output.weight with q4_K_8x8
repack: repack tensor blk.8.ffn_gate.weight with q4_K_8x8
.repack: repack tensor blk.8.ffn_down.weight with q4_K_8x8
.repack: repack tensor blk.8.ffn_up.weight with q4_K_8x8
.repack: repack tensor blk.9.attn_q.weight with q4_K_8x8
repack: repack tensor blk.9.attn_k.weight with q4_K_8x8
repack: repack tensor blk.9.attn_output.weight with q4_K_8x8
repack: repack tensor blk.9.ffn_gate.weight with q4_K_8x8
.repack: repack tensor blk.9.ffn_up.weight with q4_K_8x8
.repack: repack tensor blk.10.attn_q.weight with q4_K_8x8
repack: repack tensor blk.10.attn_k.weight with q4_K_8x8
repack: repack tensor blk.10.attn_v.weight with q4_K_8x8
repack: repack tensor blk.10.attn_output.weight with q4_K_8x8
repack: repack tensor blk.10.ffn_gate.weight with q4_K_8x8
.repack: repack tensor blk.10.ffn_down.weight with q4_K_8x8
.repack: repack tensor blk.10.ffn_up.weight with q4_K_8x8
.repack: repack tensor blk.11.attn_q.weight with q4_K_8x8
repack: repack tensor blk.11.attn_k.weight with q4_K_8x8
repack: repack tensor blk.11.attn_v.weight with q4_K_8x8
repack: repack tensor blk.11.attn_output.weight with q4_K_8x8
repack: repack tensor blk.11.ffn_gate.weight with q4_K_8x8
.repack: repack tensor blk.11.ffn_down.weight with q4_K_8x8
.repack: repack tensor blk.11.ffn_up.weight with q4_K_8x8
repack: repack tensor blk.12.attn_q.weight with q4_K_8x8
.repack: repack tensor blk.12.attn_k.weight with q4_K_8x8
repack: repack tensor blk.12.attn_output.weight with q4_K_8x8
repack: repack tensor blk.12.ffn_gate.weight with q4_K_8x8
.repack: repack tensor blk.12.ffn_up.weight with q4_K_8x8
repack: repack tensor blk.13.attn_q.weight with q4_K_8x8
.repack: repack tensor blk.13.attn_k.weight with q4_K_8x8
repack: repack tensor blk.13.attn_v.weight with q4_K_8x8
repack: repack tensor blk.13.attn_output.weight with q4_K_8x8
repack: repack tensor blk.13.ffn_gate.weight with q4_K_8x8
.repack: repack tensor blk.13.ffn_down.weight with q4_K_8x8
repack: repack tensor blk.13.ffn_up.weight with q4_K_8x8
.repack: repack tensor blk.14.attn_q.weight with q4_K_8x8
repack: repack tensor blk.14.attn_k.weight with q4_K_8x8
repack: repack tensor blk.14.attn_v.weight with q4_K_8x8
repack: repack tensor blk.14.attn_output.weight with q4_K_8x8
.repack: repack tensor blk.14.ffn_gate.weight with q4_K_8x8
repack: repack tensor blk.14.ffn_down.weight with q4_K_8x8
.repack: repack tensor blk.14.ffn_up.weight with q4_K_8x8
.repack: repack tensor blk.15.attn_q.weight with q4_K_8x8
repack: repack tensor blk.15.attn_k.weight with q4_K_8x8
repack: repack tensor blk.15.attn_output.weight with q4_K_8x8
repack: repack tensor blk.15.ffn_gate.weight with q4_K_8x8
.repack: repack tensor blk.15.ffn_up.weight with q4_K_8x8
.repack: repack tensor blk.16.attn_q.weight with q4_K_8x8
repack: repack tensor blk.16.attn_k.weight with q4_K_8x8
repack: repack tensor blk.16.attn_v.weight with q4_K_8x8
repack: repack tensor blk.16.attn_output.weight with q4_K_8x8
.repack: repack tensor blk.16.ffn_gate.weight with q4_K_8x8
repack: repack tensor blk.16.ffn_down.weight with q4_K_8x8
.repack: repack tensor blk.16.ffn_up.weight with q4_K_8x8
.repack: repack tensor blk.17.attn_q.weight with q4_K_8x8
repack: repack tensor blk.17.attn_k.weight with q4_K_8x8
repack: repack tensor blk.17.attn_v.weight with q4_K_8x8
repack: repack tensor blk.17.attn_output.weight with q4_K_8x8
repack: repack tensor blk.17.ffn_gate.weight with q4_K_8x8
.repack: repack tensor blk.17.ffn_down.weight with q4_K_8x8
.repack: repack tensor blk.17.ffn_up.weight with q4_K_8x8
.repack: repack tensor blk.18.attn_q.weight with q4_K_8x8
repack: repack tensor blk.18.attn_k.weight with q4_K_8x8
repack: repack tensor blk.18.attn_output.weight with q4_K_8x8
repack: repack tensor blk.18.ffn_gate.weight with q4_K_8x8
.repack: repack tensor blk.18.ffn_up.weight with q4_K_8x8
.repack: repack tensor blk.19.attn_q.weight with q4_K_8x8
repack: repack tensor blk.19.attn_k.weight with q4_K_8x8
repack: repack tensor blk.19.attn_v.weight with q4_K_8x8
repack: repack tensor blk.19.attn_output.weight with q4_K_8x8
repack: repack tensor blk.19.ffn_gate.weight with q4_K_8x8
.repack: repack tensor blk.19.ffn_down.weight with q4_K_8x8
.repack: repack tensor blk.19.ffn_up.weight with q4_K_8x8
repack: repack tensor blk.20.attn_q.weight with q4_K_8x8
.repack: repack tensor blk.20.attn_k.weight with q4_K_8x8
repack: repack tensor blk.20.attn_v.weight with q4_K_8x8
repack: repack tensor blk.20.attn_output.weight with q4_K_8x8
repack: repack tensor blk.20.ffn_gate.weight with q4_K_8x8
.repack: repack tensor blk.20.ffn_down.weight with q4_K_8x8
repack: repack tensor blk.20.ffn_up.weight with q4_K_8x8
.repack: repack tensor blk.21.attn_q.weight with q4_K_8x8
repack: repack tensor blk.21.attn_k.weight with q4_K_8x8
repack: repack tensor blk.21.attn_output.weight with q4_K_8x8
.repack: repack tensor blk.21.ffn_gate.weight with q4_K_8x8
repack: repack tensor blk.21.ffn_up.weight with q4_K_8x8
.repack: repack tensor blk.22.attn_q.weight with q4_K_8x8
repack: repack tensor blk.22.attn_k.weight with q4_K_8x8
repack: repack tensor blk.22.attn_v.weight with q4_K_8x8
.repack: repack tensor blk.22.attn_output.weight with q4_K_8x8
repack: repack tensor blk.22.ffn_gate.weight with q4_K_8x8
repack: repack tensor blk.22.ffn_down.weight with q4_K_8x8
.repack: repack tensor blk.22.ffn_up.weight with q4_K_8x8
.repack: repack tensor blk.23.attn_q.weight with q4_K_8x8
repack: repack tensor blk.23.attn_k.weight with q4_K_8x8
repack: repack tensor blk.23.attn_v.weight with q4_K_8x8
repack: repack tensor blk.23.attn_output.weight with q4_K_8x8
.repack: repack tensor blk.23.ffn_gate.weight with q4_K_8x8
repack: repack tensor blk.23.ffn_down.weight with q4_K_8x8
.repack: repack tensor blk.23.ffn_up.weight with q4_K_8x8
.repack: repack tensor blk.24.attn_q.weight with q4_K_8x8
repack: repack tensor blk.24.attn_k.weight with q4_K_8x8
repack: repack tensor blk.24.attn_output.weight with q4_K_8x8
repack: repack tensor blk.24.ffn_gate.weight with q4_K_8x8
.repack: repack tensor blk.24.ffn_up.weight with q4_K_8x8
.repack: repack tensor blk.25.attn_q.weight with q4_K_8x8
repack: repack tensor blk.25.attn_k.weight with q4_K_8x8
repack: repack tensor blk.25.attn_v.weight with q4_K_8x8
repack: repack tensor blk.25.attn_output.weight with q4_K_8x8
repack: repack tensor blk.25.ffn_gate.weight with q4_K_8x8
.repack: repack tensor blk.25.ffn_down.weight with q4_K_8x8
.repack: repack tensor blk.25.ffn_up.weight with q4_K_8x8
.repack: repack tensor blk.26.attn_q.weight with q4_K_8x8
repack: repack tensor blk.26.attn_k.weight with q4_K_8x8
repack: repack tensor blk.26.attn_v.weight with q4_K_8x8
repack: repack tensor blk.26.attn_output.weight with q4_K_8x8
repack: repack tensor blk.26.ffn_gate.weight with q4_K_8x8
.repack: repack tensor blk.26.ffn_down.weight with q4_K_8x8
.repack: repack tensor blk.26.ffn_up.weight with q4_K_8x8
repack: repack tensor blk.27.attn_q.weight with q4_K_8x8
.repack: repack tensor blk.27.attn_k.weight with q4_K_8x8
repack: repack tensor blk.27.attn_output.weight with q4_K_8x8
repack: repack tensor blk.27.ffn_gate.weight with q4_K_8x8
.repack: repack tensor blk.27.ffn_up.weight with q4_K_8x8
repack: repack tensor blk.28.attn_q.weight with q4_K_8x8
.repack: repack tensor blk.28.attn_k.weight with q4_K_8x8
repack: repack tensor blk.28.attn_output.weight with q4_K_8x8
repack: repack tensor blk.28.ffn_gate.weight with q4_K_8x8
.repack: repack tensor blk.28.ffn_up.weight with q4_K_8x8
repack: repack tensor blk.29.attn_q.weight with q4_K_8x8
.repack: repack tensor blk.29.attn_k.weight with q4_K_8x8
repack: repack tensor blk.29.attn_output.weight with q4_K_8x8
repack: repack tensor blk.29.ffn_gate.weight with q4_K_8x8
.repack: repack tensor blk.29.ffn_up.weight with q4_K_8x8
repack: repack tensor blk.30.attn_q.weight with q4_K_8x8
.repack: repack tensor blk.30.attn_k.weight with q4_K_8x8
repack: repack tensor blk.30.attn_output.weight with q4_K_8x8
repack: repack tensor blk.30.ffn_gate.weight with q4_K_8x8
.repack: repack tensor blk.30.ffn_up.weight with q4_K_8x8
repack: repack tensor blk.31.attn_q.weight with q4_K_8x8
.repack: repack tensor blk.31.attn_k.weight with q4_K_8x8
repack: repack tensor blk.31.attn_output.weight with q4_K_8x8
repack: repack tensor blk.31.ffn_gate.weight with q4_K_8x8
.repack: repack tensor blk.31.ffn_up.weight with q4_K_8x8
...................
llama_context: constructing llama_context
llama_context: n_batch is less than GGML_KQ_MASK_PAD - increasing to 64
llama_context: n_seq_max     = 1
llama_context: n_ctx         = 2048
llama_context: n_ctx_per_seq = 2048
llama_context: n_batch       = 64
llama_context: n_ubatch      = 8
llama_context: causal_attn   = 1
llama_context: flash_attn    = 0
llama_context: kv_unified    = false
llama_context: freq_base     = 1000000.0
llama_context: freq_scale    = 1
llama_context: n_ctx_per_seq (2048) < n_ctx_train (32768) -- the full capacity of the model will not be utilized
set_abort_callback: call
llama_context:        CPU  output buffer size =     0.12 MiB
create_memory: n_ctx = 2048 (padded)
llama_kv_cache_unified: layer   0: dev = CPU
llama_kv_cache_unified: layer   1: dev = CPU
llama_kv_cache_unified: layer   2: dev = CPU
llama_kv_cache_unified: layer   3: dev = CPU
llama_kv_cache_unified: layer   4: dev = CPU
llama_kv_cache_unified: layer   5: dev = CPU
llama_kv_cache_unified: layer   6: dev = CPU
llama_kv_cache_unified: layer   7: dev = CPU
llama_kv_cache_unified: layer   8: dev = CPU
llama_kv_cache_unified: layer   9: dev = CPU
llama_kv_cache_unified: layer  10: dev = CPU
llama_kv_cache_unified: layer  11: dev = CPU
llama_kv_cache_unified: layer  12: dev = CPU
llama_kv_cache_unified: layer  13: dev = CPU
llama_kv_cache_unified: layer  14: dev = CPU
llama_kv_cache_unified: layer  15: dev = CPU
llama_kv_cache_unified: layer  16: dev = CPU
llama_kv_cache_unified: layer  17: dev = CPU
llama_kv_cache_unified: layer  18: dev = CPU
llama_kv_cache_unified: layer  19: dev = CPU
llama_kv_cache_unified: layer  20: dev = CPU
llama_kv_cache_unified: layer  21: dev = CPU
llama_kv_cache_unified: layer  22: dev = CPU
llama_kv_cache_unified: layer  23: dev = CPU
llama_kv_cache_unified: layer  24: dev = CPU
llama_kv_cache_unified: layer  25: dev = CPU
llama_kv_cache_unified: layer  26: dev = CPU
llama_kv_cache_unified: layer  27: dev = CPU
llama_kv_cache_unified: layer  28: dev = CPU
llama_kv_cache_unified: layer  29: dev = CPU
llama_kv_cache_unified: layer  30: dev = CPU
llama_kv_cache_unified: layer  31: dev = CPU
llama_kv_cache_unified:        CPU KV buffer size =   256.00 MiB
llama_kv_cache_unified: size =  256.00 MiB (  2048 cells,  32 layers,  1/1 seqs), K (f16):  128.00 MiB, V (f16):  128.00 MiB
llama_context: enumerating backends
llama_context: backend_ptrs.size() = 1
llama_context: max_nodes = 2328
llama_context: worst-case: n_tokens = 8, n_seqs = 1, n_outputs = 0
graph_reserve: reserving a graph for ubatch with n_tokens =    8, n_seqs =  1, n_outputs =    8
graph_reserve: reserving a graph for ubatch with n_tokens =    1, n_seqs =  1, n_outputs =    1
graph_reserve: reserving a graph for ubatch with n_tokens =    8, n_seqs =  1, n_outputs =    8
llama_context:        CPU compute buffer size =     3.06 MiB
llama_context: graph nodes  = 1126
llama_context: graph splits = 1
CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | LLAMAFILE = 1 | OPENMP = 1 | REPACK = 1 | 
Model metadata: {'general.name': 'mistralai_mistral-7b-instruct-v0.2', 'general.architecture': 'llama', 'llama.context_length': '32768', 'llama.rope.dimension_count': '128', 'llama.embedding_length': '4096', 'llama.block_count': '32', 'llama.feed_forward_length': '14336', 'llama.attention.head_count': '32', 'tokenizer.ggml.eos_token_id': '2', 'general.file_type': '15', 'llama.attention.head_count_kv': '8', 'llama.attention.layer_norm_rms_epsilon': '0.000010', 'llama.rope.freq_base': '1000000.000000', 'tokenizer.ggml.model': 'llama', 'general.quantization_version': '2', 'tokenizer.ggml.bos_token_id': '1', 'tokenizer.ggml.unknown_token_id': '0', 'tokenizer.ggml.padding_token_id': '0', 'tokenizer.ggml.add_bos_token': 'true', 'tokenizer.ggml.add_eos_token': 'false', 'tokenizer.chat_template': "{{ bos_token }}{% for message in messages %}{% if (message['role'] == 'user') != (loop.index0 % 2 == 0) %}{{ raise_exception('Conversation roles must alternate user/assistant/user/assistant/...') }}{% endif %}{% if message['role'] == 'user' %}{{ '[INST] ' + message['content'] + ' [/INST]' }}{% elif message['role'] == 'assistant' %}{{ message['content'] + eos_token}}{% else %}{{ raise_exception('Only user and assistant roles are supported!') }}{% endif %}{% endfor %}"}
Available chat formats from metadata: chat_template.default
Guessed chat format: mistral-instruct
Building index from SQLite database...
Loading embedding model: intfloat/e5-small-v2 on CPU
Index saved to faiss_index
llama_perf_context_print:        load time =  174430.20 ms
llama_perf_context_print: prompt eval time =  174422.47 ms /   415 tokens (  420.30 ms per token,     2.38 tokens per second)
llama_perf_context_print:        eval time =   32964.71 ms /    30 runs   ( 1098.82 ms per token,     0.91 tokens per second)
llama_perf_context_print:       total time =  207455.34 ms /   445 tokens
llama_perf_context_print:    graphs reused =         66
Llama.generate: 62 prefix-match hit, remaining 463 prompt tokens to eval
llama_perf_context_print:        load time =  174430.20 ms
llama_perf_context_print: prompt eval time =  199308.73 ms /   463 tokens (  430.47 ms per token,     2.32 tokens per second)
llama_perf_context_print:        eval time =   21543.42 ms /    27 runs   (  797.90 ms per token,     1.25 tokens per second)
llama_perf_context_print:       total time =  220888.93 ms /   490 tokens
llama_perf_context_print:    graphs reused =         67
